<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>crossoverJie&#39;s Blog</title>
  
  <subtitle>baller</subtitle>
  <link href="http://crossoverjie.top/atom.xml" rel="self"/>
  
  <link href="http://crossoverjie.top/"/>
  <updated>2024-04-10T13:34:24.356Z</updated>
  <id>http://crossoverjie.top/</id>
  
  <author>
    <name>crossoverJie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2024年的云原生架构需要哪些技术栈</title>
    <link href="http://crossoverjie.top/2024/04/11/ob/2024-cloud-native/"/>
    <id>http://crossoverjie.top/2024/04/11/ob/2024-cloud-native/</id>
    <published>2024-04-11T02:22:21.000Z</published>
    <updated>2024-04-10T13:34:24.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>时间过得很快啊，一转眼已经到了 2024 年，还记得 15 年刚工作那会掌握个 <code>SSM/H(Spring/Struts2/Mybatis/Hibernate)</code> 框架就能应付大部分面试了。</p><blockquote><p>现在 CS 专业的新同学估计都没听说过 SSM😢</p></blockquote><p>恰好从我刚开始工作时的移动互联网热潮到电商-&gt;共享经济-&gt;toB 大热-&gt;如今我都经历了一遍，技术栈也有由最开始的单体应用+物理机发展到现在的 kubernetes 云原生架构。</p><p>当然中途也经历了几个大的阶段：<br>SOA服务化-&gt; 微服务-&gt; 云原生-&gt; 服务网格-&gt; 无服务等几个阶段。</p><p>最近一份工作又主要是在做基础架构，我认为了解的还算是比较全面的，所以本文我就以我的视角分享下我们在 2024 年应当使用哪些云原生技术栈，因为涉及到的技术组件比较多，就不过多讨论细节了。</p><p>但可以保证的是提到的技术栈都是我所用过的，优缺点都会提到，主打一个真实体验。</p><span id="more"></span><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p> 首先是操作系统，这里有别于以往我们传统的操作系统(Linux&#x2F;Windows Server&#x2F;MacOS)，主要指的是云原生的操作系统，没有太多可以选择的余地，那就是 <code>kubernetes</code>。</p><p>不过怎么维护好 kubernetes 是一个难点问题，还记得去年下半年滴滴出过一次事故，网传就是 kubernetes 升级出现的问题。</p><p>根据我们的经验来看，对于小团队更建议直接托管给云厂商，维护 kubernetes 是一个非常复杂的工作，小团队通常都是一职多能，自己维护更容易出问题。</p><p>当然大团队有专人维护最好，即便是出问题也能快速响应，前提是自己能 cover 住这个风险。</p><blockquote><p>因为我们是小团队，所以考虑到成本和稳定性，我们也只使用了云厂商的 kubernetes 能力，其余的部分可控组件由我们自己维护（具体的后文会讲到）</p></blockquote><h2 id="多云的优势与好处"><a href="#多云的优势与好处" class="headerlink" title="多云的优势与好处"></a>多云的优势与好处</h2><p>既然都用了云厂商的容器服务，那也要考虑到云厂商故障可能带来的问题；比如去年的阿里云故障。</p><p>所以现在一些中大厂也会选择多云方案，将同一份代码部署再多个云服务商，一旦其中一个出现问题可以快速切换。</p><p>但具体的实施过程中也有许多挑战，比如最棘手也是最关键的数据一致性如何保证？</p><p>当然我们可以采用一些支持分布式部署的数据库或中间件，他们本身是支持数据同步的；比如消息队列中的 Pulsar，它就可以跨级群部署以及消息同步。</p><p>同时多云部署对应的成本也会提升，在这个“降本增效”的大背景下也得慎重考虑；所以对此还有一个折中方案：</p><blockquote><p>我们的技术架构需要具备快速迁移到其他云服务的能力，比如我们内部有一些工具可以定期备份资源，比如 MySQL 的 binlog，一些中间件的元数据，同时可以基于这些元数据快速恢复业务。</p></blockquote><p>一般遇到需要切换云服务时都是一些极端情况，所以允许部分运行时的数据丢失也是能接受的，我们只要保证最核心的数据不会丢失从而不影响业务即可。</p><p>这个说起来简单，但也需要我们花时间进行模拟演练；具体是否实施就得看公司是否接受云服务宕机带来的损失以及演练所花的成本了。</p><blockquote><p>我们是具备恢复元数据能力的，但会丢失部分运行时的数据。</p></blockquote><h1 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h1><p>既然我们已经选择 kubernetes 作为我们云原生的操作系统，那我们的持续集成与发布也得围绕着 kubernetes 来做。</p><p><img src="https://s2.loli.net/2024/03/05/P2ducxQtqSCGnDb.png"></p><p>上图是一张使用 Git 配合 gitlab+ArgoCD 的流程图，我们使用 gitlab 来管理源码，同时也可以利用他的 Pipline 帮我们做持续集成，最终使用 Argo 帮我们打通 kubernetes 的流程。</p><blockquote><p>也就是我们常说的 <code>GitOps</code></p></blockquote><p>同时我们的回滚历史版本，扩缩容都由 kubernetes 提供能力，我们的 DevOps 平台只需要调用 kubernetes 的 API 即可。</p><p>当然还有现在流行 FinOps，我的理解主要是做云成本的管理和优化，对应到我的工作就是回收一些不用的资源，在不影响业务的情况下适当的降低一些配置😳。</p><h1 id="Service-Mesh"><a href="#Service-Mesh" class="headerlink" title="Service Mesh"></a>Service Mesh</h1><p><img src="https://s2.loli.net/2024/03/06/mlzdFAHNM6bDGvr.png"></p><p>接下来便是我认为最重要的 Service Mesh 环节了，这个的背景故事就多了，本质上我觉得这都是由 RPC(Remote Process Call) 引起的也是分布式所带来的。</p><p>由最开始的单机的本地函数调用开始：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">local+------&gt;remote +------&gt; micro-service+-----&gt;service-mesh</span><br><span class="line">               +                  |                    +</span><br><span class="line">               v                  v                    v</span><br><span class="line">           +---+----+       +-----+------+        +----+----+</span><br><span class="line">           | motan  |       | SpringCloud|        | Istio   |</span><br><span class="line">           | dubbo  |       | Dubbo3.0   |        | Linkerd |</span><br><span class="line">           | gRPC   |       | SOFA       |        |         |</span><br><span class="line">           +--------+       +------------+        +---------+</span><br></pre></td></tr></table></figure><p>主要经历了以上三个重要的阶段，分别是 RPC 框架到微服务再到现在的服务网格。</p><ul><li>RPC 框架主要帮我们简化了分布式通信，只专注于业务本身</li><li>微服务框架的出现可以更好的帮我们治理大批量的服务，比如一些限流、路由、降级等功能，让我们分布式应用更加健壮。</li><li>而如今的服务网格让我们的应用程序更加适配云原生，专注于业务研发而不再需要去维护微服务框架；将这些基础功能全部下沉到我们的基础层，同时也带来了不弱于微服务框架的功能性。</li></ul><p>但使用 Istio 也有着不低的技术门槛，我觉得如果满足以下条件更推荐使用 Istio：</p><ul><li>应用已经接入 kubernetes 平台</li><li>应用之间采用的是 gRPC 通讯框架</li><li>API 网关也迁移到 Istio Gateway</li><li>公司至少预备一个专人维护 Istio（这里的维护不一定是对代码的了解，但一定要对 Istio 本身的功能和文档足够了解）</li></ul><p>除此之外使用 <code>SpringCloud</code>、<code>Dubbo</code>、<code>kratos</code>、<code>go-zero</code>之类的微服务框架也未尝不可。</p><p>我之前有写过两篇关于 Istio 的 文章，也可以用做参考：</p><ul><li><a href="https://crossoverjie.top/2023/10/16/ob/k8s-grpc-lb/">在 kubernetes 环境中实现 gRPC 负载均衡</a></li><li><a href="https://crossoverjie.top/2023/10/31/ob/k8s-Istio01/">服务网格实战-入门Istio</a></li></ul><h1 id="可观测性"><a href="#可观测性" class="headerlink" title="可观测性"></a>可观测性</h1><p><img src="https://s2.loli.net/2024/03/06/wOtk3Fb5fhEIWpB.png"><br>现如今可观测系统也变得越来越重要，个人觉得评价一个技术团队重要指标就是他们的可观测系统做的如何。</p><p>一个优秀的可观测系统可以清晰得知系统的运行状态、高效的排查问题、还有及时的故障告警。</p><p>要实现上述标准就需要我们可观测系统的三个核心指标了：</p><p><img src="https://s2.loli.net/2024/03/06/gXQIfcJO1qVWimH.png"></p><ul><li>Metrics，借助它我们可以在 Grafana 中绘制出各种直观的面板，可以更加全面的了解我们系统的运行状态</li></ul><p><img src="https://s2.loli.net/2024/03/06/sWk2gXnTNxuafBF.png"></p><ul><li>Trace则是可以帮助我们构建出系统调用的全貌，通过一个 trace 就可以知道一个请求经历了哪些系统，在哪个环节出了问题。</li><li>Logs 就比较好理解了，就是我们自己在应用里打印的一些日志；只是和以往的开发模式略有不同的是：在云原生体系中更推荐直接输出到标准输出和标准错误流中，一些第三方采集组件可以更方便的进行采集。</li></ul><hr><p>我们自己的可观测系统经历过一次迭代，以往的技术栈是：</p><ul><li><code>Metrics</code> 使用 <code>VictoriaMetrics</code>：这是一个完全兼容 <code>Prometheus</code> 的时序数据库，但相对 <code>Prometheus</code> 来说更加的节省资源。</li><li>Trace 选择的是 <code>SkyWalking</code>，这也是 Java trace 领域比较流行的技术方案。</li><li>Logs：使用 filebeat 采集日志然后输出到 ElasticSearch 中，这也是比较经典的方案。</li></ul><p>去年底我们做了一次比较大的改造，主要就是将 <code>SkyWalking</code> 换为了 <code>OpenTelemetry</code>，这是一个更加开放的社区，也逐渐成为云原生可观测的标准了。</p><p>使用它我们的灵活性更高，不用与某些具体的技术栈进行绑定；目前 logs 还没有切换，社区也还在 beta 测试中，后续成熟后也可以直接用 <code>OpenTelemetry</code> 来收集日志。</p><p>我也写的有一篇 SW 迁移到 <code>OpenTelemetry</code> 的文章，感兴趣的朋友可以参考：</p><ul><li><a href="https://juejin.cn/post/7341669201010262053">实战：如何优雅的从 SkyWalking 切换到 OpenTelemetry</a></li></ul><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><p>这里单独把消息队列拎出来是因为我目前主要是在维护公司内部的消息队列，同时业务体量大了之后消息队列变得非常重要了，通常会充当各个业务线对接的桥梁，或者是数据库同步 MySQL 的渠道，总之用处非常广泛。</p><p><img src="https://s2.loli.net/2024/03/07/WBeYUK8AVlcrgGs.png"></p><p>这里还是推荐更贴合云原生的消息队列 Pulsar，由于它存算分离的架构特性，配合kubernetes 的特性可以实现快速的扩缩容，相比 kafka 来说更易维护；同时社区活跃度也非常高，在 Bug 修复和支持新特性方面比较积极。</p><p>Pulsar官方支持的客户端也比较全面：</p><table><thead><tr><th>Language</th><th>Documentation</th><th>Release note</th><th>Code repo</th></tr></thead><tbody><tr><td>Java</td><td><a href="client-libraries-java.md">User doc</a>   <br/> <a href="/api/client/">API doc</a></td><td><a href="pathname:///release-notes/client-java">Standalone</a></td><td><a href="https://github.com/apache/pulsar/tree/master/pulsar-client">Bundled</a></td></tr><tr><td>C++</td><td><a href="client-libraries-cpp.md">User doc</a>    <br/> <a href="@pulsar:apidoc:cpp@">API doc</a></td><td><a href="pathname:///release-notes/client-cpp">Standalone</a></td><td><a href="https://github.com/apache/pulsar-client-cpp">Standalone</a></td></tr><tr><td>Python</td><td><a href="client-libraries-python.md">User doc</a> <br/> <a href="@pulsar:apidoc:python@">API doc</a></td><td><a href="pathname:///release-notes/client-python">Standalone</a></td><td><a href="https://github.com/apache/pulsar-client-python">Standalone</a></td></tr><tr><td>Go client</td><td><a href="client-libraries-go.md">User doc</a>   <br/> <a href="https://pkg.go.dev/github.com/apache/pulsar-client-go/pulsar">API doc</a></td><td><a href="pathname:///release-notes/client-go">Standalone</a></td><td><a href="https://github.com/apache/pulsar-client-go">Standalone</a></td></tr><tr><td>Node.js</td><td><a href="client-libraries-node.md">User doc</a>  <br/> <a href="@pulsar:apidoc:js@">API doc</a></td><td><a href="pathname:///release-notes/client-node">Standalone</a></td><td><a href="https://github.com/apache/pulsar-client-node">Standalone</a></td></tr><tr><td>C#&#x2F;DotPulsar</td><td><a href="client-libraries-dotnet.md">User doc</a></td><td><a href="pathname:///release-notes/client-cs">Standalone</a></td><td><a href="https://github.com/apache/pulsar-dotpulsar">Standalone</a></td></tr></tbody></table><p>还有一个问题是：如何部署我们的 Pulsar 集群，是私有化部署还是购买云服务（目前 Pulsar的商业公司 streamnative 和国内的腾讯云都有类似的服务）</p><p>我们之前有咨询过价格，相对来说还是自己部署性价比最高；和前文讲的一样，只使用云厂商的 kubernetes 服务，在这基础上部署我们的自己的服务。</p><p>因为得益于 Pulsar 社区的活跃，即便是自己维护出现问题也可以及时得到反馈；同时自己平时踩的坑也可以反哺社区。</p><p>之前也写过一些关于 Pulsar 的系列文章，感兴趣的可以查阅：</p><ul><li><a href="https://juejin.cn/post/7340195874867904547">在 kubernetes 环境下如何优雅扩缩容 Pulsar</a></li><li><a href="https://crossoverjie.top/2024/01/03/ob/Pulsar3.0-new-feature/">Pulsar3.0新功能介绍</a></li><li><a href="https://crossoverjie.top/2023/02/07/pulsar/pulsar-load-banance/">Pulsar负载均衡原理及优化</a></li><li><a href="https://crossoverjie.top/2024/01/15/ob/Bookkeeper-storage/">白话 Pulsar Bookkeeper 的存储模型</a></li><li><a href="https://crossoverjie.top/2023/01/16/pulsar/pulsar-perf-test/">Pulsar压测及优化</a></li></ul><h1 id="业务框架"><a href="#业务框架" class="headerlink" title="业务框架"></a>业务框架</h1><p>最后是业务框架的选择，决定这个的前提是我们先要确定选择哪个语言作为主力业务语言。</p><p>虽然这点对于 kubernetes 来说无关紧要，下面以我比较熟悉的 Java 和 Golang 进行介绍。</p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>Java 可选的技术方案就比较多了，如果我们只是上了 kubernetes 但没有使用服务网格；那完全可以只使用 <code>springboot</code> 开发 http 接口，就和开发一个单体应用一样简单。</p><p>只是这样会缺少一些服务治理的能力，更适用于中小型团队。</p><p>如果团队人员较多，也没使用服务网格时；那就推荐使用前文介绍的微服务框架：比如 Dubbo、SpringCloud 等。</p><p>当有专门的云原生团队时，则更推荐使用服务网格的方案，这样我们就能综合以上两种方案的优点：</p><ul><li>代码简洁，只是需要将 http 换为 gRPC。</li><li>同时利用 Istio 也包含了微服务框架的能力。</li></ul><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><p>Golang 其实也与 Java 类似，中小团队时我们完全可以只使用 Gin 这类 http 框架进行开发。</p><p>而中大型团队在 <code>Golang</code> 生态中也有对标 <code>Dubbo</code> 和 <code>SpringCloud</code> 的框架，比如 <a href="https://github.com/go-kratos/kratos">kratos</a>和 <a href="https://github.com/zeromicro/go-zero">go-zero</a> 等。</p><p>得益于 Golang 的简洁特性，我觉得比使用 Java 开发业务更加简单和“无脑”。</p><p>同样的后续也可以切换到服务网格，直接采用 gRPC 和 Golang 也非常适配，此时团队应该也比较成熟了，完全可以自己基于 gRPC 做一个开发脚手架，或者也可以使用 Kratos 或者是 go-zero 去掉他们的服务调用模块即可。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是个人对目前流行的技术方案的理解，也分别对不同团队规模进行了推荐；确实没有完美的技术方案，只有最合适的，也不要跟风选择一些自己不能把控的技术栈，最终吃亏的可能就是自己。</p><p>参考链接：</p><ul><li><a href="https://levelup.gitconnected.com/gitops-in-kubernetes-with-gitlab-ci-and-argocd-9e20b5d3b55b">https://levelup.gitconnected.com/gitops-in-kubernetes-with-gitlab-ci-and-argocd-9e20b5d3b55b</a></li><li><a href="https://grpc.io/">https://grpc.io/</a></li></ul><p>#Blog #CloudNative </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;时间过得很快啊，一转眼已经到了 2024 年，还记得 15 年刚工作那会掌握个 &lt;code&gt;SSM/H(Spring/Struts2/Mybatis/Hibernate)&lt;/code&gt; 框架就能应付大部分面试了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在 CS 专业的新同学估计都没听说过 SSM😢&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;恰好从我刚开始工作时的移动互联网热潮到电商-&amp;gt;共享经济-&amp;gt;toB 大热-&amp;gt;如今我都经历了一遍，技术栈也有由最开始的单体应用+物理机发展到现在的 kubernetes 云原生架构。&lt;/p&gt;
&lt;p&gt;当然中途也经历了几个大的阶段：&lt;br&gt;SOA服务化-&amp;gt; 微服务-&amp;gt; 云原生-&amp;gt; 服务网格-&amp;gt; 无服务等几个阶段。&lt;/p&gt;
&lt;p&gt;最近一份工作又主要是在做基础架构，我认为了解的还算是比较全面的，所以本文我就以我的视角分享下我们在 2024 年应当使用哪些云原生技术栈，因为涉及到的技术组件比较多，就不过多讨论细节了。&lt;/p&gt;
&lt;p&gt;但可以保证的是提到的技术栈都是我所用过的，优缺点都会提到，主打一个真实体验。&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    
    <category term="CloudNative" scheme="http://crossoverjie.top/tags/CloudNative/"/>
    
    <category term="k8s" scheme="http://crossoverjie.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>实战：如何优雅的从 Skywalking 切换到 OpenTelemetry</title>
    <link href="http://crossoverjie.top/2024/04/07/ob/otel-replace-sw/"/>
    <id>http://crossoverjie.top/2024/04/07/ob/otel-replace-sw/</id>
    <published>2024-04-07T09:16:21.000Z</published>
    <updated>2024-04-07T15:27:53.792Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2024/03/04/8YFIh7suTirZacj.png"></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近公司将我们之前使用的链路工具切换为了 <code>OpenTelemetry</code>.</p><p><img src="https://s2.loli.net/2024/03/03/9V1aUnpOd8EAG2Y.png"></p><span id="more"></span><p>我们的技术栈是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">        OTLP                               </span><br><span class="line">Client──────────►Collect────────►StartRocks</span><br><span class="line">(Agent)                               ▲    </span><br><span class="line">                                      │    </span><br><span class="line">                                      │    </span><br><span class="line">                                   Jaeger                                       </span><br></pre></td></tr></table></figure><p>其中客户端使用 OpenTelemetry 提供的 Java Agent 进行埋点收集数据，再由 Agent 通过 OTLP(OpenTelemetry Protocol) 协议将数据发往 Collector，在 <code>Collector</code> 中我们可以自行任意处理数据，并决定将这些数据如何存储（这点在以往的 SkyWalking 体系中是很难自定义的）</p><p>这里我们将数据写入 StartRocks 中，供之后的 UI 层进行查看。</p><blockquote><p><code>OpenTelemetry</code> 是可观测系统的新标准，基于它可以兼容以前使用的 Prometheus、 victoriametrics、skywalking 等系统，同时还可以灵活扩展，不用与任何但一生态或技术栈进行绑定。<br>更多关于 OTel 的内容会在今后介绍。</p></blockquote><h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><p>其中有一个关键问题就是：如何在线上进行<strong>无缝切换</strong>。</p><p>虽然我们内部的发布系统已经支持重新发布后就会切换到新的链路，也可以让业务自行发布然后逐步的切换到新的系统，这样也是最保险的方式。</p><p>但这样会有几个问题：</p><ul><li>当存在调用依赖的系统没有全部切换为新链路时，再查询的时候就会出现断层，整个链路无法全部串联起来。</li><li>业务团队没有足够的动力去推动发布，可能切换的周期较长。</li></ul><p>所以最好的方式还是由我们在后台统一发布，对外没有任何感知就可以一键全部切换为 OpenTelemetry。</p><p>仔细一看貌似也没什么难的，无非就是模拟用户点击发布按钮而已。</p><p>但这事由我们自动来做就不一样了，用户点击发布的时候会选择他们认为可以发布的分支进行发布，我们不能自作主张的比如选择 main 分支，有可能只是合并了但还不具备发布条件。</p><p>所以保险的方式还是得用当前项目上一次发布时所使用的 git hash 值重新打包发布。</p><p>但这也有几个问题：</p><ul><li>重复打包发布太慢了，线上几十上百个项目，每打包发布一次就得几分钟，虽然可以并发，但考虑到 kubernetes 的压力也不能调的太高。</li><li>保不准业务镜像中有单独加入一些环境变量，这样打包可能会漏。</li></ul><h1 id="切换方案"><a href="#切换方案" class="headerlink" title="切换方案"></a>切换方案</h1><p>所以思来想去最保险的方法还是将业务镜像拉取下来，然后手动删除镜像中的 skywalking 包以及 JVM 参数，全部替换为 OpenTelemetry 的包和 JVM 参数。</p><p>整体的方案如下：</p><ol><li>遍历 namespace 的 <code>pod ＞0</code> 的 deployment</li><li>遍历 deployment 中的所有 container，获得业务镜像<ol><li>跳过 istio 和日志采集 container，获取到业务容器</li><li>判断该容器是否需要替换，其实就是判断环境变量中是否有 skywalking ，如果有就需要替换。</li><li>获取业务容器的镜像</li></ol></li><li>基于该 Image 重新构建一个 OpenTelemetry 的镜像<br>   3.1 新的镜像包含新的启动脚本.<br>   3.1.1 新的启动脚本中会删除原有的 skywalking agent<br>   3.2 新镜像会包含 OpenTelemetry 的 jar 包以及我们自定义的 OTel 扩展包<br>   3.3 替换启动命令为新的启动脚本</li><li>修改 deployment 中的 JVM 启动参数</li><li>修改 deployment 的镜像后滚动更新</li><li>开启一个 goroutine 定时检测更新之后是否启动成功<ol><li>如果长时间 (比如五分钟) 都没有启动成功，则执行回滚流程</li></ol></li></ol><h1 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h1><p>因为需要涉及到操作 kubernetes，所以整体就使用 Golang 实现了。</p><h2 id="遍历-deployment-得到需要替换的容器镜像"><a href="#遍历-deployment-得到需要替换的容器镜像" class="headerlink" title="遍历 deployment 得到需要替换的容器镜像"></a>遍历 deployment 得到需要替换的容器镜像</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ProcessDeployment</span><span class="params">(ctx context.Context, finish []<span class="type">string</span>, deployment v1.Deployment, clientSet kubernetes.Interface)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">deploymentName := deployment.Name</span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> finish &#123;</span><br><span class="line"><span class="keyword">if</span> s == deploymentName &#123;</span><br><span class="line">klog.Infof(<span class="string">&quot;Skip finish deployment:%s&quot;</span>, deploymentName)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Write finish deployment name to a file</span></span><br><span class="line"><span class="keyword">defer</span> writeDeploymentName2File(deploymentName, fmt.Sprintf(<span class="string">&quot;finish-%s.log&quot;</span>, deployment.Namespace))</span><br><span class="line"></span><br><span class="line">appName := deployment.GetObjectMeta().GetLabels()[<span class="string">&quot;appName&quot;</span>]</span><br><span class="line">klog.Infof(<span class="string">&quot;Begin to process deployment:%s, appName:%s&quot;</span>, deploymentName, appName)</span><br><span class="line"></span><br><span class="line">upgrade, err := checkContainIstio(ctx, deployment, clientSet)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> upgrade == <span class="literal">false</span> &#123;</span><br><span class="line">klog.Infof(<span class="string">&quot;Don&#x27;t have istio, No need to upgrade deployment:%s appName:%s&quot;</span>, deploymentName, appName)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, container := <span class="keyword">range</span> deployment.Spec.Template.Spec.Containers &#123;</span><br><span class="line"><span class="keyword">if</span> strings.HasPrefix(deploymentName, container.Name) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if container has sw jvm</span></span><br><span class="line"><span class="keyword">for</span> _, envVar := <span class="keyword">range</span> container.Env &#123;</span><br><span class="line"><span class="keyword">if</span> envVar.Name == <span class="string">&quot;CATALINA_OPTS&quot;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> !strings.Contains(envVar.Value, <span class="string">&quot;skywalking&quot;</span>) &#123;</span><br><span class="line">klog.Infof(<span class="string">&quot;Skip upgrade don&#x27;t have sw jvm deployment:%s container:%s&quot;</span>, deploymentName, container.Name)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">upgrade(container)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check newDeployment status</span></span><br><span class="line"><span class="keyword">go</span> checkNewDeploymentStatus(ctx, clientSet, newDeployment)</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete from image</span></span><br><span class="line">deleteImage(container.Image)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数需要传入一个 deployment ，同时还有一个已经完成了的列表进来。</p><blockquote><p>已完成列表用于多次运行的时候可以快速跳过已经执行的 deployment。</p></blockquote><p><code>checkContainIstio()</code> 函数很简单，判断是否包含了 Istio 容器，如果没有包含说明不是后端应用（可能是前端、大数据之类的任务），就可以直接跳过了。</p><hr><p><img src="https://s2.loli.net/2024/03/03/xzHPV9mgCJkZ4cY.png"><br>而判断是否需要替换的前提这事判断环境变量 <code>CATALINA_OPTS</code> 中是否包含了 skywalking 的内容，如果包含则说明需要进行替换。</p><h2 id="Upgrade-核心函数"><a href="#Upgrade-核心函数" class="headerlink" title="Upgrade 核心函数"></a>Upgrade 核心函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">upgrade</span><span class="params">(container Container)</span></span>&#123;</span><br><span class="line">klog.Infof(<span class="string">&quot;Begin to upgrade deployment:%s container:%s&quot;</span>, deploymentName, container.Name)</span><br><span class="line">newImageName := fmt.Sprintf(<span class="string">&quot;%s-otel-%s&quot;</span>, container.Image, generateRandomString(<span class="number">4</span>))</span><br><span class="line">err := BuildNewOtelImage(container.Image, newImageName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update deployment jvm ENV</span></span><br><span class="line"><span class="keyword">for</span> e, envVar := <span class="keyword">range</span> container.Env &#123;</span><br><span class="line"><span class="keyword">if</span> envVar.Name == <span class="string">&quot;CATALINA_OPTS&quot;</span> &#123;</span><br><span class="line">otelJVM := replaceSWAgent2OTel(envVar.Value, appName)</span><br><span class="line">deployment.Spec.Template.Spec.Containers[i].Env[e].Value = otelJVM</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Update deployment image</span></span><br><span class="line">deployment.Spec.Template.Spec.Containers[i].Image = newImageName</span><br><span class="line"></span><br><span class="line">newDeployment, err := clientSet.AppsV1().Deployments(deployment.Namespace).Update(ctx, &amp;deployment, metav1.UpdateOptions&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">klog.Infof(<span class="string">&quot;Finish upgrade deployment:%s container:%s&quot;</span>, deploymentName, container.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里一共分为以下几部：</p><ul><li>基于老镜像构建新镜像</li><li>更新原有的 <code>CATALINA_OPTS</code> 环境变量，也就是替换 skywalking 的参数</li><li>更新 deployment 镜像，触发滚动更新</li></ul><h2 id="构建新镜像"><a href="#构建新镜像" class="headerlink" title="构建新镜像"></a>构建新镜像</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">dockerfile = fmt.Sprintf(<span class="string">`FROM %s</span></span><br><span class="line"><span class="string">COPY %s /home/admin/%s</span></span><br><span class="line"><span class="string">COPY otel.tar.gz /home/admin/otel.tar.gz</span></span><br><span class="line"><span class="string">RUN tar -zxvf /home/admin/otel.tar.gz -C /home/admin</span></span><br><span class="line"><span class="string">RUN rm -rf /home/admin/skywalking-agent</span></span><br><span class="line"><span class="string">ENTRYPOINT [&quot;/bin/sh&quot;, &quot;/home/admin/start.sh&quot;]</span></span><br><span class="line"><span class="string">`</span>, fromImage, script, script)</span><br><span class="line"></span><br><span class="line">idx := strings.LastIndex(newImageName, <span class="string">&quot;/&quot;</span>) + <span class="number">1</span></span><br><span class="line">dockerFileName := newImageName[idx:]</span><br><span class="line">create, err := os.Create(fmt.Sprintf(<span class="string">&quot;Dockerfile-%s&quot;</span>, dockerFileName))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">create.Close()</span><br><span class="line">os.Remove(create.Name())</span><br><span class="line">&#125;()</span><br><span class="line">_, err = create.WriteString(dockerfile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cmd := exec.Command(<span class="string">&quot;docker&quot;</span>, <span class="string">&quot;build&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;-f&quot;</span>, create.Name(), <span class="string">&quot;-t&quot;</span>, newImageName)</span><br><span class="line">cmd.Stdin = strings.NewReader(dockerfile)</span><br><span class="line"><span class="keyword">if</span> err := cmd.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这里的重点就是构建这个新镜像，从这个 dockerfile 中也能看出具体的逻辑，也就是上文提到的删除原有的 skywalking 资源同时将新的 OpenTelemetry 资源打包进去。</p><p>最后再将这个镜像上传到私服。</p><p><img src="https://s2.loli.net/2024/03/03/s7fryhQSPJgcuvj.png"><br>其中的替换 JVM 参数也比较简单，直接删除 skywalking 的内容，然后再追加上 OpenTelemetry 需要的参数即可。</p><h2 id="定时检测替换是否成功"><a href="#定时检测替换是否成功" class="headerlink" title="定时检测替换是否成功"></a>定时检测替换是否成功</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkNewDeploymentStatus</span><span class="params">(ctx context.Context, clientSet kubernetes.Interface, newDeployment *v1.Deployment)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">ready := <span class="literal">true</span></span><br><span class="line">tick := time.Tick(<span class="number">10</span> * time.Second)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">30</span>; i++ &#123;</span><br><span class="line">&lt;-tick</span><br><span class="line">originPodList, err := clientSet.CoreV1().Pods(newDeployment.Namespace).List(ctx, metav1.ListOptions&#123;</span><br><span class="line">LabelSelector: metav1.FormatLabelSelector(&amp;metav1.LabelSelector&#123;</span><br><span class="line">MatchLabels: newDeployment.Spec.Selector.MatchLabels,</span><br><span class="line">&#125;),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if there are any Pods</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(originPodList.Items) == <span class="number">0</span> &#123;</span><br><span class="line">klog.Infof(<span class="string">&quot;No Pod in deployment:%s, Skip&quot;</span>, newDeployment.Name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> originPodList.Items &#123;</span><br><span class="line"><span class="comment">// Check Pod running</span></span><br><span class="line"><span class="keyword">for</span> _, status := <span class="keyword">range</span> item.Status.ContainerStatuses &#123;</span><br><span class="line"><span class="keyword">if</span> status.RestartCount &gt; <span class="number">0</span> &#123;</span><br><span class="line">ready = <span class="literal">false</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">klog.Infof(<span class="string">&quot;Check deployment:%s namespace:%s status:%t&quot;</span>, newDeployment.Name, newDeployment.Namespace, ready)</span><br><span class="line"><span class="keyword">if</span> ready == <span class="literal">false</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ready == <span class="literal">false</span> &#123;</span><br><span class="line"><span class="comment">// rollback</span></span><br><span class="line">klog.Infof(<span class="string">&quot;=======Rollback deployment:%s namespace:%s&quot;</span>, newDeployment.Name, newDeployment.Namespace)</span><br><span class="line">writeDeploymentName2File(newDeployment.Name, fmt.Sprintf(<span class="string">&quot;rollback-%s.log&quot;</span>, newDeployment.Namespace))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会启动一个 10s 执行一次的定时任务，每次都会检测是否有容器发生了重启（正常情况下是不会出现重启的）</p><p>如果检测了 30 次都没有重启的容器，那就说明本次替换成功了，不然就记录一个日志文件，然后人工处理。</p><blockquote><p>这种通常是原有的镜像与 OpenTelemetry 不兼容，比如里面写死了一些 skywalking 的 API，导致启动失败。</p></blockquote><p>所以替换任务跑完之后我还会检测这个 <code>rollback-$namespace</code> 的日志文件，人工处理这些失败的应用。</p><h2 id="分批处理-deployment"><a href="#分批处理-deployment" class="headerlink" title="分批处理 deployment"></a>分批处理 deployment</h2><p>最后讲讲如何单个调用刚才的 <code>ProcessDeployment()</code> 函数。</p><p>考虑到不能对 kubernetes 产生影响，所以我们需要限制并发处理 deployment 的数量（我这里的限制是 10 个）。</p><p>所以就得分批进行替换，每次替换 10 个，而且其中有一个执行失败就得暂停后续任务，由人工检测失败原因再决定是否继续处理。</p><blockquote><p>毕竟处理的是线上应用，需要小心谨慎。</p></blockquote><p>所以触发的代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ProcessDeploymentList</span><span class="params">(ctx context.Context, data []v1.Deployment, clientSet kubernetes.Interface)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">file, err := os.ReadFile(fmt.Sprintf(<span class="string">&quot;finish-%s.log&quot;</span>, data[<span class="number">0</span>].Namespace))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">split := strings.Split(<span class="type">string</span>(file), <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">batchSize := <span class="number">10</span></span><br><span class="line">start := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> start &lt; <span class="built_in">len</span>(data) &#123;</span><br><span class="line"></span><br><span class="line">end := start + batchSize</span><br><span class="line"><span class="keyword">if</span> end &gt; <span class="built_in">len</span>(data) &#123;</span><br><span class="line">end = <span class="built_in">len</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">batch := data[start:end]</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待goroutine结束</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">klog.Infof(<span class="string">&quot;Start process batch size %d&quot;</span>, <span class="built_in">len</span>(batch))</span><br><span class="line"></span><br><span class="line">errs := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">error</span>, <span class="built_in">len</span>(batch))</span><br><span class="line"></span><br><span class="line">wg.Add(<span class="built_in">len</span>(batch))</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> batch &#123;</span><br><span class="line">d := item</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">if</span> err := ProcessDeployment(ctx, split, d, clientSet); err != <span class="literal">nil</span> &#123;</span><br><span class="line">klog.Errorf(<span class="string">&quot;!!!Process deployment name:%s error: %v&quot;</span>, d.Name, err)</span><br><span class="line">errs &lt;- err</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="built_in">close</span>(errs)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">//任何一个失败就返回</span></span><br><span class="line"><span class="keyword">for</span> err := <span class="keyword">range</span> errs &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start = end</span><br><span class="line">klog.Infof(<span class="string">&quot;Deal next batch&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>WaitGroup</code> 来控制一组任务，使用一个 chan 来传递异常；这类分批处理的代码在一些批处理框架中还蛮常见的。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后只需要查询某个 namespace 下的所有 deployment 列表传入这个批处理函数即可。</p><p>不过整个过程中还是有几个点需要注意：</p><ul><li>因为需要替换镜像的前提是要把现有的镜像拉取到本地，所以跑这个任务的客户端需要有充足的磁盘，同时和镜像服务器的网络条件较好。</li><li>不然执行的过程会比较慢，同时磁盘占用满了也会影响任务。</li></ul><p>其实这个功能依然有提升空间，考虑到后续会升级 OpenTelemetry  agent 的版本，甚至也需要增减一些 JVM 参数。</p><p>所以最后有一个统一的工具，可以直接升级 Agent，而不是每次我都需要修改这里的代码。</p><p><img src="https://s2.loli.net/2024/03/03/lLIqQtmD2AdfGyv.png"></p><p>后来在网上看到了得物的相关分享，他们可以远程加载配置来解决这个问题。</p><p>这也是一种解决方案，直到我们看到了 OpenTelemetry 社区提供了 <a href="https://github.com/open-telemetry/opentelemetry-operator/#opentelemetry-auto-instrumentation-injection">Operator</a>，其中也包含了注入 agent 的功能。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">opentelemetry.io/v1alpha1</span>  </span><br><span class="line"><span class="attr">kind:</span> <span class="string">Instrumentation</span>  </span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-instrumentation</span>  </span><br><span class="line"><span class="attr">spec:</span>  </span><br><span class="line">  <span class="attr">exporter:</span>  </span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">http://otel-collector:4317</span>  </span><br><span class="line">  <span class="attr">propagators:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">tracecontext</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">baggage</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">b3</span>  </span><br><span class="line">  <span class="attr">sampler:</span>  </span><br><span class="line">    <span class="attr">type:</span> <span class="string">parentbased_traceidratio</span>  </span><br><span class="line">    <span class="attr">argument:</span> <span class="string">&quot;0.25&quot;</span>  </span><br><span class="line">  <span class="attr">java:</span>  </span><br><span class="line">    <span class="attr">image:</span> <span class="string">private/autoinstrumentation-java:1.32.0-1</span></span><br></pre></td></tr></table></figure><p>我们可以使用他提供的 CRD 来配置我们 agent，只要维护好自己的镜像就好了。</p><p>使用起来也很简单，只要安装好了 OpenTelemetry-operator ，然后再需要注入 Java Agent 的 Pod 中使用注解：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">instrumentation.opentelemetry.io/inject-java:</span> <span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure><p> operator 就会自动从刚才我们配置的镜像中读取 agent，然后复制到我们的业务容器。</p><p>再配置上环境变量 <code>$JAVA_TOOL_OPTIONS=/otel/javaagent.java</code>, 这是一个 Java 内置的环境变量，应用启动的时候会自动识别，这样就可以自动注入 agent 了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">envJavaToolsOptions   = <span class="string">&quot;JAVA_TOOL_OPTIONS&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// set env value</span></span><br><span class="line">idx := getIndexOfEnv(container.Env, envJavaToolsOptions)  </span><br><span class="line"><span class="keyword">if</span> idx == <span class="number">-1</span> &#123;  </span><br><span class="line">    container.Env = <span class="built_in">append</span>(container.Env, corev1.EnvVar&#123;  </span><br><span class="line">       Name:  envJavaToolsOptions,  </span><br><span class="line">       Value: javaJVMArgument,  </span><br><span class="line">    &#125;)&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">    container.Env[idx].Value = container.Env[idx].Value + javaJVMArgument  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// copy javaagent.jar</span></span><br><span class="line">pod.Spec.InitContainers = <span class="built_in">append</span>(pod.Spec.InitContainers, corev1.Container&#123;  </span><br><span class="line">    Name:      javaInitContainerName,  </span><br><span class="line">    Image:     javaSpec.Image,  </span><br><span class="line">    Command:   []<span class="type">string</span>&#123;<span class="string">&quot;cp&quot;</span>, <span class="string">&quot;/javaagent.jar&quot;</span>, javaInstrMountPath + <span class="string">&quot;/javaagent.jar&quot;</span>&#125;,  </span><br><span class="line">    Resources: javaSpec.Resources,  </span><br><span class="line">    VolumeMounts: []corev1.VolumeMount&#123;&#123;  </span><br><span class="line">       Name:      javaVolumeName,  </span><br><span class="line">       MountPath: javaInstrMountPath,  </span><br><span class="line">    &#125;&#125;,&#125;)</span><br></pre></td></tr></table></figure><p>大致的运行原理是当有 Pod 的事件发生了变化（重启、重新部署等），operator 就会检测到变化，此时会判断是否开启了刚才的注解：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">instrumentation.opentelemetry.io/inject-java:</span> <span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure><p>接着会写入环境变量 <code>JAVA_TOOL_OPTIONS</code>，同时将 jar 包从 InitContainers 中复制到业务容器中。</p><blockquote><p>这里使用到了 kubernetes 的初始化容器，该容器是用于做一些准备工作的，比如依赖安装、配置检测或者是等待其他一些组件启动成功后再启动业务容器。</p></blockquote><p>目前这个 operator 还处于使用阶段，同时部分功能还不满足（比如支持自定义扩展），今后有时间也可以分析下它的运行原理。</p><p>参考链接：</p><ul><li><a href="https://xie.infoq.cn/article/e6def1e245e9d67735bd00dd5">https://xie.infoq.cn/article/e6def1e245e9d67735bd00dd5</a></li><li><a href="https://github.com/open-telemetry/opentelemetry-operator/#opentelemetry-auto-instrumentation-injection">https://github.com/open-telemetry/opentelemetry-operator/#opentelemetry-auto-instrumentation-injection</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2024/03/04/8YFIh7suTirZacj.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;最近公司将我们之前使用的链路工具切换为了 &lt;code&gt;OpenTelemetry&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2024/03/03/9V1aUnpOd8EAG2Y.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    
    <category term="k8s" scheme="http://crossoverjie.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>在 kubernetes 环境下如何优雅扩缩容 Pulsar</title>
    <link href="http://crossoverjie.top/2024/03/27/ob/k8s-pulsar-scale/"/>
    <id>http://crossoverjie.top/2024/03/27/ob/k8s-pulsar-scale/</id>
    <published>2024-03-27T08:13:42.000Z</published>
    <updated>2024-03-29T03:16:45.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在整个大环境的降本增效的熏陶下，我们也不得不做好应对方案。</p><p>根据对线上流量、存储以及系统资源的占用，发现我们的 Pulsar 集群有许多的冗余，所以考虑进行缩容从而减少资源浪费，最终也能省一些费用。</p><p>不过在缩容之前很有必要先聊聊扩容，Pulsar 一开始就是存算分离的架构（更多关于 Pulsar 架构的内容本文不做过多介绍，感兴趣的可以自行搜索），天然就非常适合 kubernetes 环境，也可以利用 <code>kubernetes</code> 的能力进行快速扩容。</p><span id="more"></span><h1 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h1><p>Pulsar 的扩容相对比较简单，在 kubernetes 环境下只需要修改副本即可。</p><h2 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h2><p>当我们的 broker 层出现瓶颈时（比如 CPU、内存负载较高、GC 频繁时）可以考虑扩容。</p><blockquote><p>计算层都扩容了，也需要根据流量计算下存储层是否够用。</p></blockquote><p>如果我们使用的是 helm 安装的 Pulsar 集群，那只需要修改对于的副本数即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">broker:</span>  </span><br><span class="line">  <span class="string">configuration</span>  </span><br><span class="line">  <span class="attr">component:</span> <span class="string">broker</span>  </span><br><span class="line">  <span class="attr">replicaCount:</span> <span class="number">3</span><span class="string">-&gt;5</span></span><br></pre></td></tr></table></figure><p>当我们将副本数从 3 增加到 5 之后 kubernetes 会自动拉起新增的两个 Pod，之后我们啥也不需要做了。</p><p>Pulsar 的负载均衡器会自动感知到新增两个 broker 的加入，从而帮我们将一些负载高的节点的流量迁移到新增的节点中。</p><h2 id="Bookkeeper"><a href="#Bookkeeper" class="headerlink" title="Bookkeeper"></a>Bookkeeper</h2><p>在介绍 bookkeeper 扩容前先简单介绍些 Bookkeeper 的一些基本概念。</p><ul><li>Ensemble size (E)：当前 Bookkeeper 集群的节点数量</li><li>Write quorum size (QW)：一条消息需要写入到几个 Bookkeeper 节点中</li><li>ACK quorum size (QA)：有多少个 Bookkeeper 节点 ACK 之后表示写入成功</li></ul><p>对应到我们在 <code>broker.conf</code> 中的配置如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">managedLedgerDefaultEnsembleSize</span>: <span class="string">&quot;2&quot;  </span></span><br><span class="line"><span class="attr">managedLedgerDefaultWriteQuorum</span>: <span class="string">&quot;2&quot;  </span></span><br><span class="line"><span class="attr">managedLedgerDefaultAckQuorum</span>: <span class="string">&quot;2&quot;</span></span><br></pre></td></tr></table></figure><p>这个三个参数表示一条消息需要同时写入两个 Bookkeeper 节点，同时都返回 ACK 之后才能表示当前消息写入成功。</p><p>从这个配置也可以看出，Bookkeeper 是多副本写入模型，适当的降低 QW 和 QA 的数量可以提高写入吞吐率。</p><p>大部分场景下 Bookkeeper 有三个节点然后 E&#x2F;QW&#x2F;QA 都配置为 2 就可以满足消息多副本写入了。</p><blockquote><p>多副本可以保证当某个节点宕机后，这个节点的消息在其他节点依然有存放，消息读取不会出现问题。</p></blockquote><p>那什么情况下需要扩容 Bookkeeper 了，当然如果单个 Bookkeeper 的负载较高也是可以扩容的。</p><p>但我们当时扩容 Bookkeeper 的场景是想利用 Pulsar 的资源隔离功能。</p><p>因为有部分业务的消息量明显比高于其他的 topic，这样会导致某个 Broker 的负载较高，同时也可能影响到其他正常的 topic。</p><p>最好的方式就将这部分数据用单独的 broker 和 Bookkeeper 来承载，从而实现硬件资源的隔离。</p><p>这样的需求如果使用其他消息队列往往不太好实现，到后来可能就会部署多个集群来实现隔离，但这样也会增加运维的复杂度。</p><p>好在 Pulsar 天然就支持资源隔离，只需要一个集群就可以实现不同 namespace 的流量隔离。</p><p>此时就可以额外扩容几个 Bookkeeper 节点用于特定的 namespace 使用。<br><img src="https://s2.loli.net/2024/02/27/qA89EUDHpxNmK7O.png"></p><p>从上图可以看到：我们可以将 broker 和 Bookkeeper 分别进行分组，然后再配置对应的 namespace，这样就能实现资源隔离了。</p><blockquote><p>更多关于资源隔离的细节本文就不过多赘述了。</p></blockquote><p>铺垫了这么多，其实 Bookkeeper 的扩容也蛮简单的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bookkeeper:</span></span><br><span class="line">  <span class="attr">component:</span> <span class="string">bookie</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">    <span class="comment"># requests:</span></span><br><span class="line">    <span class="comment"># memory: 4Gi</span></span><br><span class="line">    <span class="comment"># cpu: 2</span></span><br><span class="line">  <span class="attr">replicaCount:</span> <span class="number">3</span><span class="string">-&gt;5</span></span><br></pre></td></tr></table></figure><p>和 broker 扩容类似，提高副本数量后，Pulsar 的元数据中心会感知到新的 Bookkeeper 节点加入，从而更新 broker 中的节点数据，这样就会根据我们配置的隔离策略分配流量。</p><h1 id="缩容"><a href="#缩容" class="headerlink" title="缩容"></a>缩容</h1><p>其实本文的重点在于缩容，特别是 Bookkeeper 的缩容，这部分内容我在互联网上很少看到有人提及。</p><h2 id="Broker-1"><a href="#Broker-1" class="headerlink" title="Broker"></a>Broker</h2><p>Broker 的缩容相对简单，因为存算分离的特点：broker 作为计算层是无状态的，并不承载任何的数据。</p><blockquote><p>其实是承载数据的，只是 Pulsar 会自动迁移数据，从而体感上觉得是无状态的。</p></blockquote><p>只是当一个 broker 下线后，它上面所绑定的 topic 会自动转移到其他在线的 broker 中。</p><p>这个过程会导致连接了这个 broker 的 client 触发重连，从而短暂的影响业务。</p><blockquote><p>正因为 broker 的下线会导致 topic 的归属发生转移，所以在下线前最好是先通过监控面板观察需要下线的 broker topic 是否过多，如果过多则可以先手动 unload 一些数据，尽量避免一次性大批量的数据转移。</p></blockquote><p><img src="https://s2.loli.net/2024/02/27/1SzKpNiACdZIbrq.png" alt="image.png"></p><blockquote><p>观察各个broker 的 topic 数量</p></blockquote><h2 id="Bookkeeper-1"><a href="#Bookkeeper-1" class="headerlink" title="Bookkeeper"></a>Bookkeeper</h2><p>而 Bookkeeper 的缩容则没那么容易了，由于它是作为存储层，本身是有状态的，下线后节点上存储的数据是需要迁移到其他的 Bookkeeper 节点中的。</p><p>不然就无法满足之前提到的 Write quorum size (QW) 要求；因此缩容还有一个潜在条件需要满足：</p><p>缩容后的 Bookkeeper 节点数量需要大于broker 中的配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">managedLedgerDefaultEnsembleSize</span>: <span class="string">&quot;2&quot;  </span></span><br><span class="line"><span class="attr">managedLedgerDefaultWriteQuorum</span>: <span class="string">&quot;2&quot;  </span></span><br><span class="line"><span class="attr">managedLedgerDefaultAckQuorum</span>: <span class="string">&quot;2&quot;</span></span><br></pre></td></tr></table></figure><p>不然写入会失败，整个集群将变得不可用。</p><p>Pulsar 提供了两种 Bookkeeper 的下线方案：</p><h3 id="不需要迁移数据"><a href="#不需要迁移数据" class="headerlink" title="不需要迁移数据"></a>不需要迁移数据</h3><p>其实两种方案主要区别在于是否需要迁移数据，第一种比较简单，就是不迁移数据的方案。</p><p>首先需要将 Bookkeeper 设置为 read-only 状态，此时该节点将不会接受写请求，直到这个 Bookkeeper 上的数据全部过期被回收后，我们就可以手动下线该节点。</p><p>使用 <code>forceReadOnlyBookie=true</code> 可以强制将 Bookkeeper 设置为只读。</p><p>但这个方案存在几个问题：</p><ul><li>下线时间不确定，如果该 <code>Bookkeeper</code> 上存储的数据生命周期较长，则无法预估什么时候可以下线该节点。</li><li>该配置修改后需要重启才能生效，在 kubernetes 环境中这些配置都是写在了 configmap 中，一旦刷新后所有节点都会读取到该配置，无法针对某一个节点生效；所以可能会出现将不该下线的节点设置为了只读状态。</li></ul><p>但该方案的好处是不需要迁移数据，人工介入的流程少，同样也就减少了出错的可能。</p><p>比较适合于用虚拟机部署的集群。</p><h3 id="迁移数据"><a href="#迁移数据" class="headerlink" title="迁移数据"></a>迁移数据</h3><p>第二种就是需要迁移数据的方案，更适用于 kubernetes 环境。</p><h4 id="迁移原理"><a href="#迁移原理" class="headerlink" title="迁移原理"></a>迁移原理</h4><p>先来看看迁移的原理：</p><ol><li>当 bookkeeper 停机后，AutoRecovery Auditor 会检测到 zookeeper 节点<code>/ledger/available</code> 发生变化，将下线节点的 ledger 信息写入到 zookeeper 的 <code>/ledgers/underreplicated</code> 节点中。</li><li>AutoRecovery ReplicationWorker 会检测 <code>/ledgers/underreplicated</code>节点信息，然后轮训这些 ledger 信息从其他在线的 BK 中复制数据到没有该数据的节点，保证 QW 数量不变。<ol><li>每复制一条数据后都会删除 <code>/ledgers/underreplicated</code> 节点信息。</li><li>所有 <code>/ledgers/underreplicated</code> 被删除后说明迁移任务完成。</li></ol></li><li>执行 <code>bin/bookkeeper shell decommissionbookie</code> 下线命令：<ol><li>会等待 <code>/ledgers/underreplicated</code> 全部删除</li><li> 然后删除 zookeeper 中的元数据</li><li>元数据删除后 bookkeeper 才是真正下线成功，此时 broker 才会感知到 Bookkeeper 下线。</li></ol></li></ol><p><code>AutoRecovery</code> 是 Bookkeeper 提供的一个自动恢复程序，他会在后台检测是否有数据需要迁移。</p><blockquote><p>简单来说就是当某个Bookkeeper 停机后，它上面所存储的 ledgerID 会被写入到元数据中心，此时会有一个单独的线程来扫描这些需要迁移的数据，最终将这些数据写入到其他在线的 Bookkeeper 节点。</p></blockquote><p>Bookkeeper 中的一些关键代码：<br><img src="https://s2.loli.net/2024/02/27/QqtYUBvadWpDmnR.png" alt="image.png"><br><img src="https://s2.loli.net/2024/02/27/gi9JLdMmYxunHTE.png" alt="image.png"></p><h4 id="下线步骤"><a href="#下线步骤" class="headerlink" title="下线步骤"></a>下线步骤</h4><p>下面来看具体的下线流程：</p><ol><li>副本数-1<ol><li><code>bin/bookkeeper shell listunderreplicated</code> 检测有多少 ledger 需要被迁移</li></ol></li><li>执行远程下线元数据<ol><li><code>nohup bin/bookkeeper shell decommissionbookie -bookieid bkid:3181 &gt; bk.log 2&gt;&amp;1 &amp;</code></li><li>这个命令会一直后台运行等待数据迁移完成，比较耗时</li></ol></li><li>查看下线节点是否已被剔除<ol><li><code>bin/bookkeeper shell listbookies -a</code></li></ol></li><li>循环第一步</li></ol><p>第一步是检测一些现在有多少数据需要迁移：<br><code>bin/bookkeeper shell listunderreplicated</code> 命令查看需要被迁移的 ledger 数据也是来自于 <code>/ledgers/underreplicated</code>节点<br><img src="https://s2.loli.net/2024/02/27/FiWJ8b27QD6w5E1.png" alt="image.png"></p><blockquote><p>正常情况下是 0</p></blockquote><p>第二步的命令会等待数据迁移完成后从 zookeeper 中删除节点信息，这个进程退出后表示下线成功。</p><p><img src="https://s2.loli.net/2024/02/27/TuK7FPXCm1fcgJS.png" alt="image.png"></p><blockquote><p>这个命令最好是后台执行，并输出日志到专门的文件，因为周期较长，很有可能终端会话已经超时了。</p></blockquote><p>我们登录 zookeeper 可以看到需要迁移的 ledger 数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bin/pulsar zookeeper-shell -server pulsar-zookeeper:2181</span><br><span class="line"></span><br><span class="line">get /ledgers/underreplication/ledgers/0000/0000/0000/0002/urL0000000002</span><br><span class="line">replica: &quot;pulsar-test-2-bookie-0.pulsar-test-2-bookie.pulsar-test-2.svc.cluster.local:3181&quot;</span><br><span class="line">ctime: 1708507296519</span><br></pre></td></tr></table></figure><p>underreplication 的节点路径中存放了 ledgerId，通过 ledgerId 计算路径：<br><img src="https://s2.loli.net/2024/02/27/bAx8nqeKQT7F4HV.png"><br><img src="https://s2.loli.net/2024/02/27/GiVlDP2M85pafAO.png"></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>下线过程中我们可以查看 <code>nohup bin/bookkeeper shell decommissionbookie -bookieid bkid:3181 &gt; bk.log 2&gt;&amp;1 &amp;</code>这个命令写入的日志来确认迁移的进度，日志中会打印当前还有多少数量的 ledger 没有迁移。</p><p>同时需要观察 zookeeper、Bookkeeper 的资源占用情况。</p><p>因为迁移过程中写入大量数据到 zookeeper 节点，同时迁移数时也会有大量流量写入 Bookkeeper。</p><p>不要让迁移过程影响到了正常的业务使用。</p><p>根据我的迁移经验来看，通常 2w 的ledger 数据需要 2～3 小时不等的时间，具体情况还得根据你的集群来确认。</p><h4 id="回滚方案"><a href="#回滚方案" class="headerlink" title="回滚方案"></a>回滚方案</h4><p>当然万一迁移比较耗时，或者影响了业务使用，所以还是要有一个回滚方案：</p><p>这里有一个大的前提：<br><strong>只要 BK 节点元数据、PVC（也就是磁盘中的数据） 没有被删除就可以进行回滚。</strong></p><p>所以只要上述的 decommissionbookie 命令没有完全执行完毕，我们就可以手动 kill 该进程，然后恢复副本数据。</p><p>这样恢复的 Bookkeeper 节点依然可以提供服务，同时数据也还存在；只是浪费了一些 autorecovery 的资源。</p><p>最后当 bookkeeper 成功下线后，我们需要删除 PVC，不然如果今后需要扩容的时候是无法启动 bookkeeper 的，因为在启动过程中会判断挂载的磁盘是否有数据。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说 Pulsar 的扩缩容还是非常简单的，只是对于有状态节点的数据迁移稍微复杂一些，但只要跟着流程走就不会有什么问题。</p><p>参考链接：</p><ul><li><a href="https://pulsar.apache.org/docs/next/administration-isolation/">https://pulsar.apache.org/docs/next/administration-isolation/</a></li><li><a href="https://bookkeeper.apache.org/docs/4.13.0/admin/decomission">https://bookkeeper.apache.org/docs/4.13.0/admin/decomission</a></li><li><a href="https://bookkeeper.apache.org/docs/4.13.0/admin/autorecovery">https://bookkeeper.apache.org/docs/4.13.0/admin/autorecovery</a></li></ul><p>#Blog #Pulsar </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在整个大环境的降本增效的熏陶下，我们也不得不做好应对方案。&lt;/p&gt;
&lt;p&gt;根据对线上流量、存储以及系统资源的占用，发现我们的 Pulsar 集群有许多的冗余，所以考虑进行缩容从而减少资源浪费，最终也能省一些费用。&lt;/p&gt;
&lt;p&gt;不过在缩容之前很有必要先聊聊扩容，Pulsar 一开始就是存算分离的架构（更多关于 Pulsar 架构的内容本文不做过多介绍，感兴趣的可以自行搜索），天然就非常适合 kubernetes 环境，也可以利用 &lt;code&gt;kubernetes&lt;/code&gt; 的能力进行快速扩容。&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    
    <category term="Pulsar" scheme="http://crossoverjie.top/tags/Pulsar/"/>
    
  </entry>
  
  <entry>
    <title>顶级开源社区都能吵起来？</title>
    <link href="http://crossoverjie.top/2024/03/20/ob/about-opensource-argument/"/>
    <id>http://crossoverjie.top/2024/03/20/ob/about-opensource-argument/</id>
    <published>2024-03-20T03:15:51.000Z</published>
    <updated>2024-03-21T14:08:20.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>因为订阅了 Pulsar 的开发者邮件，前段时间看到一封标题为<a href="https://lists.apache.org/thread/gzx4j9q0xdtcvrfvvq72t9tm2rt9h3r7">《(Apache committer criteria) [ANNOUNCE] New Committer: Asaf Mesika》</a>的邮件。</p><p>乍一看以为是欢迎 <code>Asaf Mesika</code> 成为 Committer，但仔细一看不太对劲，这内容也太多了，以往的欢迎都是简单的 <code>Congratulations!</code> 作为回复，这篇内容明显有点多了，于是便仔细看了下。</p><span id="more"></span><p><img src="https://s2.loli.net/2024/03/20/aASNcDpnwVIjHFv.png"></p><h1 id="争论"><a href="#争论" class="headerlink" title="争论"></a>争论</h1><p>大概的意思是这封邮件的作者 <code>Kalwit</code> 对成为 Committer 的标准产生了疑问：</p><blockquote><p>他觉得本次提名成为 Committer 的大部分贡献都是一些文档相关的内容，还有少部分是与监控相关的提案。<br>他们团队使用 Pulsar 有一段时间了，但目前还未发现稳定的 Pulsar 版本；大部分的 Review 都是来自同一公司（streamnative）。<br>看起来是整个 Pulsar 项目由某一家公司控制了，他们当初选择从 Kafka 切换到 Pulsar 就是因为 Kafka 由 Confluent 控制，才选择一个更加开放的社区。</p></blockquote><p>这样的一封有着“讨伐”意味的邮件一经发出，自然是一石激起千层浪，社区里很多成员都发表了回复。</p><p>这里我挑选了几个代表性的回复：<br><img src="https://s2.loli.net/2024/03/21/8ZEBJrVpiW6KYXk.png"><br>大概意思就是 Pulsar 是一个开放性项目，任何人都可以参加，每两周也有 Zoom 会议，也是每个人都可以参加。</p><p>在远程的社区异步沟通过程中，很有可能你的请求没有得到及时的响应，这很正常。</p><p>Pulsar 是由社区开发负责维护的，没有公司对此负责，因此没有得到响应时是没有公司可以责怪的；需要大家一起来解决问题，并不一定是需要 PMC（项目管理委员会成员）还是 committer才能提出意见，任何人都可以发表自己的看法。</p><p>但这个过程中大家的身份都是志愿者，需要大家自发的去做这些事情。</p><p>后续 Kalwit 又继续回复了一些邮件，总体内容就是对社区治理存在疑惑；特别是担心社区背后由某一家公司作为主导，从而导致社区和公司的利益进行绑定。</p><p>当然社区的观点依然是，Pulsar 社区不受某一具体公司掌控，并举了具体数据：<br><img src="https://s2.loli.net/2024/03/21/UDiRHjMWdO8xsSI.png"><br>在 41 个 PMC 成员中，只有 9 位是 StreamNative 的员工，41 位 committer 中有 13 位是 StreamNative 的员工。</p><blockquote><p>其实以我目前在社区的观感，确实是 streamnative 公司社区维护者更加活跃，其他的一些 committer 可能由于工作变动啥的很少再贡献项目了。</p></blockquote><h2 id="提案被否"><a href="#提案被否" class="headerlink" title="提案被否"></a>提案被否</h2><p><code>Kalwit</code> 举了一些例子认为这些 PIP 提案没有获得通过，但是 SN 团队提出的提案大部分都能通过。</p><p>我觉得这确实是一种客观现象，但可能更多的原因并不是 SN 公司想要主导 Pulsar 社区的进展，而是他们在社区之外（不管是线上还是线下）进行过额外的沟通，也许在提交草案之前就已经达成了初步一致了，所以在提案审核阶段只需要做一些具体的调整就很容易被通过。</p><p>我自己也提过一些提案，大概提交了三个只有一个通过了；我个人的感受是这个过程中响应时间确实不可控（毕竟是异步沟通），但并不会存在某个团队想要控制哪些提案可以通过，哪些提案不行的这种说法。</p><p>都是在就事论事的讨论事情，而且不通过的话也会由相关的回复和建议，确实大部分情况也是我考虑不周。</p><p>我也看过 asafm 的贡献，其中关于 Pulsar 集成 <a href="https://github.com/apache/pulsar/pull/21080">OpenTelemetry</a> 的提案确实是下了功夫的（一万多字的内容），从头讲解了 OpenTelemetry 的概念，以及 Pulsar 需要做哪些事情来集成。</p><h1 id="个人感受"><a href="#个人感受" class="headerlink" title="个人感受"></a>个人感受</h1><h2 id="厂商绑定"><a href="#厂商绑定" class="headerlink" title="厂商绑定"></a>厂商绑定</h2><p>看完之后我个人的感受是 <code>Kalwit</code> 或者他的团队在参与社区的时候应该是进展不顺利，一些提案或者改动没有得到支持，但看到 SN 公司提交的内容更快得到响应，所以得出了以上的结论：Pulsar 社区由 SN 公司进行了主导。</p><p>他的顾虑也不是没有道理，就像他说的 Kafka 社区由 confluence 公司主导，类似的还有 Dubbo 社区由阿里主导、Golang 由 google 主导。</p><p>但项目如果加入了 Apache 那他原本的公司其实已经失去了对项目的所有权，只是刚开始的一些 PMC&#x2F;committer 大部分会是这个公司的员工，毕竟他们是项目的发起者，也更加熟悉整个系统。</p><p>如果社区发展的健康，后续应该会补充一些其他开发者，这些开发者不受雇于之前发起的项目的公司，甚至是以个人身份加入；只有这样社区就会更加多样化，出现“一言堂”的几率就会大大降低。</p><p>我觉得造成这种现象的原因和一开始该项目是由某一个特定公司发起有有很大的原因，比如 Dubbo、Golang，所以他们公司在社区的声浪更大，自己公司的需求优先级也会更高，毕竟会有来自同一公司的更多的人来审核这些需求。</p><p>虽说如前面邮件里回复的：<code>社区是由志愿者自愿维护的</code>，但不可否认的是在这些做开源项目商业化的公司内有一批人就在专门维护社区工作。</p><p>他们会把自己商业化过程中遇到的一些问题，或者是新的 feature 也提交给社区，但这里的区别是他们是拿工资的，积极性肯定要比在社区用爱发电的开发者更积极。</p><p>这样就会导致社区中最活跃的那批人大概率是靠社区养活自己的人，但这也不是什么坏事；如果你个人或者公司强依赖于某一个开源项目，那也可以想办法多做贡献，成为 committer，这样在一些需要投票的环节也能有一席之位。</p><h2 id="厂商无关"><a href="#厂商无关" class="headerlink" title="厂商无关"></a>厂商无关</h2><p>当然也有对应的不是由某一个厂商发起的项目，比如我最近参与较多的 <code>OpenTelemetry</code> 社区。</p><p><img src="https://s2.loli.net/2024/03/21/DZ2KAX5Wklpm7tr.png"><br>按照官方说法有着 1000 多位独立的开发者，代表了超过 180 家公司，在维护者的列表中也可以看到大多数都是来自于不同的公司：<br><img src="https://s2.loli.net/2024/03/21/jHgCdyoanmzGR8D.png"></p><p>所以自然也就没有某一厂商主导的说法，所以想要避免这类事情再次发生，最好的方法还是吸纳更多的开发者加入，只有社区成员丰富起来社区才好良性发展。</p><p>参考链接：</p><ul><li><a href="https://lists.apache.org/thread/gzx4j9q0xdtcvrfvvq72t9tm2rt9h3r7">https://lists.apache.org/thread/gzx4j9q0xdtcvrfvvq72t9tm2rt9h3r7</a></li><li><a href="https://github.com/apache/pulsar/pull/21080">https://github.com/apache/pulsar/pull/21080</a></li><li><a href="https://opentelemetry.io/blog/2024/opentelemetry-announced-support-for-profiling/">https://opentelemetry.io/blog/2024/opentelemetry-announced-support-for-profiling/</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;因为订阅了 Pulsar 的开发者邮件，前段时间看到一封标题为&lt;a href=&quot;https://lists.apache.org/thread/gzx4j9q0xdtcvrfvvq72t9tm2rt9h3r7&quot;&gt;《(Apache committer criteria) [ANNOUNCE] New Committer: Asaf Mesika》&lt;/a&gt;的邮件。&lt;/p&gt;
&lt;p&gt;乍一看以为是欢迎 &lt;code&gt;Asaf Mesika&lt;/code&gt; 成为 Committer，但仔细一看不太对劲，这内容也太多了，以往的欢迎都是简单的 &lt;code&gt;Congratulations!&lt;/code&gt; 作为回复，这篇内容明显有点多了，于是便仔细看了下。&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    
    <category term="OpenSource" scheme="http://crossoverjie.top/tags/OpenSource/"/>
    
  </entry>
  
  <entry>
    <title>技术阅读周刊第十四期：常用的 Git 配置</title>
    <link href="http://crossoverjie.top/2024/02/29/ob/newsletter/Newsletter14-20240223/"/>
    <id>http://crossoverjie.top/2024/02/29/ob/newsletter/Newsletter14-20240223/</id>
    <published>2024-02-29T09:28:25.000Z</published>
    <updated>2024-02-29T14:09:37.281Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2024/01/11/YMoyEKwUubfZA9a.png"></p><p><strong>技术阅读周刊，每周更新。</strong></p><span id="more"></span><h2 id="历史更新"><a href="#历史更新" class="headerlink" title="历史更新"></a>历史更新</h2><ul><li><a href="https://crossoverjie.top/2023/12/22/ob/newsletter/Newsletter10-20231222/">20231122：第十一期</a></li><li><a href="https://crossoverjie.top/2023/12/29/ob/newsletter/Newsletter12-20231229/">20231129：第十二期</a></li><li><a href="https://crossoverjie.top/2024/01/05/ob/newsletter/Newsletter12-20240105/">20240105：第十三期：一些提高生产力的终端命令</a></li><li><a href="https://crossoverjie.top/2024/01/12/ob/newsletter/Newsletter12-202401012/">20240112：第十四期：Golang 作者 Rob Pike 在 GopherConAU 上的分享</a></li></ul><h1 id="How-I-write-HTTP-services-in-Go-after-13-years"><a href="#How-I-write-HTTP-services-in-Go-after-13-years" class="headerlink" title="How I write HTTP services in Go after 13 years"></a>How I write HTTP services in Go after 13 years</h1><p><img src="https://s2.loli.net/2024/02/27/SJIHKtpc5m1u7vs.png"></p><ol><li>使用NewServer函数构建服务实例,利用依赖注入方式将所有的依赖参数包含进来。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">logger *Logger</span></span></span><br><span class="line"><span class="params"><span class="function">config *Config</span></span></span><br><span class="line"><span class="params"><span class="function">commentStore *commentStore</span></span></span><br><span class="line"><span class="params"><span class="function">anotherStore *anotherStore</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> http.Handler &#123;</span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">addRoutes(</span><br><span class="line">mux,</span><br><span class="line">Logger,</span><br><span class="line">Config,</span><br><span class="line">commentStore,</span><br><span class="line">anotherStore,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> handler http.Handler = mux</span><br><span class="line">handler = someMiddleware(handler)</span><br><span class="line">handler = someMiddleware2(handler)</span><br><span class="line">handler = someMiddleware3(handler)</span><br><span class="line"><span class="keyword">return</span> handler</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在routes.go文件中统一定义所有路由函数。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addRoutes</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">mux                 *http.ServeMux,</span></span></span><br><span class="line"><span class="params"><span class="function">logger              *logging.Logger,</span></span></span><br><span class="line"><span class="params"><span class="function">config              Config,</span></span></span><br><span class="line"><span class="params"><span class="function">tenantsStore        *TenantsStore,</span></span></span><br><span class="line"><span class="params"><span class="function">commentsStore       *CommentsStore,</span></span></span><br><span class="line"><span class="params"><span class="function">conversationService *ConversationService,</span></span></span><br><span class="line"><span class="params"><span class="function">chatGPTService      *ChatGPTService,</span></span></span><br><span class="line"><span class="params"><span class="function">authProxy           *authProxy</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">mux.Handle(<span class="string">&quot;/api/v1/&quot;</span>, handleTenantsGet(logger, tenantsStore))</span><br><span class="line">mux.Handle(<span class="string">&quot;/oauth2/&quot;</span>, handleOAuth2Proxy(logger, authProxy))</span><br><span class="line">mux.HandleFunc(<span class="string">&quot;/healthz&quot;</span>, handleHealthzPlease(logger))</span><br><span class="line">mux.Handle(<span class="string">&quot;/&quot;</span>, http.NotFoundHandler())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>主函数只调用run函数来运行服务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">(ctx context.Context, w io.Writer, args []<span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">ctx, cancel := signal.NotifyContext(ctx, os.Interrupt)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"><span class="keyword">if</span> err := run(ctx, os.Stdout, os.Args); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">&quot;%s\n&quot;</span>, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回闭包 handle</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// handleSomething handles one of those web requests</span></span><br><span class="line"><span class="comment">// that you hear so much about.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleSomething</span><span class="params">(logger *Logger)</span></span> http.Handler &#123;</span><br><span class="line">thing := prepareThing()</span><br><span class="line"><span class="keyword">return</span> http.HandlerFunc(</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// use thing to handle request</span></span><br><span class="line">logger.Info(r.Context(), <span class="string">&quot;msg&quot;</span>, <span class="string">&quot;handleSomething&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>定义通用的encode和decode函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">encode</span>[<span class="title">T</span> <span class="title">any</span>]<span class="params">(w http.ResponseWriter, r *http.Request, status <span class="type">int</span>, v T)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">w.WriteHeader(status)</span><br><span class="line"><span class="keyword">if</span> err := json.NewEncoder(w).Encode(v); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;encode json: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decode</span>[<span class="title">T</span> <span class="title">any</span>]<span class="params">(r *http.Request)</span></span> (T, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> v T</span><br><span class="line"><span class="keyword">if</span> err := json.NewDecoder(r.Body).Decode(&amp;v); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> v, fmt.Errorf(<span class="string">&quot;decode json: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供一个抽象的 Validator 接口用于验证</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Validator is an object that can be validated.</span></span><br><span class="line"><span class="keyword">type</span> Validator <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Valid checks the object and returns any</span></span><br><span class="line"><span class="comment">// problems. If len(problems) == 0 then</span></span><br><span class="line"><span class="comment">// the object is valid.</span></span><br><span class="line">Valid(ctx context.Context) (problems <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeValid</span>[<span class="title">T</span> <span class="title">Validator</span>]<span class="params">(r *http.Request)</span></span> (T, <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> v T</span><br><span class="line"><span class="keyword">if</span> err := json.NewDecoder(r.Body).Decode(&amp;v); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> v, <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;decode json: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> problems := v.Valid(r.Context()); <span class="built_in">len</span>(problems) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> v, problems, fmt.Errorf(<span class="string">&quot;invalid %T: %d problems&quot;</span>, v, <span class="built_in">len</span>(problems))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v, <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>自定义校验需要实现 <code>Validator</code> 接口。</p><ol start="8"><li>使用 Once 延迟调用来提高启动性能。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleTemplate</span><span class="params">(files <span class="type">string</span>...)</span></span> http.HandlerFunc &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">init    sync.Once</span><br><span class="line">tpl     *template.Template</span><br><span class="line">tplerr  <span class="type">error</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">init.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">tpl, tplerr = template.ParseFiles(files...)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> tplerr != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, tplerr.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// use tpl</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="What-is-OpenTelemetry"><a href="#What-is-OpenTelemetry" class="headerlink" title="What is OpenTelemetry?"></a>What is OpenTelemetry?</h1><p><img src="https://s2.loli.net/2024/02/27/w13m5cQqdinLDIP.png"></p><blockquote><p>这是一篇 OTel 的科普文章</p></blockquote><p>OpenTelemetry 提供一个统一、可扩展的框架，用于收集、分析和观察分布式系统的性能数据。它包括一组API、库、代理和收集器，这些组件可以跨多种编程语言和平台实现对应用程序的监控。</p><p>OpenTelemetry 整合 OpenTracing 和 OpenCensus。</p><p><img src="https://s2.loli.net/2024/02/27/3C1VLqIBGgAwdeR.png"></p><blockquote><p>2019年，两个社区进行了合并。</p></blockquote><p>同时 OTel 具备以下特征：</p><ol><li><p><strong>统一性</strong>：OpenTelemetry 提供了一个统一的API，使得开发者可以在不同的编程语言和框架中以一致的方式实现监控。</p></li><li><p><strong>可扩展性</strong>：可以编写自己的扩展来满足个性化需要</p></li><li><p><strong>跨平台</strong>：OpenTelemetry 支持多种编程语言，如 Java、Python、Go、.NET 等，以及多种云服务和容器平台。</p></li><li><p><strong>社区驱动</strong>：作为一个开源项目，OpenTelemetry 由一个活跃的社区支持，社区成员贡献代码、文档和最佳实践。</p></li><li><p><strong>与现有工具的兼容性</strong>：OpenTelemetry 设计时考虑了与现有监控工具的兼容性，如 Prometheus、Jaeger、Zipkin 等，这使得它可以轻松地集成到现有的监控基础设施中。</p></li></ol><p>提供了一种名为：OTLP（OpenTelemetry Protocol）的通讯协议，基于 gRPC。</p><p>使用该协议用于客户端与 Collector 采集器进行交互。</p><p>Collector 是 OpenTelemetry 架构中的一个关键组件，它负责接收、处理和导出数据(Trace&#x2F;log&#x2F;metrics)。</p><p><img src="https://s2.loli.net/2024/02/27/fFOnesN4zhQIPR2.png"></p><p>它可以接受从客户端发出的数据进行处理，同时可以导出为不同格式的数据。</p><blockquote><p>总的来说 OTel 是可观测系统的新标准，基于它可以兼容以前使用的 Prometheus、 victoriametrics、skywalking 等系统，同时还可以灵活扩展，不用与任何但一生态或技术栈进行绑定。</p></blockquote><h1 id="Popular-git-config-options"><a href="#Popular-git-config-options" class="headerlink" title="Popular git config options"></a>Popular git config options</h1><p><img src="https://s2.loli.net/2024/02/29/d9x7T2yhFfcjluO.png"></p><blockquote><p>本文总结了一些常用的 git 配置</p></blockquote><ol><li><p><code>pull.ff only</code> 或 <code>pull.rebase true</code>：这两个选项都可以避免在执行<code>git pull</code>时意外创建合并提交，特别是当上游分支已经发生了变化的时候。</p></li><li><p><code>merge.conflictstyle diff3</code>：这个选项使得合并冲突更易于阅读，通过在冲突中显示原始代码版本，帮助用户更好地解决冲突。</p></li><li><p><code>rebase.autosquash true</code> 和 <code>rebase.autostash true</code>：这些选项使得修改旧提交变得更容易，并且自动处理stash。</p></li><li><p><code>push.default simple</code> 或 <code>push.default current</code>：这些选项告诉<code>git push</code>自动推送当前分支到同名的远程分支。</p></li><li><p><code>init.defaultBranch main</code>：创建新仓库时，默认创建<code>main</code>分支而不是<code>master</code>分支。</p></li><li><p><code>commit.verbose true</code>：在提交时显示整个提交差异。</p></li><li><p><code>rerere.enabled true</code>：启用<code>rerere</code>功能，自动解决冲突</p></li><li><p><code>help.autocorrect</code>：设置自动矫正的级别，以自动运行建议的命令。</p></li><li><p><code>core.pager delta</code>：设置Git使用的分页器，例如使用<code>delta</code>来查看带有语法高亮的diff。</p></li><li><p><code>diff.algorithm histogram</code>：设置Git的diff算法，以改善函数重排时的diff显示。</p></li></ol><p>文章链接：</p><ul><li><a href="https://grafana.com/blog/2024/02/09/how-i-write-http-services-in-go-after-13-years/">https://grafana.com/blog/2024/02/09/how-i-write-http-services-in-go-after-13-years/</a></li><li><a href="https://codeboten.medium.com/what-is-opentelemetry-6a7e5c6901c5">https://codeboten.medium.com/what-is-opentelemetry-6a7e5c6901c5</a></li><li><a href="https://jvns.ca/blog/2024/02/16/popular-git-config-options/">https://jvns.ca/blog/2024/02/16/popular-git-config-options/</a></li></ul><p>#Newletters </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2024/01/11/YMoyEKwUubfZA9a.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术阅读周刊，每周更新。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    <category term="Newsletter" scheme="http://crossoverjie.top/categories/OB/Newsletter/"/>
    
    
  </entry>
  
  <entry>
    <title>【译】Apache Pulsar 3.2.0 发布</title>
    <link href="http://crossoverjie.top/2024/02/27/ob/translate-pulsar-3.2.0/"/>
    <id>http://crossoverjie.top/2024/02/27/ob/translate-pulsar-3.2.0/</id>
    <published>2024-02-27T02:37:24.000Z</published>
    <updated>2024-02-27T06:31:23.848Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://pulsar.apache.org/blog/2024/02/12/announcing-apache-pulsar-3-2/">原文链接</a></p><p>Pulsar3.2.0 于 2024-02-05 发布，提供了一些新特性和修复了一些 bug ，共有 57 位开发者提交了 88 次 commit。</p><p>以下是一些关键特性介绍.</p><span id="more"></span><h1 id="速率限制"><a href="#速率限制" class="headerlink" title="速率限制"></a>速率限制</h1><p>在 3.2 中对速率限制做了重构：<br><a href="https://github.com/apache/pulsar/blob/master/pip/pip-322.md">PIP-322 Pulsar Rate Limiting Refactoring</a>.</p><p>速率限制器是 Pulsar 服务质量（Qos）保证的重要渠道，主要解决了以下问题：</p><ul><li>速率限制器的高 CPU 负载</li><li>大量的锁竞争会影响 <code>Netty IO</code> 线程，从而增加其他 topic 的发送延迟</li><li>更好的代码封装</li></ul><h1 id="Topic-压缩时会删除-Null-key-消息"><a href="#Topic-压缩时会删除-Null-key-消息" class="headerlink" title="Topic 压缩时会删除 Null-key 消息"></a>Topic 压缩时会删除 Null-key 消息</h1><p>Pulsar 支持 <a href="https://pulsar.apache.org/docs/3.2.x/concepts-topic-compaction/">Topic 压缩</a>，在 3.2 之前的版本中 topic 压缩时会保留 Null key 的消息。</p><p>从 3.2.0 开始将会修改默认行为，默认不会保留，这可以减少存储。如果想要恢复以前的策略可以在 broker.conf 中新增配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">topicCompactionRetainNullKey</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>具体信息请参考：<a href="https://github.com/apache/pulsar/blob/master/pip/pip-318.md">PIP-318</a>.</p><h1 id="WebSocket-的新特性"><a href="#WebSocket-的新特性" class="headerlink" title="WebSocket 的新特性"></a>WebSocket 的新特性</h1><ul><li>支持多个 topic 消费：<a href="https://github.com/apache/pulsar/blob/master/pip/pip_307.md">PIP-307</a>.</li><li>端对端加密 <a href="https://github.com/apache/pulsar/blob/master/pip/pip-290.md">PIP-290</a>.</li></ul><h1 id="CLI-的用户体验改进"><a href="#CLI-的用户体验改进" class="headerlink" title="CLI 的用户体验改进"></a>CLI 的用户体验改进</h1><ul><li><a href="https://github.com/apache/pulsar/pull/20663">CLI 可以配置内存限制</a></li><li><a href="https://github.com/apache/pulsar/pull/21664">允许通过正则或者是文件批量删除 topic</a></li><li><a href="https://github.com/apache/pulsar/pull/20614">通过 <code>pulsar-admin clusters list</code> 可以打印当前使用的 cluster</a></li></ul><h1 id="构建系统的改进"><a href="#构建系统的改进" class="headerlink" title="构建系统的改进"></a>构建系统的改进</h1><p>3.2.0 中引入了PIP-326: <a href="https://github.com/apache/pulsar/blob/master/pip/pip-326.md">Bill of Materials(BOM)</a> 来简化依赖管理。</p><h1 id="参与其中"><a href="#参与其中" class="headerlink" title="参与其中"></a>参与其中</h1><p>Pulsar 是发展最快的开源项目之一，被 Apache 基金会评选为参与度前五的项目，社区欢迎对开源、消息系统、streaming 感兴趣的参与贡献🎉，可以通过以下资源与社区保持联系：</p><ul><li>阅读贡献手册  <a href="https://pulsar.apache.org/contribute/">Apache Pulsar Contribution Guide</a> 开始你的第一个贡献。</li><li>访问 <a href="https://github.com/apache/pulsar">Pulsar GitHub repository</a>, 关注 <a href="https://twitter.com/apache_pulsar">@apache_pulsar</a> 的 Twitter&#x2F;X , 加入 slack 社区 <a href="https://apache-pulsar.slack.com/">Pulsar community on Slack</a>.</li></ul><p>🔗参考链接：</p><ul><li><a href="https://github.com/apache/pulsar/blob/master/pip/pip-318.md">https://github.com/apache/pulsar/blob/master/pip/pip-318.md</a></li><li><a href="https://pulsar.apache.org/docs/3.2.x/concepts-topic-compaction/">https://pulsar.apache.org/docs/3.2.x/concepts-topic-compaction/</a></li><li><a href="https://github.com/apache/pulsar/blob/master/pip/pip-322.md">https://github.com/apache/pulsar/blob/master/pip/pip-322.md</a></li><li><a href="https://github.com/apache/pulsar/blob/master/pip/pip_307.md">https://github.com/apache/pulsar/blob/master/pip/pip_307.md</a></li><li><a href="https://github.com/apache/pulsar/blob/master/pip/pip-290.md">https://github.com/apache/pulsar/blob/master/pip/pip-290.md</a></li><li><a href="https://github.com/apache/pulsar/pull/20663">https://github.com/apache/pulsar/pull/20663</a></li><li><a href="https://github.com/apache/pulsar/pull/20614">https://github.com/apache/pulsar/pull/20614</a></li><li><a href="https://github.com/apache/pulsar/blob/master/pip/pip-326.md">https://github.com/apache/pulsar/blob/master/pip/pip-326.md</a></li><li><a href="https://pulsar.apache.org/contribute/">https://pulsar.apache.org/contribute/</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://pulsar.apache.org/blog/2024/02/12/announcing-apache-pulsar-3-2/&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pulsar3.2.0 于 2024-02-05 发布，提供了一些新特性和修复了一些 bug ，共有 57 位开发者提交了 88 次 commit。&lt;/p&gt;
&lt;p&gt;以下是一些关键特性介绍.&lt;/p&gt;</summary>
    
    
    
    <category term="翻译" scheme="http://crossoverjie.top/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
    <category term="Pulsar" scheme="http://crossoverjie.top/tags/Pulsar/"/>
    
  </entry>
  
  <entry>
    <title>我的 2023</title>
    <link href="http://crossoverjie.top/2024/02/17/annual-summary/2023/"/>
    <id>http://crossoverjie.top/2024/02/17/annual-summary/2023/</id>
    <published>2024-02-17T07:59:49.000Z</published>
    <updated>2024-02-21T13:46:59.929Z</updated>
    
    <content type="html"><![CDATA[<p>今天是春节的最后一天，因为工作上临时有点事，很不情愿的打开电脑看着也就 10 天没看代码觉得非常陌生。</p><span id="more"></span><p>之后便准备将迟迟未写的 2023 总结补完，这个传统从16年至今已经坚持将近 7 年时间了，今年当然也不能意外。</p><p><img src="https://s2.loli.net/2024/02/17/AgYLTPxs7u35RqB.png"></p><h1 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h1><p>今年要说最让我印象深刻的事就是健身了，为此我投入了大量的时间。</p><p><img src="https://s2.loli.net/2024/02/17/NB6dLUxZRnQPCAS.jpg"><br><img src="https://s2.loli.net/2024/02/17/gWe2p7LQITDuCh5.jpg"><br>我记得是在 22 年四月份当时是因为确实长胖太明显了，下定决心找个教练进行训练，效果确实也有。</p><p>去年也分享过，最后从 75kg 减到 66kg；但大部分时间都是被动的进行训练，所以到了 23 年初的时候其实就反弹不少了。</p><p>而今年最大的不同是我由原先的被动健身改为主动了，甚至到后面一天不练还浑身不舒服。</p><p>所以今年我大部分时间都是自己锻炼，因为我是个 I 人，比较喜欢一个人，所以夏天的时候是每天早上 7 点多去健身房然后再去公司。 </p><p>到了冬天早上确实是起不来，就改为了中午去训练。</p><p>就这样不知不觉就坚持了大半年，直到现在。</p><p>训练日志见文末。</p><blockquote><p>甚至现在偶尔找教练训练时，他说我比他练的都勤🤣。</p></blockquote><p>最终达到的效果就是生活作息更加规律，同时身体素质也是肉眼可见的提升。</p><ul><li>自重引体从一个不能做-&gt;反握-&gt;对握-&gt;正握-&gt;正握做组</li><li>俯卧撑从 5 个-&gt;10个&#x2F;组-&gt;15个&#x2F;组-&gt;25个&#x2F;组-&gt;一次最多做 40 个-&gt;钻石俯卧撑 15&#x2F;组</li></ul><p>其余的就是胸肌有些轮廓、肩部也比以往更圆润一些，腹肌在某些特定角度也可以若隐若现（当然这个得体脂足够低才行），今年的主要目标是上半年认真刷刷脂。</p><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>工作今年大体上没有什么变化，但经济不景气应该每个人都能感受到；目前我能苟着的同时还能学一些自己感兴趣的东西就非常满足了。</p><p><img src="https://s2.loli.net/2024/02/18/yoqsN3S1LWalw8P.png"></p><blockquote><p>到现在依然很怀恋在上家公司的日子。</p></blockquote><p>今年在公司主要还是维护 Pulsar，同时也给社区贡献了一些代码，算是这么些年来最认真参与开源的一年。</p><p>感兴趣的可以看看之前写的文章：</p><ul><li><a href="https://crossoverjie.top/2023/12/21/ob/Pulsar%20Proposal/">如何给开源项目发起提案</a></li><li><a href="https://crossoverjie.top/2023/08/05/ob/novice-contribute-open-source/">新手如何快速参与开源项目</a></li></ul><p>相比我以前的工作来说，现在的岗位是基础架构，所以接触的几乎都是一些开源产品，这也是我个人感兴趣的方向。</p><p>所以虽然同事之间的交流没有之前的公司那么频繁（我们部门和业务团队在不同的城市），但因为由兴趣驱动，所以也没那么枯燥。</p><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><p>对了，年中的时候还头脑发热去报了一个英语线下培训班，上了两月后发现除非是连续每天上 8 小时突击几个月，不然别想一下子速成。</p><p>平时没有使用英语的环境，那就只能自己创造了，我现在会坚持每天看一个油管的科技视频，目前看生肉有字幕的情况下勉强可以理解。</p><p>同时又因为今年长期都在水开源社区，导致我现在看英文文档、邮件之类的不借助翻译也没那么吃力，算是开了一个好头。</p><p>今年争取再多听听英文播客，虽然暂时无法通过英语找到远程工作，但利用英文确实可以打开新世界。</p><h2 id="播客"><a href="#播客" class="headerlink" title="播客"></a>播客</h2><p><img src="https://s2.loli.net/2024/02/20/wMLS5luy8HDKerf.jpg"><br>今年算是播客的重度用户，其实听播客的习惯前几年就有了，但那时候大部分是再开车的时候听，今年因为每天有1~2小时的健身时间，所以健身的时候几乎都是听播客过来的。</p><p>个人觉得播客是非常好的内容输入源，比很多视频内容的质量还高；这里推荐几个我常听的频道：</p><ul><li>枫言枫语</li><li>硬地骇客</li><li>爱否科技</li><li>开源面对面</li><li>捕蛇者说</li><li>皮蛋漫游记等</li></ul><h2 id="副业"><a href="#副业" class="headerlink" title="副业"></a>副业</h2><p>在年底的时候无意间利用 Pulsar 完成了我人生的第一笔咨询服务，当时还发了个朋友圈。<br><img src="https://s2.loli.net/2024/02/18/d6PnUej5DSrJZ8R.png" alt="image.png"><br>没想到之后又有个朋友来咨询了一些关于职场的问题，完事后客户满意度还挺高。</p><p>于是我今年也准备好好筹备下，说不定真能做成一个副业。</p><blockquote><p>打个广告，感兴趣的也可以私聊。</p></blockquote><hr><p>年底还好运获得了掘金的<a href="https://juejin.cn/post/7328012551756464139">签约</a>资格：<br><img src="https://s2.loli.net/2024/02/18/25xMEJANaRIbHgP.png"><br>我算是掘金最早一批用户了，记得是 16 年就开始在上面发布文章，这也是长期坚持获得的肯定。</p><p>而且掘金由于被字节收购后资金明显比前几年宽裕，参与过几次征文活动还是收获了一些现金奖励。</p><p>现在和掘金签约后还能获得更多的现金和流量奖励，对作者和平台来说都是双赢，只是今后的文章需要先在掘金发布三个月后才可以同步到其他平台。</p><p>所以掘金还没关注的我的朋友赶紧关注一波吧：<br><a href="https://juejin.cn/user/835284565229597">https://juejin.cn/user/835284565229597</a></p><h1 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h1><p>技能上除了刚才在工作中提到的 Pulsar 外还额外学习了：</p><ul><li><code>VictoriaMetrics</code> 入门到安装<ul><li><code>VictoriaLog</code> 一个新的日志存储数据库，之前也写过一篇介绍使用<a href="https://crossoverjie.top/2023/08/23/ob/VictoriaLogs-Intro/">文章</a>。</li><li>还给 <code>VictoriaLog</code> 做过一点贡献。</li></ul></li><li>Grafana 更熟练了</li><li>kubernetes 的一些知识点也数量了，写过几个小工具：<ul><li><a href="https://crossoverjie.top/2023/10/19/ob/k8s-restart-pod/">优雅重启 Pod</a></li><li>批量替换应用镜像</li></ul></li><li>Istio 的应用，包含网关和服务调用等</li><li>在公司内部做过两次分享（关于 Pulsar 和开源的内容）</li><li>年底的时候还写过一个 <code>OTel</code> 的 <code>extension</code>，熟悉了 <code>OTel</code> 的一些概念和实践。</li></ul><p><img src="https://s2.loli.net/2024/02/21/kYTHJLrnVmvlxMB.png"><br>从今年长期使用的 tag 来看，果然还是 <code>Pulsar</code> 和 <code>kubernetes</code> 使用的最多。</p><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><p><img src="https://s2.loli.net/2024/02/20/B2kATswN7ZGQSzd.png"><br>今年的博客数据产量算是比较多的了，确实也是有我工作的关系，平时接触到的大部分都是些技术问题，所以能写的东西也就比较多了。</p><p>同时也再尝试每周发布技术周刊：<br><img src="https://s2.loli.net/2024/02/20/B1zoHZUNd6iKw48.png"></p><p>目前发了十几期，效果不错，大部分都是一些英文文章，自己也能学到一些东西。</p><h2 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h2><p>之前也提到了今年算是我比较深入的参与开源项目，以往大部分都是发布一些个人作品，当然也有给一些个人或者小项目提过 PR，现在看来多少有点”小打小闹“了。</p><p><img src="https://s2.loli.net/2024/02/20/y84mXRtDJYz7HuG.png"><br>因为在公司主要维护 Pulsar，所以不可避免的就需要和社区沟通，不管是反馈 Bug 还是修复问题流程都比以往正规，毕竟这也是一个 Apache 顶级项目。</p><p><img src="https://s2.loli.net/2024/02/20/IZKxknlzdO9Gcys.png"></p><p>主要活跃的是 <a href="https://github.com/apache/pulsar/pulls?q=is:pr+sort:updated-desc+author:crossoverJie+is:merged">Pulsar</a> 主仓库，合并了 14 个 PR。</p><p><img src="https://s2.loli.net/2024/02/20/xbmp8hLZnCkBuMR.png"></p><p>其次是 <a href="https://github.com/apache/pulsar-client-go/pulls?q=is:pr+sort:updated-desc+author:crossoverJie+is:merged">pulsar-client-go</a> 也就是 Pulsar 的 Go 客户端，合并了 6 个 PR。</p><hr><p><img src="https://s2.loli.net/2024/02/20/vpfMGde6gq4hsRm.png"></p><p><img src="https://s2.loli.net/2024/02/20/83zZDhX9arGu6Yo.jpg"></p><p>然后是 <code>VictoriaMetrics</code>，其实主要就是给他们新发布的 <code>VictoriaLogs</code> 修了个 Bug，也是第一次被单独提及的贡献。</p><hr><p>最后就是年底的时候在一个做可观测性大佬的公众号下看到的项目：<a href="https://github.com/cprobe/cprobe/">cprobe</a></p><p><img src="https://s2.loli.net/2024/02/20/luc9yaMvW18wHdF.png"><br>主要是贡献了一个 helm 安装仓库以及几个插件，这是一个对新手很友好的项目，对开源感兴趣的都可以来参与下。</p><p>当然贡献数量不能作为评判参与开源的唯一标准，但确实比较好量化的指标，今年加油继续贡献。</p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>又到了给往年打分的环节了：<br><img src="https://s2.loli.net/2024/02/21/Flfrmn4Tp6qYVWI.png"></p><p>去年算是完成了 60%，今年的定一些容易实现的目标：</p><ul><li>卧推 80kg</li><li>体脂保持在 13% 左右（误差不能多于 2）</li><li>去海外玩估计有点难度，那就先定国内吧，哪里都行.</li><li>年底开源社区争取提名一个 Committer</li><li>英语可以达到生肉油管的程度</li><li>做一个副业试试</li></ul><h2 id="往年记录"><a href="#往年记录" class="headerlink" title="往年记录"></a>往年记录</h2><ul><li><a href="https://crossoverjie.top/2023/01/18/annual-summary/2022/">2022</a></li><li><a href="https://crossoverjie.top/2022/01/27/annual-summary/2021/">2021</a></li><li><a href="https://crossoverjie.top/2021/03/02/annual-summary/2020/">2020</a></li><li><a href="https://crossoverjie.top/2019/12/30/annual-summary/2019/">2019</a></li><li><a href="https://crossoverjie.top/2018/12/30/annual-summary/2018/">2018</a></li><li><a href="https://crossoverjie.top/2018/12/30/annual-summary/2018/">2016</a></li></ul><blockquote><p><strong>长图预警</strong></p></blockquote><p><img src="https://s2.loli.net/2024/02/17/8Tl19muAntiXg4a.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天是春节的最后一天，因为工作上临时有点事，很不情愿的打开电脑看着也就 10 天没看代码觉得非常陌生。&lt;/p&gt;</summary>
    
    
    
    <category term="annual-summary" scheme="http://crossoverjie.top/categories/annual-summary/"/>
    
    
  </entry>
  
  <entry>
    <title>【译】Apache Pulsar 2023 年度回顾</title>
    <link href="http://crossoverjie.top/2024/01/26/ob/translate-pulsar-2023-year-in-review/"/>
    <id>http://crossoverjie.top/2024/01/26/ob/translate-pulsar-2023-year-in-review/</id>
    <published>2024-01-26T02:37:24.000Z</published>
    <updated>2024-01-26T06:58:04.544Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://pulsar.apache.org/blog/2024/01/12/pulsar-2023-year-in-review/">原文链接</a><br>前两天 Pulsar 社区发布了 2023 年年度回顾，去年我也花了一些时间参与社区，所以其中一些内容感受挺明显的，以下就是对一些重点内容的提炼。</p><span id="more"></span><p>2023 年是一个重要的里程碑，参与<a href="https://github.com/apache/pulsar">主仓库</a>贡献的开发者达到了 600 位。<br>自从 Pulsar 从 2018 毕业成为 Apache 顶级项目至今一共又 12K+ 的代码提交次数、639 位贡献者、12.2k star、3.5k fork、10k+ 的 slack 用户。</p><h1 id="2023-高光时刻"><a href="#2023-高光时刻" class="headerlink" title="2023 高光时刻"></a>2023 高光时刻</h1><h2 id="第一个-LTS-3-0-里程碑版本"><a href="#第一个-LTS-3-0-里程碑版本" class="headerlink" title="第一个 LTS 3.0 里程碑版本"></a>第一个 LTS 3.0 里程碑版本</h2><p><img src="https://s2.loli.net/2024/01/26/BRvYSLPOnxoQ614.png"><br>社区发布 Apache Pulsar 3.0，这是第一个长期支持 （LTS） 版本，从 Pulsar 3.0 开始，可以满足不同用户对稳定性和新功能的需求，同时减轻维护历史版本的负担。</p><p>以往的版本发布周期很短，一般是 3～4 个月，为了可以跟上社区新版，往往需要不停的升级，对维护中的负担较大。</p><p>今后的维护时间表如上图，以稳定为主的团队可以选择 LTS 版本，追求新功能的团队可以选择 feature 版本。</p><h2 id="新的官方网站"><a href="#新的官方网站" class="headerlink" title="新的官方网站"></a>新的官方网站</h2><p><a href="https://pulsar.apache.org/">https://pulsar.apache.org/</a>官方网站得到了新的设计。</p><h2 id="Pulsar-Admin-Go-Library"><a href="#Pulsar-Admin-Go-Library" class="headerlink" title="Pulsar Admin Go Library"></a>Pulsar Admin Go Library</h2><p>提供了 Pulsar Admin Go 的客户端，方便 Go 用户管理 Pulsar 资源</p><h2 id="使用-OTel-增强-Pulsar-的可观测系统"><a href="#使用-OTel-增强-Pulsar-的可观测系统" class="headerlink" title="使用 OTel 增强 Pulsar 的可观测系统"></a>使用 OTel 增强 Pulsar 的可观测系统</h2><p><a href="https://github.com/apache/pulsar/blob/master/pip/pip-264.md">PIP-264</a> 提案已经获得了社区批准开始开发，它将解决 topic 数量达到 50k~100M 的可观测性问题。<br>同时 Pulsar 社区已经为 OpenTelemetry 提交了两个特性 <a href="https://github.com/open-telemetry/opentelemetry-java/issues/5105">Near-zero memory allocations</a> <a href="https://github.com/open-telemetry/opentelemetry-java/issues/6107">metric filtering upon collection</a> 已经作为了 OpenTelemetry 的规范。</p><h1 id="主要事件回顾"><a href="#主要事件回顾" class="headerlink" title="主要事件回顾"></a>主要事件回顾</h1><p>2023 年，Pulsar 社区在全球范围内举办了一系列活动。</p><ul><li><a href="https://streamnative.io/blog/pulsar-virtual-summit-europe-2023-key-takeaways">Pulsar Summit Europe 2023</a></li><li><a href="https://pulsar.apache.org/blog/2023/08/28/pulsar-sessions-in-communityovercode-aisa-2023/">CommunityOverCode Asia 2023</a></li><li><a href="https://communityovercode.org/past-sessions/community-over-code-na-2023/">CommunityOverCode NA 2023</a></li><li><a href="https://streamnative.io/blog/pulsar-summit-north-america-2023-a-deep-dive-into-the-on-demand-summit-videos">Pulsar Summit NA 2023</a></li></ul><h1 id="社区成长"><a href="#社区成长" class="headerlink" title="社区成长"></a>社区成长</h1><p>没有贡献者社区很难发展，2023年加入了许多新面孔。</p><ul><li>639 位贡献者</li><li>13.4k Github star</li><li>3.5k fork</li><li>新增 8 位 Committers</li><li>新增 6 位 PMC</li><li>10k+ slack 用户</li><li>20M+ docker pulls</li></ul><h1 id="项目发布"><a href="#项目发布" class="headerlink" title="项目发布"></a>项目发布</h1><p>2023年，社区发布了两个 major version 和 12 个 minor version 版本；最大的里程碑依然是发布了首个 LTS 版本 <a href="https://pulsar.apache.org/blog/2023/05/02/announcing-apache-pulsar-3-0/">Pulsar3.0</a>。<br>超过了 140 个贡献者提交了大约 1500 次提交。</p><p>同时也带来了一些重要的特性，比如新版本的<a href="https://github.com/apache/pulsar/issues/16691">负载均衡器</a>，<a href="https://github.com/apache/pulsar/issues/16763">大规模的延时消息支持</a>。</p><p>更新了以下一些客户端：</p><ul><li><a href="https://github.com/apache/pulsar-client-cpp/releases/tag/v3.4.2">Pulsar C++ Client 3.4.2</a></li><li><a href="https://github.com/apache/pulsar-client-go/releases/tag/v0.11.1">Pulsar Go Client 0.11.1</a></li><li><a href="https://github.com/apache/pulsar-client-node/releases/tag/v1.9.0">Pulsar Node.js Client 1.9.0</a></li><li><a href="https://github.com/apache/pulsar-client-python/releases/tag/v3.3.0">Pulsar Python Client 3.3.0</a></li><li><a href="https://github.com/apache/pulsar-manager/releases/tag/v0.4.0">Pulsar Manager 0.4.0</a></li><li><a href="https://github.com/apache/pulsar-helm-chart/releases/tag/pulsar-3.1.0">Pulsar Helm Chart 3.1.0</a></li><li><a href="https://github.com/apache/pulsar-dotpulsar/blob/master/CHANGELOG.md#311---2023-12-11">Pulsar dotnet Client 3.1.1</a></li><li><a href="https://github.com/apache/pulsar-client-reactive/releases/tag/v0.5.1">Reactive Client for Apache Pulsar 0.1.0</a></li></ul><h1 id="生态系统"><a href="#生态系统" class="headerlink" title="生态系统"></a>生态系统</h1><p>2023 年Pulsar 社区也与多个开源项目进行了集成：</p><ul><li><a href="https://quarkus.io/guides/pulsar">Quarkus Extension for Apache Pulsar</a>，通过事件驱动在 Quarkus 使用 Pulsar。</li><li><a href="https://spring.io/blog/2023/11/21/spring-for-apache-pulsar-1-0-0-goes-ga/">Spring for Apache Pulsar</a> 提供了 PulsarTemplate 用于生产消息，PulsarListener 注解可以方便的消费消息，在 spring 生态下更容易集成 Pulsar</li><li><a href="https://github.com/streamnative/oxia">Oxia</a>:可以使用 Oxia 提到 zookeeper 从而突破 Pulsar 支持 1M topic 的限制。</li></ul><h1 id="2024年计划"><a href="#2024年计划" class="headerlink" title="2024年计划"></a>2024年计划</h1><h2 id="OTel"><a href="#OTel" class="headerlink" title="OTel"></a>OTel</h2><p>继续推进使用 OpenTelemetry 替换现有的可观测性系统</p><h2 id="限流重构"><a href="#限流重构" class="headerlink" title="限流重构"></a>限流重构</h2><p><a href="https://github.com/apache/pulsar/blob/master/pip/pip-322.md">PIP-322 Pulsar Rate Limiting Refactoring</a>限流重构已经被合并，将在 3.2 版本中发布。</p><h2 id="移除-Pulsar-SQL-模块"><a href="#移除-Pulsar-SQL-模块" class="headerlink" title="移除 Pulsar SQL 模块"></a>移除 Pulsar SQL 模块</h2><p>将 SQL 模块移除后有效的减少了镜像大小以及构建时间。</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>2024 年将会继续举办活动，包括 Pulsar Summit North America 和 Pulsar Summit APAC。<a href="https://youtube.com/playlist?list=PLqRma1oIkcWhOZ6W-g4D_3JNxJzYnwLNX&si=o6G-fRcNgW9zqHGa">在这里可以查看以往的活动</a>。</p><p>🔗参考链接：</p><ul><li><a href="https://youtube.com/playlist?list=PLqRma1oIkcWhOZ6W-g4D_3JNxJzYnwLNX&amp;si=o6G-fRcNgW9zqHGa">https://youtube.com/playlist?list=PLqRma1oIkcWhOZ6W-g4D_3JNxJzYnwLNX&amp;si=o6G-fRcNgW9zqHGa</a></li><li><a href="https://github.com/apache/pulsar/wiki/Community-Meetings">https://github.com/apache/pulsar/wiki/Community-Meetings</a></li><li><a href="https://pulsar.apache.org/blog/2024/01/12/pulsar-2023-year-in-review/">https://pulsar.apache.org/blog/2024/01/12/pulsar-2023-year-in-review/</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://pulsar.apache.org/blog/2024/01/12/pulsar-2023-year-in-review/&quot;&gt;原文链接&lt;/a&gt;&lt;br&gt;前两天 Pulsar 社区发布了 2023 年年度回顾，去年我也花了一些时间参与社区，所以其中一些内容感受挺明显的，以下就是对一些重点内容的提炼。&lt;/p&gt;</summary>
    
    
    
    <category term="翻译" scheme="http://crossoverjie.top/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
    <category term="Pulsar" scheme="http://crossoverjie.top/tags/Pulsar/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你为开源项目贡献代码</title>
    <link href="http://crossoverjie.top/2024/01/25/ob/create-a-plugin-for-cprobe/"/>
    <id>http://crossoverjie.top/2024/01/25/ob/create-a-plugin-for-cprobe/</id>
    <published>2024-01-25T11:49:09.000Z</published>
    <updated>2024-01-25T15:56:28.553Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>前段时间无意间看到一篇公众号 <a href="https://mp.weixin.qq.com/s/T8B3XnXd30vT7OvsFTnaFw">招贤令：一起来搞一个新开源项目</a>，作者介绍他想要做一个开源项目：<a href="https://github.com/cprobe/cprobe">cprobe</a> 用于整合目前市面上散落在各地的 <code>Exporter</code>，统一进行管理。</p><p>比如我们常用的 <code>blackbox_exporter/mysqld_exporter</code> 等。</p><blockquote><p>以往的每一个 Exporter 都需要单独部署运维。</p></blockquote><span id="more"></span><p>同时又完全兼容 <code>Prometheus</code> 生态，也可以复用现有的监控面板。</p><p>恰好这段时间我也在公司从事可观测性相关的业务，发现这确实是一个痛点。</p><p>于是便一直在关注这个项目，同时也做了些贡献；因为该项目的核心是用于整合 exporter，所以为其编写插件也是非常重要的贡献了。</p><h1 id="编写插件"><a href="#编写插件" class="headerlink" title="编写插件"></a>编写插件</h1><p>整个项目执行流程图如下：<br><img src="https://s2.loli.net/2024/01/25/SihX4C5PN8IeR3Z.png"></p><p>可以看到编写插件最核心的便是自定义插件解析自定义的配置文件、抓取指标的逻辑。</p><p>比如我们需要在配置中指定抓取目标的域名、抓取规则等。</p><p>这里  <code>cprobe</code> 已经抽象出了两个接口，我们只需要做对应的实现即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Plugin <span class="keyword">interface</span> &#123;  </span><br><span class="line">    <span class="comment">// ParseConfig is used to parse config  </span></span><br><span class="line">    ParseConfig(baseDir <span class="type">string</span>, bs []<span class="type">byte</span>) (any, <span class="type">error</span>)  </span><br><span class="line">    <span class="comment">// Scrape is used to scrape metrics, cfg need to be cast specific cfg  </span></span><br><span class="line">    Scrape(ctx context.Context, target <span class="type">string</span>, cfg any, ss *types.Samples) <span class="type">error</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面就以我之前编写的 <a href="https://github.com/cprobe/cprobe/pull/29">Consul</a> 为例。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Allows any Consul server (non-leader) to service a read.  </span></span><br><span class="line"><span class="string">allow_stale</span> <span class="string">=</span> <span class="literal">true</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># === CA  </span></span><br><span class="line"><span class="comment"># File path to a PEM-encoded certificate authority used to validate the authenticity of a server certificate.  </span></span><br><span class="line"><span class="string">ca_file</span> <span class="string">=</span> <span class="string">&quot;/etc/consul.d/consul-agent-ca.pem&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># File path to a PEM-encoded certificate used with the private key to verify the exporter&#x27;s authenticity.  </span></span><br><span class="line"><span class="string">cert_file</span> <span class="string">=</span> <span class="string">&quot;/etc/consul.d/consul-agent.pem&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Generate a health summary for each service instance. Needs n+1 queries to collect all information.  </span></span><br><span class="line"><span class="string">health_summary</span> <span class="string">=</span> <span class="literal">true</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># File path to a PEM-encoded private key used with the certificate to verify the exporter&#x27;s authenticity  </span></span><br><span class="line"><span class="string">key_file</span> <span class="string">=</span> <span class="string">&quot;/etc/consul.d/consul-agent-key.pem&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Disable TLS host verification.  </span></span><br><span class="line"><span class="string">insecure</span> <span class="string">=</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>这里每个插件的配置都不相同，所以我们需要将配置解析到具体的结构体中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Consul)</span></span> ParseConfig(baseDir <span class="type">string</span>, bs []<span class="type">byte</span>) (any, <span class="type">error</span>) &#123;  </span><br><span class="line">    <span class="keyword">var</span> c Config  </span><br><span class="line">    err := toml.Unmarshal(bs, &amp;c)  </span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line">       <span class="keyword">return</span> <span class="literal">nil</span>, err  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> c.Timeout == <span class="number">0</span> &#123;  </span><br><span class="line">       c.Timeout = time.Millisecond * <span class="number">500</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> &amp;c, <span class="literal">nil</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析配置文件没啥好说的，根据自己的逻辑实现即可，可能会配置一些默认值而已。</p><hr><p>下面是核心的抓取逻辑，本质上就是使用对应插件的 <code>Client</code> 获取一些核心指标封装为 <code>Prometheus</code> 的 <code>Metric</code>，然后由 <code>cprobe</code> 写入到远端的 <code>Prometheus</code> 中(或者是兼容 <code>Prometheus</code> 的数据库中)。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Create client</span></span><br><span class="line">config.HttpClient.Timeout = opts.Timeout  </span><br><span class="line">config.HttpClient.Transport = transport  </span><br><span class="line">  </span><br><span class="line">client, err := consul_api.NewClient(config)  </span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> requestLimitChan <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;  </span><br><span class="line"><span class="keyword">if</span> opts.RequestLimit &gt; <span class="number">0</span> &#123;  </span><br><span class="line">    requestLimitChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, opts.RequestLimit)  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/01/25/Hbnqz36wSDohuBJ.png"><br>所有的指标数据都是通过对应的客户端获取。</p><p>如果是迁移一个存在的  export 到 cprobe 中时，这些抓取代码我们都可以直接复制对应 <a href="https://github.com/prometheus/consul_exporter">repo</a> 中的代码。</p><p>比如我就是参考的：<a href="https://github.com/prometheus/consul_exporter">https://github.com/prometheus/consul_exporter</a></p><p>除非我们是重新写一个插件，不然对于一些流行的库或者是中间件都已经有对应的 <code>exporter</code> 了。</p><p>具体的列表可以参考这里：<br><a href="https://prometheus.io/docs/instrumenting/exporters/">https://prometheus.io/docs/instrumenting/exporters/</a></p><p><img src="https://s2.loli.net/2024/01/25/6DEKwyWqA3MBm8f.png"></p><p>之后便需要在对应的插件目录(<code>./conf.d</code>)创建我们的配置文件：<br><img src="https://s2.loli.net/2024/01/25/BJuyoqNtmvZ15wr.png"></p><p>为了方便测试，可以在启动 cprobe 时添加 <code>-no-writer</code> 让指标打印在控制台，从而方便调试。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>之前就有人问我有没有毕竟好上手的开源项目，这不就来了吗？</p><p>正好目前项目创建时间不长，代码和功能也比较简单，同时还有可观察系统大佬带队，确实是一个非常适合新手参与的开源项目。</p><p>项目地址：</p><p><a href="https://github.com/cprobe/cprobe">https://github.com/cprobe/cprobe</a></p><h1 id="私货"><a href="#私货" class="headerlink" title="私货"></a>私货</h1><p><img src="https://s2.loli.net/2024/01/25/2K3um8dPlfneyLw.png"></p><p>最后夹带一点私货：前两天帮一个读者朋友做了一次付费的技术咨询（主要是关于 Pulsar 相关的），也是我第一次做付费内容，这种拿人钱财替人消灾难道就是知识付费的味道吗😂？</p><p><img src="https://s2.loli.net/2024/01/25/LJq6xlowRmdnrHv.png"></p><p>所以我就趁热打铁在朋友圈发了个广告，没想到又有个朋友找我做关于职场相关咨询，最后能帮助到对方自己也很开心。</p><p>其实经常也有人通过社媒、邮件等渠道找我帮忙看问题，一些简单的我通常也会抽时间回复。</p><p>但后面这位朋友也提到，如果我不是付费，他也不好意思来找我聊这些内容，毕竟涉及到一些隐私，同时也需要占用双方 1～2 小时的时间。</p><p>这样明码标价的方式确实也能更方便的沟通，同时也能减轻对方的心里负担，直接从白嫖转为付费大佬。</p><p>铺垫了这么多，主要目的是想进行一个小范围的尝试，如果对以下内容感兴趣的朋友欢迎加我微信私聊：</p><blockquote><p>包括但不限于技术、职场、开源等我有经验的行业都可以聊。</p></blockquote><p><img src="https://s2.loli.net/2024/01/25/brqMxl5ZBvRz3mu.jpg"></p><p>反馈不错的话也需要可以作为我的长期副业做下去。<br>#Blog </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;前段时间无意间看到一篇公众号 &lt;a href=&quot;https://mp.weixin.qq.com/s/T8B3XnXd30vT7OvsFTnaFw&quot;&gt;招贤令：一起来搞一个新开源项目&lt;/a&gt;，作者介绍他想要做一个开源项目：&lt;a href=&quot;https://github.com/cprobe/cprobe&quot;&gt;cprobe&lt;/a&gt; 用于整合目前市面上散落在各地的 &lt;code&gt;Exporter&lt;/code&gt;，统一进行管理。&lt;/p&gt;
&lt;p&gt;比如我们常用的 &lt;code&gt;blackbox_exporter/mysqld_exporter&lt;/code&gt; 等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以往的每一个 Exporter 都需要单独部署运维。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    
    <category term="OpenSource" scheme="http://crossoverjie.top/tags/OpenSource/"/>
    
    <category term="开源" scheme="http://crossoverjie.top/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>白话 Pulsar Bookkeeper 的存储模型</title>
    <link href="http://crossoverjie.top/2024/01/15/ob/Bookkeeper-storage/"/>
    <id>http://crossoverjie.top/2024/01/15/ob/Bookkeeper-storage/</id>
    <published>2024-01-15T11:20:59.000Z</published>
    <updated>2024-01-15T15:30:41.385Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2024/01/15/xU7FZCPjckRMBAD.png"></p><p>最近我们的 Pulsar 存储有很长一段时间数据一直得不到回收，但消息确实已经是 ACK 了，理论上应该是会被回收的，随着时间流逝不但没回收还一直再涨，最后在没找到原因的情况下就只有一直不停的扩容。</p><blockquote><p>最后磁盘是得到了回收，过程先不表，之后再讨论。</p></blockquote><p>为了防止类似的问题再次发生，我们希望可以监控到磁盘维度，能够列出各个日志文件的大小以及创建时间。</p><p>这时就需要对 <code>Pulsar</code> 的存储模型有一定的了解，也就有了这篇文章。</p><span id="more"></span><p><img src="https://s2.loli.net/2024/01/15/EjpuQKJN5MVIW8r.png" alt="image.png"><br>讲到 Pulsar 的存储模型，本质上就是 Bookkeeper 的存储模型。</p><p>Pulsar 所有的消息读写都是通过 Bookkeeper 实现的。</p><blockquote><p><code>Bookkeeper</code> 是一个可扩展、可容错、低延迟的日志存储数据库，基于 Append Only 模型。（数据只能追加不能修改）</p></blockquote><p><img src="https://s2.loli.net/2024/01/15/tMITYocL89ZapVG.png" alt="image.png"></p><p>这里我利用 Pulsar 和 Bookkeeper 的 Admin API 列出了 Broker 和 BK 中 Ledger 分别占用的磁盘空间。</p><blockquote><p>关于这个如何获取和计算的，后续也准备提交给社区。</p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>但和我们实际 <code>kubernetes</code> 中的磁盘占用量依然对不上，所以就想看看在 BK 中实际的存储日志和 <code>Ledger</code> 到底差在哪里。</p><blockquote><p>知道 Ledger 就可以通过 Ledger 的元数据中找到对应的 topic，从而判断哪些 topic 的数据导致统计不能匹配。</p></blockquote><p>Bookkeeper 有提提供一个Admin API 可以返回当前 BK 所使用了哪些日志文件的接口:<br><a href="https://bookkeeper.apache.org/docs/admin/http#endpoint-apiv1bookielist_disk_filefile_typetype">https://bookkeeper.apache.org/docs/admin/http#endpoint-apiv1bookielist_disk_filefile_typetype</a></p><p><img src="https://s2.loli.net/2024/01/15/ZOMcNSG53Ttz4eo.png"></p><p>从返回的结果可以看出，落到具体的磁盘上只有一个文件名称，是无法知道具体和哪些 Ledger 进行关联的，也就无法知道具体的 topic 了。</p><p>此时只能大胆假设，应该每个文件和具体的消息 ID 有一个映射关系，也就是索引。<br>所以需要搞清楚这个索引是如何运行的。</p><h1 id="存储模型"><a href="#存储模型" class="headerlink" title="存储模型"></a>存储模型</h1><p><img src="https://s2.loli.net/2024/01/15/uvPC1Y8kdOJ3m5B.png"></p><p>我查阅了一些网上的文章和源码大概梳理了一个存储流程：</p><ol><li>BK 收到写入请求，数据会异步写入到 <code>Journal</code>&#x2F;<code>Entrylog</code></li><li>Journal 直接顺序写入，并且会快速清除已经写入的数据，所以需要的磁盘空间不多（所以从监控中其实可以看到 Journal 的磁盘占有率是很低的）。</li><li>考虑到会随机读消息，EntryLog 在写入前进行排序，保证落盘的数据中同一个 Ledger 的数据尽量挨在一起，充分利用 PageCache.</li><li>最终数据的索引通过 <code>LedgerId+EntryId</code> 生成索引信息存放到 <code>RockDB</code> 中（<code>Pulsar</code> 的场景使用的是 <code>DbLedgerStorage</code> 实现）。</li><li>读取数据时先从获取索引，然后再从磁盘读取数据。</li><li>利用 <code>Journal</code> 和 <code>EntryLog</code> 实现消息的读写分离。</li></ol><p>简单来说 BK 在存储数据的时候会进行双写，<code>Journal</code> 目录用于存放写的数据，对消息顺序没有要求，写完后就可以清除了。</p><p>而 <code>Entry</code> 目录主要用于后续消费消息进行读取使用，大部分场景都是顺序读，毕竟我们消费消息的时候很少会回溯，所以需要充分利用磁盘的 PageCache，将顺序的消息尽量的存储在一起。</p><blockquote><p>同一个日志文件中可能会存放多个 Ledger 的消息，这些数据如果不排序直接写入就会导致乱序，而消费时大概率是顺序的，但具体到磁盘的表现就是随机读了，这样读取效率较低。</p></blockquote><p>所以我们使用 <code>Helm</code> 部署 <code>Bookkeeper</code> 的时候需要分别指定 <code>journal</code> 和 <code>ledgers</code> 的目录</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span>  </span><br><span class="line">  <span class="comment"># use a persistent volume or emptyDir  </span></span><br><span class="line">  <span class="attr">persistence:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">journal:</span>  </span><br><span class="line">    <span class="attr">name:</span> <span class="string">journal</span>  </span><br><span class="line">    <span class="attr">size:</span> <span class="string">20Gi</span>  </span><br><span class="line">    <span class="attr">local_storage:</span> <span class="literal">false</span>  </span><br><span class="line">    <span class="attr">multiVolumes:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">journal0</span>  </span><br><span class="line">        <span class="attr">size:</span> <span class="string">10Gi</span>  </span><br><span class="line">        <span class="comment"># storageClassName: existent-storage-class  </span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/pulsar/data/bookkeeper/journal0</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">journal1</span>  </span><br><span class="line">        <span class="attr">size:</span> <span class="string">10Gi</span>  </span><br><span class="line">        <span class="comment"># storageClassName: existent-storage-class  </span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/pulsar/data/bookkeeper/journal1</span>  </span><br><span class="line">  <span class="attr">ledgers:</span>  </span><br><span class="line">    <span class="attr">name:</span> <span class="string">ledgers</span>  </span><br><span class="line">    <span class="attr">size:</span> <span class="string">50Gi</span>  </span><br><span class="line">    <span class="attr">local_storage:</span> <span class="literal">false</span>  </span><br><span class="line">    <span class="attr">storageClassName:</span> <span class="string">sc</span></span><br><span class="line">    <span class="comment"># storageClass:  </span></span><br><span class="line">      <span class="comment"># ...    useMultiVolumes: false  </span></span><br><span class="line">    <span class="attr">multiVolumes:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ledgers0</span>  </span><br><span class="line">        <span class="attr">size:</span> <span class="string">1000Gi</span>  </span><br><span class="line">        <span class="comment"># storageClassName: existent-storage-class  </span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/pulsar/data/bookkeeper/ledgers0</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ledgers1</span>  </span><br><span class="line">        <span class="attr">size:</span> <span class="string">1000Gi</span>  </span><br><span class="line">        <span class="comment"># storageClassName: existent-storage-class  </span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/pulsar/data/bookkeeper/ledgers1</span></span><br></pre></td></tr></table></figure><hr><p><img src="https://s2.loli.net/2024/01/15/nJeNDFbu2MIQp5a.png"><br>每次在写入和读取数据的时候都需要通过消息 ID 也就是 ledgerId 和 entryId 来获取索引信息。</p><blockquote><p>也印证了之前索引的猜测。</p></blockquote><p>所以借助于 BK 读写分离的特性，我们还可以单独优化存储。</p><p>比如写入 <code>Journal</code> 的磁盘因为是顺序写入，所以即便是普通的 <code>HDD</code> 硬盘速度也很快。</p><p>大部分场景下都是读大于写，所以我们可以单独为 <code>Ledger</code> 分配高性能 SSD 磁盘，按需使用。</p><blockquote><p>因为在最底层的日志文件中无法直接通过 ledgerId 得知占用磁盘的大小，所以我们实际的磁盘占用率对不上的问题依然没有得到解决，这个问题我还会持续跟进，有新的进展再继续同步。</p></blockquote><p>#Blog #Pulsar </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2024/01/15/xU7FZCPjckRMBAD.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近我们的 Pulsar 存储有很长一段时间数据一直得不到回收，但消息确实已经是 ACK 了，理论上应该是会被回收的，随着时间流逝不但没回收还一直再涨，最后在没找到原因的情况下就只有一直不停的扩容。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最后磁盘是得到了回收，过程先不表，之后再讨论。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了防止类似的问题再次发生，我们希望可以监控到磁盘维度，能够列出各个日志文件的大小以及创建时间。&lt;/p&gt;
&lt;p&gt;这时就需要对 &lt;code&gt;Pulsar&lt;/code&gt; 的存储模型有一定的了解，也就有了这篇文章。&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    
    <category term="Pulsar" scheme="http://crossoverjie.top/tags/Pulsar/"/>
    
    <category term="Bookkeeper" scheme="http://crossoverjie.top/tags/Bookkeeper/"/>
    
  </entry>
  
  <entry>
    <title>技术阅读周刊第十四期：Golang 作者 Rob Pike 在 GopherConAU 上的分享</title>
    <link href="http://crossoverjie.top/2024/01/12/ob/newsletter/Newsletter12-202401012/"/>
    <id>http://crossoverjie.top/2024/01/12/ob/newsletter/Newsletter12-202401012/</id>
    <published>2024-01-12T09:28:25.000Z</published>
    <updated>2024-01-11T09:59:20.030Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2024/01/11/YMoyEKwUubfZA9a.png"></p><p><strong>技术阅读周刊，每周更新。</strong></p><span id="more"></span><h2 id="历史更新"><a href="#历史更新" class="headerlink" title="历史更新"></a>历史更新</h2><ul><li><a href="https://crossoverjie.top/2023/12/15/ob/newsletter/Newsletter10-20231215/">20231215：第十期</a></li><li><a href="https://crossoverjie.top/2023/12/22/ob/newsletter/Newsletter10-20231222/">20231122：第十一期</a></li><li><a href="https://crossoverjie.top/2023/12/29/ob/newsletter/Newsletter12-20231229/">20231129：第十二期</a></li><li><a href="https://crossoverjie.top/2024/01/05/ob/newsletter/Newsletter12-20240105/">20240105：第十三期：一些提高生产力的终端命令</a></li></ul><h2 id="What-We-Got-Right-What-We-Got-Wrong"><a href="#What-We-Got-Right-What-We-Got-Wrong" class="headerlink" title="What We Got Right, What We Got Wrong"></a>What We Got Right, What We Got Wrong</h2><p>URL: <a href="https://commandcenter.blogspot.com/2024/01/what-we-got-right-what-we-got-wrong.html?utm_source=changelog-news">https://commandcenter.blogspot.com/2024/01/what-we-got-right-what-we-got-wrong.html?utm_source=changelog-news</a></p><blockquote><p>本文是 <code>Golang</code> 核心作者之一  <a href="http://robpike.blogspot.com/">Rob Pike</a> 去年底在澳大利亚 GopherConAU 会议上的分享；总结了 Go 语言 14 年来的做对了哪些事情、做错了哪些事情。</p></blockquote><p><img src="https://s2.loli.net/2024/01/10/1MRo4ZTPwzmd6F2.png"></p><p>主要包括：</p><ul><li>语言涉及</li><li>社区管理</li><li>项目运营<br>等方面，感兴趣的还可以看油管视频。<br><a href="https://www.youtube.com/watch?v=yE5Tpp2BSGw">https://www.youtube.com/watch?v=yE5Tpp2BSGw</a></li></ul><h2 id="Top-10-Platform-Engineering-Tools-You-Should-Consider-in-2024-by-Romaric-Philogene-Jan-2024-Medium"><a href="#Top-10-Platform-Engineering-Tools-You-Should-Consider-in-2024-by-Romaric-Philogene-Jan-2024-Medium" class="headerlink" title="Top 10 Platform Engineering Tools You Should Consider in 2024 | by Romaric Philogène | Jan, 2024 | Medium"></a>Top 10 Platform Engineering Tools You Should Consider in 2024 | by Romaric Philogène | Jan, 2024 | Medium</h2><p>URL: <a href="https://medium.com/@rphilogene/top-10-platform-engineering-tools-you-should-consider-in-2024-892e6e211b85">https://medium.com/@rphilogene/top-10-platform-engineering-tools-you-should-consider-in-2024-892e6e211b85</a><br><img src="https://s2.loli.net/2024/01/11/VUhodB7rn12lYwR.png"></p><blockquote><p>本文介绍了作为一个平台工程师需要掌握的工具。</p></blockquote><p>先定义了什么是平台工程师：<br>为研发人员提供平台资源进行开发，让开发人员可以在云环境中自助完成整个软件生命周期的各个环节，比如基础环境搭建、代码 pipelines、监控等。</p><p>以下是会用到的工具：</p><ul><li>kubernetes：这个就不用多讲了。</li><li>Crossplane：用于管理多集群的 kubernetes</li><li>Qovery：内部开发者平台</li><li>Github&#x2F;Gitlab CI&#x2F;CD</li><li>ArgoCD：kubernetes 原生提供的持续部署工具。</li><li>Docker</li><li>Terraform： 基础设施自动化工具,可以通过声明式配置文件实现多云基础设施的部署和管理。</li><li>Datadog：监控和日志分析平台，当然也可以使用 Prometheus&#x2F;Grafana 等</li></ul><h2 id="Load-Balancing-Algorithms-Explained-Visually"><a href="#Load-Balancing-Algorithms-Explained-Visually" class="headerlink" title="Load Balancing Algorithms Explained Visually"></a>Load Balancing Algorithms Explained Visually</h2><p>URL: <a href="https://blog.quastor.org/p/load-balancing-algorithms-explained-visually?utm_source=tldrwebdev">https://blog.quastor.org/p/load-balancing-algorithms-explained-visually?utm_source=tldrwebdev</a></p><blockquote><p>本文介绍了一些负载均衡算法以及其优缺点。</p></blockquote><p><img src="https://s2.loli.net/2024/01/11/NGV9YWJ6g7Dx2sy.gif" alt="Round Robin_1.gif"></p><ol><li><p>轮询算法(Round Robin):每个请求按顺序分配到不同服务器。实现简单,但不能考虑服务器负载情况。</p></li><li><p>加权轮询(Weighted Round Robin):考虑服务器性能给各服务器设置权重,请求分配按权重比例进行。仍然不能实时反应服务器负载变化。</p></li><li><p>最少连接数(Least Connections):实时监测各服务器连接数,将请求分配到连接数最少的服务器上。实现较复杂,需要定期探测各服务器状态。</p></li><li><p>最短响应时间(Least Response Time):监测各服务器响应时间,分配给响应最快的服务器。</p></li><li><p>双随机选择(Power of Two Choices):随机选择两台服务器,将请求分配给负载较轻的一台。减少监测开销。</p></li><li><p>一致哈希(Consistent Hashing):根据请求关键信息计算哈希值,将请求分配给对应的机器范围。解决主机添加和删除问题。</p></li><li><p>其他算法如根据磁盘、内存利用率进行负载分配等。</p></li></ol><h2 id="What-problem-did-Go-actually-solve-for-Google"><a href="#What-problem-did-Go-actually-solve-for-Google" class="headerlink" title="What problem did Go actually solve for Google"></a>What problem did Go actually solve for Google</h2><p>URL: <a href="https://www.reddit.com/r/golang/comments/176b5pn/what_problem_did_go_actually_solve_for_google/">https://www.reddit.com/r/golang/comments/176b5pn/what_problem_did_go_actually_solve_for_google/</a></p><blockquote><p>这是一个 Reddit 上的帖子，OP 的问题是 Rob 在之前的分享中提到 Golang 创建的原因是要解决 Google 内部的问题，但没有具体讲  Google 到底遇到了什么问题？<br>什么问题是几百种编程语言都无法解决的问题？</p></blockquote><p>以下是一些高赞回答：</p><ul><li>更快的本地编译速度</li><li>对新手来说更好理解的代码</li><li>更严格的代码风格，使得大家的代码都差不多。</li><li>更容易编写并发程序</li></ul><p>总体来说, Go 主要解决的是在大型分布式系统中如何更高效地进行协作开发、实现高性能又易维护。这正是 Google 当时最关心的问题。</p><p>文章链接：</p><ul><li><a href="https://commandcenter.blogspot.com/2024/01/what-we-got-right-what-we-got-wrong.html?utm_source=changelog-news">https://commandcenter.blogspot.com/2024/01/what-we-got-right-what-we-got-wrong.html?utm_source=changelog-news</a></li><li><a href="https://medium.com/@rphilogene/top-10-platform-engineering-tools-you-should-consider-in-2024-892e6e211b85">https://medium.com/@rphilogene/top-10-platform-engineering-tools-you-should-consider-in-2024-892e6e211b85</a></li><li><a href="https://blog.quastor.org/p/load-balancing-algorithms-explained-visually?utm_source=tldrwebdev">https://blog.quastor.org/p/load-balancing-algorithms-explained-visually?utm_source=tldrwebdev</a></li></ul><p>#Newletters </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2024/01/11/YMoyEKwUubfZA9a.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术阅读周刊，每周更新。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    <category term="Newsletter" scheme="http://crossoverjie.top/categories/OB/Newsletter/"/>
    
    
  </entry>
  
  <entry>
    <title>请注意，你的 Pulsar 集群可能有删除数据的风险</title>
    <link href="http://crossoverjie.top/2024/01/09/ob/Pulsar-Delete-Topic/"/>
    <id>http://crossoverjie.top/2024/01/09/ob/Pulsar-Delete-Topic/</id>
    <published>2024-01-09T15:04:58.000Z</published>
    <updated>2024-01-08T15:26:11.780Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇 <a href="https://crossoverjie.top/2024/01/03/ob/Pulsar3.0-new-feature/#topic%E8%A2%AB%E5%88%A0%E9%99%A4">Pulsar3.0新功能介绍</a>中提到，在升级到 3.0 的过程中碰到一个致命的问题，就是升级之后 topic 被删除了。</p><p>正好最近社区也补充了相关细节，本次也接着这个机会再次复盘一下，毕竟这是一个非常致命的 Bug。</p><span id="more"></span><p><img src="https://s2.loli.net/2024/01/08/MKFhYVL95C8qtHR.png"></p><h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>先来回顾下当时的情况：升级当晚没有出现啥问题，各个流量指标、生产者、消费者数量都是在正常范围内波动。</p><blockquote><p>事后才知道，因为只是删除了很少一部分的 topic，所以从监控中反应不出来。</p></blockquote><p>早上上班后陆续有部分业务反馈应用连不上 topic，提示 <code>topic nof found</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">&#x27;Producer&#x27;</span>: Invocation of init method failed; nested exception is org.apache.pulsar.client.api.PulsarClientException$TopicDoesNotExistException: Topic Not Found.</span><br></pre></td></tr></table></figure><p>因为只是部分应用在反馈，所以起初怀疑是 broker 升级之后导致老版本的 pulsar-client 存在兼容性问题。</p><p>所以我就拿了平时测试用的 topic 再配合多个老版本的 sdk 进行测试，发现没有问题。</p><blockquote><p>直到这一步还好，至少证明是小范故障。</p></blockquote><p>因为提示的是 topic 不存在，所以就准备查一下 topic 的元数据是否正常。</p><p><img src="https://s2.loli.net/2024/01/08/My6KVsTkRaF3SwQ.png"><br>查询后发现元数据是存在的。</p><p>之后我便想看看提示了 topic 不存在的 topic 的归属，然后再看看那个 broker 中是否有异常日志。</p><p><img src="https://s2.loli.net/2024/01/08/rWRdnbmXkisMvLB.png"><br>发现查看归属的接口也是提示 topic 不存在，此时我便怀疑是 topic 的负载出现了问题，导致这些 topic 没有绑定到具体的 broker。</p><p>于是便重启了 broker，结果依然没有解决问题。<br><img src="https://s2.loli.net/2024/01/08/s3BhMvLCOR7ES2k.png"><br>之后我们查询了 topic 的 internal state 发现元数据中会少一个分区。</p><h1 id="紧急恢复"><a href="#紧急恢复" class="headerlink" title="紧急恢复"></a>紧急恢复</h1><p>我们尝试将这个分区数恢复后，发现这个 topic 就可以正常连接了。</p><p>于是再挑选了几个异常的 topic 发现都是同样的问题，恢复分区数之后也可以正常连接了。</p><p>所以我写了一个工具遍历了所有的 topic，检测分区数是否正常，不正常时便修复。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">checkPartition</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">namespace</span> <span class="operator">=</span> <span class="string">&quot;tenant/ns&quot;</span>;  </span><br><span class="line">    List&lt;String&gt; topicList = pulsarAdmin.topics().getPartitionedTopicList(namespace);  </span><br><span class="line">    <span class="keyword">for</span> (String topic : topicList) &#123;  </span><br><span class="line">        <span class="type">PartitionedTopicStats</span> <span class="variable">stats</span> <span class="operator">=</span> pulsarAdmin.topics().getPartitionedStats(topic, <span class="literal">true</span>);  </span><br><span class="line">        <span class="type">int</span> <span class="variable">partitions</span> <span class="operator">=</span> stats.getMetadata().partitions;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> stats.getPartitions().size();  </span><br><span class="line">        <span class="keyword">if</span> (partitions != size) &#123;  </span><br><span class="line">            log.info(<span class="string">&quot;topic=&#123;&#125;,partitions=&#123;&#125;,size=&#123;&#125;&quot;</span>, topic, partitions, size);  </span><br><span class="line">            pulsarAdmin.topics().updatePartitionedTopic(topic, partitions);  </span><br><span class="line">        &#125;    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h1><p>修复好所有 topic 之后便开始排查根因，因为看到的是元数据不一致所以怀疑是 zk 里的数据和 broker 内存中的数据不同导致的这个问题。</p><p>但我们查看了 zookeeper 中的数据发现一切又是正常的，所以只能转变思路。</p><p>之后我们通过有问题的 topic 在日志中找到了一个关键日志：<br><img src="https://s2.loli.net/2024/01/08/OfazoZRUt8W2ypk.png"><br><img src="https://s2.loli.net/2024/01/08/emZ7BGkcbiS2dpM.png"><br>以及具体的堆栈。</p><p>此时具体的原因已经很明显了，元数据这些自然是没问题；根本原因是 topic 被删除了，但被删除的 topic 只是某个分区，所以我们在查询 <code>internalState</code> 时才发发现少一个 topic。</p><p>通过这个删除日志定位到具体的删除代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.pulsar.broker.service.persistent.PersistentTopic#checkReplication</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/01/08/9Rb1AyHfpGcPqZO.png"><br>原来是这里的  <code>configuredClusters</code> 值为空才导致的 topic 调用了 <code>deleteForcefully()</code>被删除。</p><p>而这个值是从 topic 的 Policy 中获取的。</p><h2 id="复现问题"><a href="#复现问题" class="headerlink" title="复现问题"></a>复现问题</h2><p>通过上图中的堆栈跟踪，怀疑是重启  broker 导致的 topic unload ，同时 broker 又在构建 topic 导致了对 topicPolicy 的读写。</p><p>最终导致 topicPolicy 为空。</p><p>只要写个单测可以复现这个问题就好办了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreateTopicAndUpdatePolicyConcurrent</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">topicNum</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">partition</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (1) Init topic</span></span><br><span class="line">    admin.namespaces().createNamespace(<span class="string">&quot;public/retention&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">topicName</span> <span class="operator">=</span> <span class="string">&quot;persistent://public/retention/policy_with_broker_restart&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; topicNum; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">shadowTopicNames</span> <span class="operator">=</span> topicName + <span class="string">&quot;_&quot;</span> + i;</span><br><span class="line">        admin.topics().createPartitionedTopic(shadowTopicNames, partition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (2) Set Policy</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">90</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">shadowTopicNames</span> <span class="operator">=</span> topicName + <span class="string">&quot;_&quot;</span> + i;</span><br><span class="line">        CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">PublishRate</span> <span class="variable">publishRate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PublishRate</span>();</span><br><span class="line">                publishRate.publishThrottlingRateInMsg = <span class="number">100</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    admin.topicPolicies().setPublishRate(shadowTopicNames, publishRate);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (PulsarAdminException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">90</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">shadowTopicNames</span> <span class="operator">=</span> topicName + <span class="string">&quot;_&quot;</span> + i;</span><br><span class="line">        CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    admin.lookups().lookupPartitionedTopic(shadowTopicNames);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    admin.namespaces().unload(<span class="string">&quot;public/retention&quot;</span>);</span><br><span class="line">    admin.namespaces().unload(<span class="string">&quot;public/retention&quot;</span>);</span><br><span class="line">    admin.namespaces().unload(<span class="string">&quot;public/retention&quot;</span>);</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>* <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; topicNum; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">shadowTopicNames</span> <span class="operator">=</span> topicName + <span class="string">&quot;_&quot;</span> + i;</span><br><span class="line">        log.info(<span class="string">&quot;check topic: &#123;&#125;&quot;</span>, shadowTopicNames);</span><br><span class="line">        <span class="type">PartitionedTopicStats</span> <span class="variable">partitionedStats</span> <span class="operator">=</span> admin.topics().getPartitionedStats(shadowTopicNames, <span class="literal">true</span>);</span><br><span class="line">        Assert.assertEquals(partitionedStats.getPartitions().size(), partition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时还得查询元数据有耗时才能复现：<br><img src="https://s2.loli.net/2024/01/08/2ry5Ife4aTvwxGM.png"></p><blockquote><p>只能手动 sleep 模拟这个耗时</p></blockquote><p>具体也可以参考这个 issue<br><a href="https://github.com/apache/pulsar/issues/21653#issuecomment-1842962452">https://github.com/apache/pulsar/issues/21653#issuecomment-1842962452</a></p><p>此时就会发现有 topic 被删除了，而且是随机删除的，因为出现并发的几率本身也是随机的。</p><p><img src="https://s2.loli.net/2024/01/08/wYSoGHDc7Arp13j.png"></p><p>这里画了一个流程图就比较清晰了，在 broker 重启的时候会有两个线程同时topicPolicy 进行操作。</p><p>在 thread3 读取 topicPolicy 进行判断时，thread2 可能还没有把数据准备好，所以就导致了 topic 被删除。</p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p><img src="https://s2.loli.net/2024/01/08/15iyVmOFe72X6tl.png"><br>既然知道了问题原因就好修复了，我们只需要把 thread3 和 thread2 修改为串行执行就好了。</p><blockquote><p>这也是处理并发最简单高效的方法，就是直接避免并发；加锁、队列啥的虽然也可以解决，但代码复杂度也高了很多，所以能不并发就尽量不要并发。</p></blockquote><p>但要把这个修复推送到社区上游主分支最好是要加上单测，这样即便是后续有其他的改动也能保证这个 bug 不会再次出现。</p><p>之后在社区大佬的帮助下完善了单测，最终合并了这个修复。</p><blockquote><p>再次证明写单测往往比代码更复杂，也更花费时间。</p></blockquote><p>PR：<a href="https://github.com/apache/pulsar/pull/21704">https://github.com/apache/pulsar/pull/21704</a></p><h2 id="使用修复镜像"><a href="#使用修复镜像" class="headerlink" title="使用修复镜像"></a>使用修复镜像</h2><p>因为社区合并代码再发版的周期较长，而我们又急于修复该问题；不然都不敢重启 broker，因为每重启一次都可能会导致不知道哪个 topic 就被删除了。</p><p>所以我们自己在本地构建了一个修复的镜像，准备在线上进行替换。</p><p>此时坑又来了，我们满怀信心的替换了一个镜像再观察日志发现居然还有删除的日志😱。</p><p>冷静下来一分析，原来是当前替换进行的 broker 没有问题了，但它处理的 topic 被转移到了其他 broker 中，而其他的 broker 并没有替换为我们最新的镜像。</p><p>所以导致 topic 在其他 broker 中依然被删除了。</p><blockquote><p>除非我们停机，将所有的镜像都替换之后再一起重启。</p></blockquote><p>但这样的成本太高了，最好是可以平滑发布。</p><p>最终我们想到一个办法，使用 <code>arthas</code> 去关闭了一个 broker 的一个选项，之后就不会执行出现 bug 的那段代码了。</p><p><img src="https://s2.loli.net/2024/01/08/nVrWLYjzs5e9UXw.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://arthas.aliyun.com/arthas-boot.jar &amp;&amp; java -jar arthas-boot.jar 1 -c &quot;vmtool -x 3 --action getInstances --className org.apache.pulsar.broker.ServiceConfiguration  --express &#x27;instances[0].setTopicLevelPoliciesEnabled(false)&#x27;&quot;</span><br></pre></td></tr></table></figure><p>我也将操作方法贴到了对于 issue 的评论区。<br><a href="https://github.com/apache/pulsar/issues/21653#issuecomment-1857548997">https://github.com/apache/pulsar/issues/21653#issuecomment-1857548997</a><br>如果不幸碰到了这个 bug，可以参考修复。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>删除的这些 topic 的同时它的订阅者也被删除了，所以我们还需要修复订阅者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">topicName</span> <span class="operator">=</span> <span class="string">&quot;persistent://tenant/ns/topicName&quot;</span>;  </span><br><span class="line">pulsarTopicService.createSubscription(topicName, <span class="string">&quot;subName&quot;</span>, MessageId.latest);</span><br></pre></td></tr></table></figure><p>之所以说这个 bug 非常致命，是因为这样会导致 topic 的数据丢失，同时这些 topic 上的数据也会被删除。</p><hr><p>后续 <a href="https://github.com/apache/pulsar/pull/21704#issuecomment-1878315926">https://github.com/apache/pulsar/pull/21704#issuecomment-1878315926</a>社区也补充了一些场景。</p><p><img src="https://s2.loli.net/2024/01/08/q4OjXGPtibF8csU.png"></p><blockquote><p>其实场景 2 更容易出现复现，毕竟更容易出现并发；也就是我们碰到的场景</p></blockquote><p>说来也奇怪，结合社区的 issue 和其他大佬的反馈，这个问题只有我们碰到了，估计也是这个问题的触发条件也比较苛刻：</p><ul><li>开启 <code>systemTopic/topicLevelPolices</code><br>  systemTopicEnabled: “true”<br>  topicLevelPoliciesEnabled: “true”</li><li>设置足够多的 topicPolicies</li><li>重启 broker<ul><li>重启过程中从 zk 中获取数据出现耗时</li></ul></li></ul><p>符合以上条件的集群就需要注意了。</p><p>其实这个问题在这个 PR 就已经引入了<br><a href="https://github.com/apache/pulsar/pull/11021">https://github.com/apache/pulsar/pull/11021</a></p><p>所以已经存在蛮久了，后续我们也将检测元数据作为升级流程之一了，确保升级后数据依然是完整的。</p><p>相关的 issue 和 PR：<br><a href="https://github.com/apache/pulsar/issues/21653">https://github.com/apache/pulsar/issues/21653</a><br><a href="https://github.com/apache/pulsar/pull/21704">https://github.com/apache/pulsar/pull/21704</a></p><p>#Blog #Pulsar </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在上一篇 &lt;a href=&quot;https://crossoverjie.top/2024/01/03/ob/Pulsar3.0-new-feature/#topic%E8%A2%AB%E5%88%A0%E9%99%A4&quot;&gt;Pulsar3.0新功能介绍&lt;/a&gt;中提到，在升级到 3.0 的过程中碰到一个致命的问题，就是升级之后 topic 被删除了。&lt;/p&gt;
&lt;p&gt;正好最近社区也补充了相关细节，本次也接着这个机会再次复盘一下，毕竟这是一个非常致命的 Bug。&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    
    <category term="Pulsar" scheme="http://crossoverjie.top/tags/Pulsar/"/>
    
  </entry>
  
  <entry>
    <title>技术阅读周刊第十三期：一些提高生产力的终端命令</title>
    <link href="http://crossoverjie.top/2024/01/05/ob/newsletter/Newsletter12-20240105/"/>
    <id>http://crossoverjie.top/2024/01/05/ob/newsletter/Newsletter12-20240105/</id>
    <published>2024-01-05T09:28:25.000Z</published>
    <updated>2024-01-08T04:01:31.588Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2024/01/05/wU8gPSzaoitBerC.png"></p><p><strong>技术阅读周刊，每周更新。</strong></p><span id="more"></span><h2 id="历史更新"><a href="#历史更新" class="headerlink" title="历史更新"></a>历史更新</h2><ul><li><a href="https://crossoverjie.top/2023/12/01/ob/newsletter/Newsletter08-20231201/">20231201：第八期</a></li><li><a href="https://crossoverjie.top/2023/12/15/ob/newsletter/Newsletter10-20231215/">20231215：第十期</a></li><li><a href="https://crossoverjie.top/2023/12/22/ob/newsletter/Newsletter10-20231222/">20231122：第十一期</a></li><li><a href="https://crossoverjie.top/2023/12/29/ob/newsletter/Newsletter12-20231229/">20231129：第十二期</a><!--more--></li></ul><h2 id="生存还是毁灭？一文带你看懂-Pulsar-的消息保留和过期策略-腾讯云开发者社区-腾讯云"><a href="#生存还是毁灭？一文带你看懂-Pulsar-的消息保留和过期策略-腾讯云开发者社区-腾讯云" class="headerlink" title="生存还是毁灭？一文带你看懂 Pulsar 的消息保留和过期策略-腾讯云开发者社区-腾讯云"></a>生存还是毁灭？一文带你看懂 Pulsar 的消息保留和过期策略-腾讯云开发者社区-腾讯云</h2><p>URL: <a href="https://cloud.tencent.com/developer/article/2245703">https://cloud.tencent.com/developer/article/2245703</a></p><p><img src="https://s2.loli.net/2024/01/05/ZYRxDydaIn2W4jJ.png"></p><blockquote><p>本文分析了 Pulsar 消息的生命周期，主要是如何保留和回收消息</p></blockquote><ul><li>TTL（Time To Live）：使得未 ACK 的消息进入 ACK 状态，供后续回收的时候使用</li><li><strong>Retention</strong>保留策略：默认情况下已经被所有订阅者 ACK 的消息会被立即回收掉，配置保留策略可以保留一定时间、一定数量的 ACK 消息，利用这个时间差可以做消息回查</li><li>Backlog: 未被确认消息的集合，也就是积压消息；也可以配置只保留一定时间、数量的消息，从而减少磁盘压力；当超过我们配置的阈值时，有以下几种选择：<br><img src="https://s2.loli.net/2024/01/04/pdEKHRT4v2fAkBm.png" alt="image.png"></li></ul><h2 id="这些流行的K8S工具，你都用上了吗"><a href="#这些流行的K8S工具，你都用上了吗" class="headerlink" title="这些流行的K8S工具，你都用上了吗"></a>这些流行的K8S工具，你都用上了吗</h2><p>URL: <a href="https://mp.weixin.qq.com/s/EC-YLm71YB4cMDoTjrdfyg">https://mp.weixin.qq.com/s/EC-YLm71YB4cMDoTjrdfyg</a></p><blockquote><p>推荐了一些常用的 kubernetes 管理工具</p></blockquote><p><img src="https://s2.loli.net/2024/01/05/kWbLtETcey9Gmzp.png"></p><ul><li>Helm: kubernetes 平台的必备的包管理工具</li><li>本地运行的 kubernetes 工具：有时候需要在本地进行开发和测试，这类工具就很有用：<ul><li>Docker Desktop</li><li>minikube</li><li>kind</li><li>k3s</li><li>这类工具在ingress、负载均衡、集群外访问等需要单独配置。</li></ul></li><li>集群自动缩放器：用于缩放底层节点<ul><li>一些云服务厂商自动集成了这类功能，如果是自建集群：</li><li>kubernetes Autoscaler</li><li>Karpenter</li></ul></li><li>备份和迁移<ul><li>如果部署了有状态的应用，需要进行数据迁移和备份时，可以使用 <code>velero</code></li></ul></li><li>命令行工具<ul><li>kube-ps1 用于终端的 kubernetes 命令提示</li><li>kubectx 用于在终端进行 集群、namespace 上下文切换</li></ul></li><li>IDE<ul><li>OpenLens 一个客户端可视化 app，用于方便管理 kubernetes 集群</li></ul></li></ul><h2 id="3-Terminal-Commands-to-Increase-Your-Productivity-DEV-Community"><a href="#3-Terminal-Commands-to-Increase-Your-Productivity-DEV-Community" class="headerlink" title="3 Terminal Commands to Increase Your Productivity - DEV Community"></a>3 Terminal Commands to Increase Your Productivity - DEV Community</h2><p>URL: <a href="https://dev.to/pankajgupta221b/3-terminal-commands-to-increase-your-productivity-57dm?ref=dailydev">https://dev.to/pankajgupta221b/3-terminal-commands-to-increase-your-productivity-57dm?ref=dailydev</a></p><blockquote><p>作者介绍了几个常用的可以提高生产力的终端命令</p></blockquote><p><img src="https://s2.loli.net/2024/01/05/9UQjHvpaLEqMldW.png"></p><h3 id="alias-别名"><a href="#alias-别名" class="headerlink" title="alias 别名"></a>alias 别名</h3><p>别名非常好用，以下是我常用的一些别名:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-=&#x27;cd -&#x27;</span><br><span class="line">...=../..</span><br><span class="line">....=../../..</span><br><span class="line">.....=../../../..</span><br><span class="line">......=../../../../..</span><br><span class="line">1=&#x27;cd -&#x27;</span><br><span class="line">2=&#x27;cd -2&#x27;</span><br><span class="line">3=&#x27;cd -3&#x27;</span><br><span class="line">4=&#x27;cd -4&#x27;</span><br><span class="line">5=&#x27;cd -5&#x27;</span><br><span class="line">6=&#x27;cd -6&#x27;</span><br><span class="line">7=&#x27;cd -7&#x27;</span><br><span class="line">8=&#x27;cd -8&#x27;</span><br><span class="line">9=&#x27;cd -9&#x27;</span><br><span class="line">dc=docker</span><br><span class="line">jdk11=&#x27;export JAVA_HOME=~/jdk/jdk-11.0.16.1.jdk/Contents/Home&#x27;</span><br><span class="line">jdk17=&#x27;export JAVA_HOME=~/Users/chenjie/Documents/dev~/jdk/jdk-17.0.1.jdk/Contents/Home/&#x27;</span><br><span class="line">jdk21=&#x27;export JAVA_HOME=~/jdk/jdk-21.0.1.jdk/Contents/Home&#x27;</span><br><span class="line">jdk8=&#x27;export JAVA_HOME=&#x27;</span><br><span class="line">k=kubectl</span><br><span class="line">pp=&#x27;sh hexo-push.sh&#x27;</span><br></pre></td></tr></table></figure><h3 id="pbcopy"><a href="#pbcopy" class="headerlink" title="pbcopy"></a>pbcopy</h3><p>这个在有时候需要 debug 日志或者复制一些长文本到剪贴板里非常有用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xx.properties |grep timeout | pbcopy</span><br></pre></td></tr></table></figure><p>这样就可以把 timeout 这个关键字从文件中复制到粘贴板，我就可以将它复制到其他地方使用。</p><h3 id="反向搜索"><a href="#反向搜索" class="headerlink" title="反向搜索"></a>反向搜索</h3><p>在终端中使用 ctrl+r 就可以根据关键字在历史命令中查找命令，这个在忘记了一些命令但只记得关键字的时候非常有用。<br><img src="https://s2.loli.net/2024/01/05/dfuDG6L2n7h5BNP.png"></p><p>我这里使用的终端是 Warp ，交互上更加好用一些。</p><h3 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h3><p>可以用于显示日历<br><img src="https://s2.loli.net/2024/01/05/5yCL9oKWIrjB2Dc.png"></p><p>文章链接：</p><ul><li><a href="https://cloud.tencent.com/developer/article/2245703">https://cloud.tencent.com/developer/article/2245703</a></li><li><a href="https://mp.weixin.qq.com/s/EC-YLm71YB4cMDoTjrdfyg">https://mp.weixin.qq.com/s/EC-YLm71YB4cMDoTjrdfyg</a></li><li><a href="https://dev.to/pankajgupta221b/3-terminal-commands-to-increase-your-productivity-57dm?ref=dailydev">https://dev.to/pankajgupta221b/3-terminal-commands-to-increase-your-productivity-57dm?ref=dailydev</a></li></ul><p>#Newletters </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2024/01/05/wU8gPSzaoitBerC.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术阅读周刊，每周更新。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    <category term="Newsletter" scheme="http://crossoverjie.top/categories/OB/Newsletter/"/>
    
    
  </entry>
  
  <entry>
    <title>Pulsar3.0新功能介绍</title>
    <link href="http://crossoverjie.top/2024/01/03/ob/Pulsar3.0-new-feature/"/>
    <id>http://crossoverjie.top/2024/01/03/ob/Pulsar3.0-new-feature/</id>
    <published>2024-01-03T15:04:58.000Z</published>
    <updated>2024-01-02T16:41:35.234Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2024/01/03/1QuX3wI6P8hefLa.png" alt="Pulsar3.0-NewFeature.png"></p><p>在上一篇文章 <a href="https://crossoverjie.top/2023/12/24/ob/Pulsar3.0-upgrade/">Pulsar3.0 升级指北</a>讲了关于升级 Pulsar 集群的关键步骤与灾难恢复，本次主要分享一些 <code>Pulsar3.0</code> 的新功能与可能带来的一些问题。</p><h1 id="升级后所遇到的问题"><a href="#升级后所遇到的问题" class="headerlink" title="升级后所遇到的问题"></a>升级后所遇到的问题</h1><p>先来个欲扬先抑，聊聊升级后所碰到的问题吧。</p><p>其中有两个问题我们感知比较明显，特别是第一个。</p><span id="more"></span><h2 id="topic被删除"><a href="#topic被删除" class="headerlink" title="topic被删除"></a>topic被删除</h2><p>我们在上个月某天凌晨从 <code>2.11.2</code> 升级到 <code>3.0.1</code> 之后，进行了上一篇文章中所提到的功能性测试，发现没什么问题，觉得一切都还挺顺利的，半个小时搞定后就下班了。</p><p>结果哪知道第二天是被电话叫醒的，有部分业务反馈业务重启之后就无法连接到 Pulsar 了。</p><p><img src="https://s2.loli.net/2024/01/02/KUAnZ8W65jO3x7d.png" alt="image.png"><br>最终定位是 topic 被删除了。</p><blockquote><p>其中的细节还蛮多的，修复过程也是一波三折，后面我会单独写一篇文章来详细梳理这个过程。</p></blockquote><p>在这个 issue 和 PR 中有详细的描述：<br><a href="https://github.com/apache/pulsar/issues/21653">https://github.com/apache/pulsar/issues/21653</a><br><a href="https://github.com/apache/pulsar/pull/21704">https://github.com/apache/pulsar/pull/21704</a></p><p>感兴趣的朋友也可以先看看。</p><h2 id="监控指标丢失"><a href="#监控指标丢失" class="headerlink" title="监控指标丢失"></a>监控指标丢失</h2><p>第二个问题不是那么严重，是升级后发现  bookkeeper 的一些监控指标丢失了，比如这里的写入延迟：<br><img src="https://s2.loli.net/2024/01/02/9c7qs4CX1lejOIn.png" alt="image.png"><br>我也定位了蛮久，但不管是官方的 docker 镜像还是源码编译都无法复现这个问题。</p><p>最终丢失的指标有这些：</p><ul><li>bookkeeper_server_ADD_ENTRY_REQUEST</li><li>bookkeeper_server_ADD_ENTRY_BLOCKED</li><li>bookkeeper_server_READ_ENTRY_BLOCKED</li><li>bookie_journal_JOURNAL_CB_QUEUE_SIZE</li><li>bookie_read_cache_hits_count</li><li>bookie_read_cache_misses_count</li><li>bookie_DELETED_LEDGER_COUNT</li><li>bookie_MAJOR_COMPACTION_COUNT</li></ul><p>详细内容可以参考这个 issue：<br><a href="https://github.com/apache/pulsar/issues/21766">https://github.com/apache/pulsar/issues/21766</a></p><h1 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h1><p>讲完了遇到的 bug，再来看看带来的新特性，重点介绍我们用得上的特性。</p><h2 id="支持低负载均衡"><a href="#支持低负载均衡" class="headerlink" title="支持低负载均衡"></a>支持低负载均衡</h2><p><img src="https://s2.loli.net/2024/01/02/KVpW4DyNimlMhqH.png" alt="image.png"></p><p>当我们升级或者是重启 broker 的时候，全部重启成功后其实会发现最后重启的那个 broker 是没有流量的。</p><p>这个原理和优化在之前写过的 <a href="https://crossoverjie.top/2023/02/07/pulsar/pulsar-load-banance/#Pulsar-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8E%9F%E7%90%86">Pulsar负载均衡原理及优化</a> 其实有详细介绍。</p><p>本次 3.0 终于将那个优化发版了，之后只要我们配置 <code>lowerBoundarySheddingEnabled: true</code> 就能开启这个低负载均衡的一个特性，使得低负载的 broker 依然有流量进入。</p><h2 id="跳过空洞消息"><a href="#跳过空洞消息" class="headerlink" title="跳过空洞消息"></a>跳过空洞消息</h2><p><img src="https://s2.loli.net/2024/01/02/nj2IyteVUQ79SBZ.png" alt="image.png"><br>Pulsar 可能会因为消息消费异常导致游标出现空洞，从而导致磁盘得不到释放；</p><p>所以我们有一个定时任务，会定期扫描积压消息的 topic 判断是否存在空洞消息，如果存在便可以在管理台使用 skipMessage API 跳过空洞消息，从而释放磁盘。</p><p>但在 3.0 之前这个跳过 API 存在 bug，只要跳过的数量超过 8 时，实际跳过的数量就会小于 8.</p><p>具体 issue 和修复过程在这里：<br><a href="https://github.com/apache/pulsar/issues/20262">https://github.com/apache/pulsar/issues/20262</a><br><a href="https://github.com/apache/pulsar/pull/20326">https://github.com/apache/pulsar/pull/20326</a></p><p>总之这个问题在 3.0 之后也是修复了，有类似需求的朋友也可以使用。</p><h2 id="新的负载均衡器"><a href="#新的负载均衡器" class="headerlink" title="新的负载均衡器"></a>新的负载均衡器</h2><p>同时也支持了一个新的负载均衡器，解决了以下问题：</p><ul><li>以前的负载均衡大量依赖 zk，当 topic 数量增多时对扩展性带来问题。<ul><li>新的负载均衡器使用 <code>non-persistent</code> 来存储负载信息，就不再依赖 zk 。</li></ul></li><li>以前的负载均衡器需要依赖 <code>leader broker</code> 进行重定向到具体的 broker，其实这些重定向并无意义，徒增了系统开销。<ul><li>新的负载均衡器使用了 SystemTopic 来存放 topic 的所有权信息，这样每个 broker 都可以拿到数据，从而不再需要从 leader broker 重定向了。</li></ul></li></ul><p>更多完整信息可以参考这个 PIP: <a href="https://github.com/apache/pulsar/issues/16691">PIP-192: New Pulsar Broker Load Balancer</a></p><h2 id="支持大规模延迟消息"><a href="#支持大规模延迟消息" class="headerlink" title="支持大规模延迟消息"></a>支持大规模延迟消息</h2><p>第二个重大特性是支持大规模延迟消息，相信是有不少企业选择 Pulsar 也是因为他原生就支持延迟消息。</p><p>我们也是大量在业务中使用延迟消息，以往的延迟消息有着以下一些问题：</p><ul><li>内存开销过大，延迟消息的索引都是保存在内存中，即便是可以分布在多个 broker 中分散存储，但消耗依然较大<ul><li>重点优化了索引的内存占有量。</li></ul></li><li>重启 broker 时会消耗大量时候重建索引<ul><li>支持了索引快照，最大限度的降低了构建索引的资源消耗。</li></ul></li></ul><h1 id="待优化功能"><a href="#待优化功能" class="headerlink" title="待优化功能"></a>待优化功能</h1><h2 id="监控面板优化"><a href="#监控面板优化" class="headerlink" title="监控面板优化"></a>监控面板优化</h2><p>最后即便是升级到了 3.0 依然还有一些待优化的功能，在之前的 <a href="https://crossoverjie.top/2023/08/03/ob/Pulsar-Client/">从 Pulsar Client 的原理到它的监控面板</a>中有提到给客户端加了一些监控埋点信息。</p><p>最终使用下来发现还缺一个 ack 耗时的一个面板，其实日常碰到最多的问题就是突然不能消费了（或者消费过慢）。</p><p>这时如果有这样的耗时面板，首先就可以定位出是否是消费者本身的问题。</p><p><img src="https://s2.loli.net/2024/01/03/YFoy4PfnRbz72qX.png" alt="image.png"><br>目前还在开发中，大概类似于这样的数据。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Pulsar3.0 是 Pulsar 的第一个 LTS 版本，推荐尽快升级可以获得长期支持。<br>但只要是软件就会有 bug，即便是 LTS 版本，所以大家日常使用碰到 Bug 建议多向社区反馈，一起推动 Pulsar 的进步。</p><p>#Blog #Pulsar </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2024/01/03/1QuX3wI6P8hefLa.png&quot; alt=&quot;Pulsar3.0-NewFeature.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在上一篇文章 &lt;a href=&quot;https://crossoverjie.top/2023/12/24/ob/Pulsar3.0-upgrade/&quot;&gt;Pulsar3.0 升级指北&lt;/a&gt;讲了关于升级 Pulsar 集群的关键步骤与灾难恢复，本次主要分享一些 &lt;code&gt;Pulsar3.0&lt;/code&gt; 的新功能与可能带来的一些问题。&lt;/p&gt;
&lt;h1 id=&quot;升级后所遇到的问题&quot;&gt;&lt;a href=&quot;#升级后所遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;升级后所遇到的问题&quot;&gt;&lt;/a&gt;升级后所遇到的问题&lt;/h1&gt;&lt;p&gt;先来个欲扬先抑，聊聊升级后所碰到的问题吧。&lt;/p&gt;
&lt;p&gt;其中有两个问题我们感知比较明显，特别是第一个。&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    
    <category term="Pulsar" scheme="http://crossoverjie.top/tags/Pulsar/"/>
    
  </entry>
  
  <entry>
    <title>技术阅读周刊第十二期</title>
    <link href="http://crossoverjie.top/2023/12/29/ob/newsletter/Newsletter12-20231229/"/>
    <id>http://crossoverjie.top/2023/12/29/ob/newsletter/Newsletter12-20231229/</id>
    <published>2023-12-29T09:28:25.000Z</published>
    <updated>2023-12-29T06:10:06.808Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/12/29/t1FmIn4i6HAOoDB.png" alt="image.png"></p><p><strong>技术阅读周刊，每周更新。</strong></p><span id="more"></span><h2 id="历史更新"><a href="#历史更新" class="headerlink" title="历史更新"></a>历史更新</h2><ul><li><a href="https://crossoverjie.top/2023/12/01/ob/newsletter/Newsletter08-20231201/">20231201：第八期</a></li><li><a href="https://crossoverjie.top/2023/12/15/ob/newsletter/Newsletter10-20231215/">20231215：第十期</a></li><li><a href="https://crossoverjie.top/2023/12/22/ob/newsletter/Newsletter10-20231222/">20231122：第十一期</a><!--more--></li></ul><h2 id="Deno-vs-Go-Native-hello-world-performance-Tech-Tonic"><a href="#Deno-vs-Go-Native-hello-world-performance-Tech-Tonic" class="headerlink" title="Deno vs Go: Native hello world performance | Tech Tonic"></a>Deno vs Go: Native hello world performance | Tech Tonic</h2><p>URL: <a href="https://medium.com/deno-the-complete-reference/deno-vs-go-native-hello-world-performance-c57d8fc13c75">https://medium.com/deno-the-complete-reference/deno-vs-go-native-hello-world-performance-c57d8fc13c75</a></p><blockquote><p>使用 Deno 和 Go 进行基本的接口对比</p></blockquote><ul><li>MacBook Pro M2 with 16GB of RAM</li><li><code>Deno</code> v1.38.0</li><li>Go v1.21.3</li></ul><p>都是最简单的 httpServer:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Deno</span>.<span class="title function_">serve</span>(&#123;</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">&#125;, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> pathName = <span class="keyword">new</span> <span class="title function_">URL</span>(req.<span class="property">url</span>).<span class="property">pathname</span>;</span><br><span class="line">    <span class="keyword">if</span> (pathName !== <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="literal">null</span>, &#123; <span class="attr">status</span>: <span class="number">404</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="literal">null</span>, &#123; <span class="attr">status</span>: <span class="number">500</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;io&quot;</span></span><br><span class="line">  <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  http.HandleFunc(<span class="string">&quot;/&quot;</span>, helloWorld)</span><br><span class="line">  http.ListenAndServe(<span class="string">&quot;:3000&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloWorld</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">  io.WriteString(w, <span class="string">&quot;Hello world!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/25/6GdkNpm8V7azrtR.png" alt="image.png"></p><p>总的来说 Deno 比 Go 慢了 30% 左右，但 CPU 占有率比 Go 更少，Go 的内存占用更低。</p><blockquote><p>这个对比就图一乐。</p></blockquote><h2 id="Top-7-Spring-Boot-Design-Patterns-Unveiled-by-Dharmendra-Awasthi-Dec-2023-Stackademic"><a href="#Top-7-Spring-Boot-Design-Patterns-Unveiled-by-Dharmendra-Awasthi-Dec-2023-Stackademic" class="headerlink" title="Top 7 Spring Boot Design Patterns Unveiled | by Dharmendra Awasthi | Dec, 2023 | Stackademic"></a>Top 7 Spring Boot Design Patterns Unveiled | by Dharmendra Awasthi | Dec, 2023 | Stackademic</h2><p>URL: <a href="https://blog.stackademic.com/top-7-spring-boot-design-patterns-unveiled-4a2569f8d324">https://blog.stackademic.com/top-7-spring-boot-design-patterns-unveiled-4a2569f8d324</a></p><blockquote><p>7 个我们可以学习的 Spring Boot 的设计模式</p></blockquote><h3 id="Singleton-Pattern-单例模式"><a href="#Singleton-Pattern-单例模式" class="headerlink" title="Singleton Pattern 单例模式"></a><code>Singleton Pattern</code> 单例模式</h3><p>这个没啥好说的，面试都被讲烂了，依然很经典。<br>当我们使用这些注解声明一个 Bean 时<code>@Component</code>, <code>@Service</code>, <code>@Repository</code>, or <code>@Controller</code>，就会被创建一个单例对象注入到 IOC 容器中。</p><h3 id="Factory-Pattern-工厂模式"><a href="#Factory-Pattern-工厂模式" class="headerlink" title="Factory Pattern 工厂模式"></a>Factory Pattern 工厂模式</h3><p>Spring 也提供了工厂模式的接口，我们可以自定义创建逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;MyBean&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MyBean <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// Custom logic to create and return MyBean instance</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> MyBean.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// Or false, depending on your bean&#x27;s scope</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Builder-创建者模式"><a href="#Builder-创建者模式" class="headerlink" title="Builder 创建者模式"></a>Builder 创建者模式</h3><p>这个其实不算是 Spring 所提供的，但确实很好用；通常用于创建需要很多可选参数的对象时使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">// Other fields</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> User.builder()</span><br><span class="line">    .username(<span class="string">&quot;john_doe&quot;</span>)</span><br><span class="line">    .email(<span class="string">&quot;john@example.com&quot;</span>)</span><br><span class="line">    .age(<span class="number">30</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><h3 id="Proxy-代理模式"><a href="#Proxy-代理模式" class="headerlink" title="Proxy 代理模式"></a>Proxy 代理模式</h3><p>代理模式在 spring 中通常用于 AOP 切面，可以实现一些通用的非业务逻辑功能；比如日志、缓存、安全检测等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingAspect</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.example.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeServiceMethods</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Logic to be executed before service methods</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Logging before service methods...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Observe-观察者模式"><a href="#Observe-观察者模式" class="headerlink" title="Observe 观察者模式"></a>Observe 观察者模式</h3><p>本质上是将业务解耦，生产者发布事件，订阅者接收事件，只是 spring 帮我们封装好了逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderPlacedEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Order order;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderPlacedEvent</span><span class="params">(Object source, Order order)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">        <span class="built_in">this</span>.order = order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getters for order information</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationEventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderService</span><span class="params">(ApplicationEventPublisher eventPublisher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventPublisher = eventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">placeOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        <span class="comment">// Logic to place order</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Publish OrderPlacedEvent</span></span><br><span class="line">        eventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">OrderPlacedEvent</span>(<span class="built_in">this</span>, order));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.EventListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendEmailOnOrderPlacement</span><span class="params">(OrderPlacedEvent event)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> event.getOrder();</span><br><span class="line">        <span class="comment">// Logic to send email based on the placed order</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转转一体化监控系统——Prometheus·Grafana成本治理-TakinTalks稳定性技术交流平台"><a href="#转转一体化监控系统——Prometheus·Grafana成本治理-TakinTalks稳定性技术交流平台" class="headerlink" title="转转一体化监控系统——Prometheus·Grafana成本治理_TakinTalks稳定性技术交流平台"></a>转转一体化监控系统——Prometheus·Grafana成本治理_TakinTalks稳定性技术交流平台</h2><p>URL: <a href="https://news.shulie.io/?p=8229">https://news.shulie.io/?p=8229</a><br><img src="https://s2.loli.net/2023/12/29/WSl4PQDKh9g3Hiu.png" alt="image.png"></p><p>链接里有 B 站视频，文字版链接：<a href="https://mp.weixin.qq.com/s/FySeVBL7EfihOlNDBvAPpw">https://mp.weixin.qq.com/s/FySeVBL7EfihOlNDBvAPpw</a></p><blockquote><p>转转的监控方案</p></blockquote><ul><li>基于 Prometheus 架构（确实已经是监控领域的标准了）</li><li>使用 <strong>M3DB</strong> 替换了单机的 Prometheus。<ul><li>我们使用 VM 替换的 Prometheus，转转没有选择 VM 是因为 M3DB 的压缩率更高。</li></ul></li><li>采用 Push 模型推送数据<ul><li>由 SDK 进行推送，对业务无感知</li><li>省略了注册中心，改为了数据库存储服务节点信息。<ul><li>由于我们使用了 <code>kubernetes</code>，所以是基于 kubernetes 的 SD 实现的服务发现。</li><li>所以我们采用的也是 Pull 拉取模型</li></ul></li></ul></li><li>重写了告警系统，Prometheus 自带的告警系统存在学习难度大等问题。</li></ul><p>文章链接：</p><ul><li><a href="https://medium.com/deno-the-complete-reference/deno-vs-go-native-hello-world-performance-c57d8fc13c75">https://medium.com/deno-the-complete-reference/deno-vs-go-native-hello-world-performance-c57d8fc13c75</a></li><li><a href="https://blog.stackademic.com/top-7-spring-boot-design-patterns-unveiled-4a2569f8d324">https://blog.stackademic.com/top-7-spring-boot-design-patterns-unveiled-4a2569f8d324</a></li><li><a href="https://news.shulie.io/?p=8229">https://news.shulie.io/?p=8229</a></li></ul><p>#Newletters </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/12/29/t1FmIn4i6HAOoDB.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术阅读周刊，每周更新。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    <category term="Newsletter" scheme="http://crossoverjie.top/categories/OB/Newsletter/"/>
    
    
  </entry>
  
  <entry>
    <title>Pulsar3.0 升级指北</title>
    <link href="http://crossoverjie.top/2023/12/24/ob/Pulsar3.0-upgrade/"/>
    <id>http://crossoverjie.top/2023/12/24/ob/Pulsar3.0-upgrade/</id>
    <published>2023-12-24T09:08:27.000Z</published>
    <updated>2023-12-28T02:14:11.229Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/12/24/4EVJDOaxl1WI3j9.png" alt="Pulsar3.0-upgrade.png"></p><h1 id="Pulsar3-0-介绍"><a href="#Pulsar3-0-介绍" class="headerlink" title="Pulsar3.0 介绍"></a>Pulsar3.0 介绍</h1><p>Pulsar3.0 是 Pulsar 社区推出的第一个 LTS 长期支持版本。</p><p><img src="https://s2.loli.net/2023/12/22/RL2AvFCQiIseMxH.png" alt="image.png"></p><p>如图所示，LTS 版本会最长支持到 36 个月，而 Feature 版本最多只有六个月；类似于我们使用的 <code>JDK11,17,21</code> 都是可以长期使用的；所以也推荐大家都升级到 LTS 版本。</p><hr><p>作为首个 LTS 版本，3.0 自然也是自带了许多新特性，这个会在后续介绍。</p><span id="more"></span><h1 id="升级指南"><a href="#升级指南" class="headerlink" title="升级指南"></a>升级指南</h1><p>先来看看升级指南：<br><img src="https://s2.loli.net/2023/12/24/ZAc2845LvhsBHfx.png" alt="image.png"><br>在官方的兼容表中会发现：不推荐跨版本升级。</p><p>也就是说如果你现在还在使用的是 2.10.x，那么推荐是先升级到 2.11.x 然后再升级到 3.0.x.</p><p>而且根据我们的使用经验来看，首个版本是不保险的，即便是 LTS 版本；<br>所以不推荐直接升级到 3.0.0，而是更推荐 3.0.1+，这个小版本会修复 3.0 所带来的一些 bug。</p><p>先讲一下我们的升级流程，大家可以用做参考。</p><h2 id="升级前准备"><a href="#升级前准备" class="headerlink" title="升级前准备"></a>升级前准备</h2><p>根据我们的使用场景，为了以防万一，首先需要将我们的插件依赖升级到对应的版本。<br><img src="https://s2.loli.net/2023/12/24/8NzRJUrBWqKPkm9.png" alt="image.png"><br>其实简单来说就是更新下依赖，然后再重新打包，在后续的流程进行测试。</p><h3 id="预热镜像"><a href="#预热镜像" class="headerlink" title="预热镜像"></a>预热镜像</h3><p>之后是预热镜像，我们使用 <code>harbor</code> 搭建了自己的 docker 镜像仓库，这样在升级重启镜像的时候可以更快的从内网拉取镜像。</p><blockquote><p>毕竟一个 pulsar-all 的镜像也不小，尽量的缩短启动时间。</p></blockquote><p>预热的过程也很简单：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker pull apachepulsar/pulsar-all:3.0.1</span><br><span class="line"></span><br><span class="line">docker tag apachepulsar/pulsar-all:3.0.1 harbor-private.xx.com/pulsar/pulsar-all:3.0.1</span><br><span class="line"></span><br><span class="line">docker image push harbor-private.xx.com/pulsar/pulsar-all:3.0.1</span><br></pre></td></tr></table></figure><p>之后升级的时候就可以使用私服的镜像了。</p><h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h2><p>我这边有写了一个 <code>cli</code> 可以帮我快速创建或升级一个集群，然后触发我所编写的功能测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./pulsar-upgrade-cli upgrade pulsar-test ./charts/pulsar --version x.x.x -f charts/pulsar/values.yaml -n pulsar-test</span><br></pre></td></tr></table></figure><p>这个 cli 很简单，一共就做三件事：</p><ul><li>使用 helm 接口升级集群</li><li>等待所有的 Pod 都升级成功</li><li>触发功能测试</li></ul><p>之后的效果如下：<br><img src="https://s2.loli.net/2023/12/24/m85XPGr9nLqtp17.png" alt="image.png"></p><p>主要就是覆盖了我们的使用场景，都跑通过之后才会走后续的流程。</p><h2 id="运行监控"><a href="#运行监控" class="headerlink" title="运行监控"></a>运行监控</h2><p><img src="https://s2.loli.net/2023/12/24/2iDHdwPB4UJXsGh.png" alt="image.png"></p><p>之后会启动一个 200 左右的并发生产和消费数据，模拟线上的使用情况，会一直让这个任务跑着，大概一晚上就可以了，第二天通过监控查看：</p><ul><li>应用有无异常日志</li><li>流量是否正常</li><li>各个组件的内存占用</li><li>写入延迟等信息</li></ul><h2 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h2><p>组件的升级步骤这里参考了官方指南：<br><a href="https://pulsar.apache.org/docs/3.1.x/administration-upgrade/#upgrade-zookeeper-optional">https://pulsar.apache.org/docs/3.1.x/administration-upgrade/#upgrade-zookeeper-optional</a><br><img src="https://s2.loli.net/2023/12/24/9dXxSTOwb8lFm1v.png" alt="image.png"></p><ul><li>升级ZK</li><li>关闭auto recovery</li><li>升级Bookkeeper</li><li>升级Broker</li><li>升级Proxy</li><li>开启auto recovery</li></ul><p>只要一步步按照这个流程走，问题不大，哪一步出现问题后需要及时回滚，回滚流程参考下面的回滚部分。</p><p>同时在升级过程中需要一直查看 broker 的 error 日志，如果有明显的不符合预期的日志一定要注意。</p><blockquote><p>在升级  bookkeeper 的时候，broker 可能会出现 bk 连接失败的异常，这个可以不用在意。</p></blockquote><h2 id="线上验证"><a href="#线上验证" class="headerlink" title="线上验证"></a>线上验证</h2><p>都升级完后就是线上业务验证环节了：</p><ul><li><input checked="" disabled="" type="checkbox"> 查看监控面板，是否有明显的流量、内存、延迟的异常指标。 ✅ 2023-12-24</li><li><input checked="" disabled="" type="checkbox"> topic 元数据完整性验证：这个是因为我们这次升级出了一个 topic 被删除的 bug，所以需要重点验证下；这部分会在下次详细分析。 ✅ 2023-12-24</li><li><input checked="" disabled="" type="checkbox"> 查看业务消息收发有无异常 ✅ 2023-12-24</li><li><input checked="" disabled="" type="checkbox"> 链路查询是否正常，我们有一个消息链路查询的页面，主要是使用 <code>Pulsar-SQL</code> 和 <code>broker-interceptor</code> 实现的。 ✅ 2023-12-24</li></ul><h2 id="异常回滚"><a href="#异常回滚" class="headerlink" title="异常回滚"></a>异常回滚</h2><p>当出现异常的时候需要立即回滚，这里的异常一般就是消息收发异常，客户端掉线等。</p><p>经过我的测试 3.0.x 的存储和之前的版本是兼容的，所以 <code>bookkeeper</code> 都能降级其他的组件就没啥可担心的了。</p><p>需要降级时直接将所有组件降级为上一个版本即可。</p><h2 id="灾难恢复"><a href="#灾难恢复" class="headerlink" title="灾难恢复"></a>灾难恢复</h2><p>因为是从 2.x 升级到 3.x 也是涉及到了跨大版本，所以也准备了灾难恢复的方案。</p><blockquote><p>比如极端情况下升级失败，所有数据丢失的情况。</p></blockquote><p>整个灾难恢复的主要目的就是恢复后的集群对外提供的域名不发生变化，同时所有的客户端可以自动重连上来，也就是最坏的情况下所有的数据丢了可以接受，但不能影响业务正常使用。</p><p>所以我们的流程如下：</p><h3 id="备份-topic"><a href="#备份-topic" class="headerlink" title="备份 topic"></a>备份 topic</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span>  </span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backup</span><span class="params">()</span>&#123;  </span><br><span class="line">    List&lt;String&gt; topicList = pulsarAdmin.topics().getPartitionedTopicList(<span class="string">&quot;tenant/namespace&quot;</span>);  </span><br><span class="line">    log.info(<span class="string">&quot;topic size=&#123;&#125;&quot;</span>,topicList.size());  </span><br><span class="line">    <span class="comment">// create a custom thread pool  </span></span><br><span class="line">    CopyOnWriteArrayList&lt;TopicMeta&gt; dataList = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();  </span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">customThreadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);  </span><br><span class="line">    <span class="keyword">for</span> (String topicName : topicList) &#123;  </span><br><span class="line">        customThreadPool.execute(()-&gt; &#123;  </span><br><span class="line">            PartitionedTopicMetadata metadata;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                metadata = pulsarAdmin.topics().getPartitionedTopicMetadata(topicName);  </span><br><span class="line">                <span class="type">TopicMeta</span> <span class="variable">topicMeta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TopicMeta</span>();  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">// backup topic  </span></span><br><span class="line">                topicMeta.setName(topicName);  </span><br><span class="line">                topicMeta.setPartition(metadata.partitions);  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">// backup permission  </span></span><br><span class="line">                Map&lt;String, Set&lt;AuthAction&gt;&gt; permissions = pulsarAdmin.topics().getPermissions(topicName);  </span><br><span class="line">                topicMeta.setPermissions(permissions);  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">// back sub  </span></span><br><span class="line">                List&lt;String&gt; subscriptions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">                <span class="type">PartitionedTopicStats</span> <span class="variable">topicStats</span> <span class="operator">=</span> pulsarAdmin.topics().getPartitionedStats(topicName, <span class="literal">true</span>);  </span><br><span class="line">                topicStats.getSubscriptions().forEach((k,v)-&gt; subscriptions.add(k));  </span><br><span class="line">                topicMeta.setSubscriptions(subscriptions);  </span><br><span class="line">  </span><br><span class="line">                dataList.add(topicMeta);  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (PulsarAdminException e) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125;        &#125;);    &#125;  </span><br><span class="line">    customThreadPool.shutdown();  </span><br><span class="line">    <span class="keyword">while</span> (!customThreadPool.isTerminated()) &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">    log.info(<span class="string">&quot;&#123;&#125;&quot;</span>,dataList.size());  </span><br><span class="line">    log.info(<span class="string">&quot;&#123;&#125;&quot;</span>,JSONUtil.toJsonStr(dataList));  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// TopicMetaData</span></span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicMeta</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> partition;  </span><br><span class="line">    Map&lt;String, Set&lt;AuthAction&gt;&gt; permissions;  </span><br><span class="line">    List&lt;String&gt; subscriptions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一步是备份 topic：</p><ul><li>topic 主要是名称和分区数量</li><li>备份权限</li><li>备份 topic 的订阅者</li></ul><h3 id="公私钥备份"><a href="#公私钥备份" class="headerlink" title="公私钥备份"></a>公私钥备份</h3><p>因为我们客户端使用了 JWT 验证，所有为了使得恢复的 Pulsar 集群可以让客户端无缝切换到新集群，因此必须得使用相同的公私钥。</p><p>这个其实比较简单，我们使用的是 helm 安装的集群，所以只需要备份好 <code>Secret</code> 即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>  </span><br><span class="line"><span class="attr">data:</span>  </span><br><span class="line">  <span class="attr">PRIVATEKEY:</span> <span class="string">XXX</span>  </span><br><span class="line">  <span class="attr">PUBLICKEY:</span> <span class="string">XXX</span> </span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span>  </span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">pulsar-token-asymmetric-key</span>  </span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">pulsar</span>  </span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 还有几个 superUser 的 Secret</span></span><br></pre></td></tr></table></figure><h3 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h3><h4 id="创建新集群"><a href="#创建新集群" class="headerlink" title="创建新集群"></a>创建新集群</h4><p>首先使用 helm 重新创建一个新集群：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./scripts/pulsar/prepare_helm_release.sh -n pulsar -k pulsar</span><br><span class="line"></span><br><span class="line">helm install \    --values charts/pulsar/values.yaml \    --set namespace=pulsar\  </span><br><span class="line">    --set initialize=true \  </span><br><span class="line">    pulsar ./charts/pulsar -n pulsar</span><br></pre></td></tr></table></figure><h4 id="恢复公私钥"><a href="#恢复公私钥" class="headerlink" title="恢复公私钥"></a>恢复公私钥</h4><p>直接使用刚才备份的公私钥覆盖到新集群即可。</p><h4 id="恢复namespace"><a href="#恢复namespace" class="headerlink" title="恢复namespace"></a>恢复namespace</h4><p>进入 toolset pod 创建需要使用的 <code>tenant/namespace</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">k exec -it pulsar-toolset-0 -n pulsar bash</span><br><span class="line"></span><br><span class="line">bin/pulsar-admin tenants create tenant</span><br><span class="line"></span><br><span class="line">bin/pulsar-admin namespaces create tenant/namespace</span><br></pre></td></tr></table></figure><h4 id="元数据恢复"><a href="#元数据恢复" class="headerlink" title="元数据恢复"></a>元数据恢复</h4><p>之后便是最重要的元数据恢复了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span>  </span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">restore</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="type">PulsarAdmin</span> <span class="variable">pulsarAdmin</span> <span class="operator">=</span> PulsarAdmin.builder().serviceHttpUrl(<span class="string">&quot;http://url:8080&quot;</span>)  </span><br><span class="line">            .authentication(AuthenticationFactory.token(token))  </span><br><span class="line">            .build();  </span><br><span class="line">    <span class="type">Path</span> <span class="variable">filePath</span> <span class="operator">=</span> Path.of(<span class="string">&quot;restore-ns.json&quot;</span>);  </span><br><span class="line">    <span class="type">String</span> <span class="variable">fileContent</span> <span class="operator">=</span> Files.readString(filePath);  </span><br><span class="line">    List&lt;TopicMeta&gt; topicMetaList = JSON.parseArray(fileContent, TopicMeta.class);  </span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">customThreadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">50</span>);  </span><br><span class="line">    <span class="keyword">for</span> (TopicMeta topicMeta : topicMetaList) &#123;  </span><br><span class="line">        customThreadPool.execute(() -&gt; &#123;  </span><br><span class="line">            <span class="comment">// Create topic  </span></span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                pulsarAdmin.topics().createPartitionedTopic(topicMeta.getName(), topicMeta.getPartition());  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (PulsarAdminException e) &#123;  </span><br><span class="line">                log.error(<span class="string">&quot;Create topic error&quot;</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="comment">// Create sub  </span></span><br><span class="line">            <span class="keyword">for</span> (String subscription : topicMeta.getSubscriptions()) &#123;  </span><br><span class="line">                <span class="keyword">try</span> &#123;  </span><br><span class="line">                    pulsarAdmin.topics().createSubscription(topicMeta.getName(), subscription, MessageId.latest);  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (PulsarAdminException e) &#123;  </span><br><span class="line">                    log.error(<span class="string">&quot;createSubscription error&quot;</span>);  </span><br><span class="line">                &#125;            &#125;  </span><br><span class="line">            <span class="comment">// Grant permission  </span></span><br><span class="line">            topicMeta.getPermissions().forEach((role, authActions) -&gt; &#123;  </span><br><span class="line">                permission(pulsarAdmin, topicMeta.getName(), role, authActions);  </span><br><span class="line">            &#125;);  </span><br><span class="line">            log.info(<span class="string">&quot;topic:&#123;&#125; restore success&quot;</span>, topicMeta.getName());  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        &#125;);    &#125;  </span><br><span class="line">    customThreadPool.shutdown();  </span><br><span class="line">    <span class="keyword">while</span> (!customThreadPool.isTerminated()) &#123;  </span><br><span class="line">    &#125;    log.info(<span class="string">&quot;restore success&quot;</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">permission</span><span class="params">(PulsarAdmin pulsarAdmin, String topic, String role, Set&lt;AuthAction&gt; authActions)</span> &#123;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        pulsarAdmin.topics().grantPermission(topic, role, authActions);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (PulsarAdminException e) &#123;  </span><br><span class="line">        log.error(<span class="string">&quot;grantPermission error&quot;</span>, e);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程和备份类似：</p><ul><li>创建分区 topic</li><li>创建订阅者</li><li>授权角色信息</li></ul><p>因为授权接口限制了并发调用，所有需要加锁，导致整个恢复的流程就会比较慢。</p><p>8000 topic 的 namespace 大概恢复时间为 40min 左右。</p><p>之后依次恢复其他 namespace 即可。</p><h4 id="恢复-police"><a href="#恢复-police" class="headerlink" title="恢复 police"></a>恢复 police</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin.namespaces().setNamespaceMessageTTL(<span class="string">&quot;tenant/namespace&quot;</span>, <span class="number">3600</span> * <span class="number">6</span>);</span><br><span class="line">admin.namespaces().setBacklogQuota(<span class="string">&quot;tenant/namespace&quot;</span>, BacklogQuota)</span><br></pre></td></tr></table></figure><p>如果之前的集群有设置 TTL 或者是 backlogQuota 时都需要手动恢复。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是整个升级和灾难恢复的流程，当然灾难恢复希望大家不要碰到。</p><p>我会在下一篇详细介绍 <code>Pulsar 3.0</code> 的新功能以及所碰到的一些坑。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/12/24/4EVJDOaxl1WI3j9.png&quot; alt=&quot;Pulsar3.0-upgrade.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Pulsar3-0-介绍&quot;&gt;&lt;a href=&quot;#Pulsar3-0-介绍&quot; class=&quot;headerlink&quot; title=&quot;Pulsar3.0 介绍&quot;&gt;&lt;/a&gt;Pulsar3.0 介绍&lt;/h1&gt;&lt;p&gt;Pulsar3.0 是 Pulsar 社区推出的第一个 LTS 长期支持版本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/12/22/RL2AvFCQiIseMxH.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;如图所示，LTS 版本会最长支持到 36 个月，而 Feature 版本最多只有六个月；类似于我们使用的 &lt;code&gt;JDK11,17,21&lt;/code&gt; 都是可以长期使用的；所以也推荐大家都升级到 LTS 版本。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;作为首个 LTS 版本，3.0 自然也是自带了许多新特性，这个会在后续介绍。&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    
    <category term="Pulsar" scheme="http://crossoverjie.top/tags/Pulsar/"/>
    
  </entry>
  
  <entry>
    <title>技术阅读周刊第十一期</title>
    <link href="http://crossoverjie.top/2023/12/22/ob/newsletter/Newsletter10-20231222/"/>
    <id>http://crossoverjie.top/2023/12/22/ob/newsletter/Newsletter10-20231222/</id>
    <published>2023-12-22T09:28:25.000Z</published>
    <updated>2023-12-23T08:19:14.951Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/12/23/VibnQF1pM2K6fsd.png" alt="image.png"></p><p><strong>技术阅读周刊，每周更新。</strong></p><span id="more"></span><h2 id="历史更新"><a href="#历史更新" class="headerlink" title="历史更新"></a>历史更新</h2><ul><li><a href="https://crossoverjie.top/2023/11/24/ob/newsletter/Newsletter07-20231124/">20231124：第七期</a></li><li><a href="https://crossoverjie.top/2023/12/01/ob/newsletter/Newsletter08-20231201/">20231201：第八期</a></li><li><a href="https://crossoverjie.top/2023/12/15/ob/newsletter/Newsletter10-20231215/">20231215：第十期</a><!--more--></li></ul><h2 id="A-Comprehensive-guide-to-Spring-Boot-3-2-with-Java-21-Virtual-Threads-Spring-Security-PostgreSQL-Flyway-Caching-Micrometer-Opentelemetry-JUnit-5-RabbitMQ-Keycloak-Integration-and-More-10-x2F-17-by-Jonathan-Chevalier-Nov-2023-Medium"><a href="#A-Comprehensive-guide-to-Spring-Boot-3-2-with-Java-21-Virtual-Threads-Spring-Security-PostgreSQL-Flyway-Caching-Micrometer-Opentelemetry-JUnit-5-RabbitMQ-Keycloak-Integration-and-More-10-x2F-17-by-Jonathan-Chevalier-Nov-2023-Medium" class="headerlink" title="A Comprehensive guide to Spring Boot 3.2 with Java 21, Virtual Threads, Spring Security, PostgreSQL, Flyway, Caching, Micrometer, Opentelemetry, JUnit 5, RabbitMQ, Keycloak Integration, and More! (10&#x2F;17) | by Jonathan Chevalier | Nov, 2023 | Medium"></a>A Comprehensive guide to Spring Boot 3.2 with Java 21, Virtual Threads, Spring Security, PostgreSQL, Flyway, Caching, Micrometer, Opentelemetry, JUnit 5, RabbitMQ, Keycloak Integration, and More! (10&#x2F;17) | by Jonathan Chevalier | Nov, 2023 | Medium</h2><p>URL: <a href="https://medium.com/@jojoooo/exploring-a-base-spring-boot-application-with-java-21-virtual-thread-spring-security-flyway-c0fde13c1eca#551c">https://medium.com/@jojoooo/exploring-a-base-spring-boot-application-with-java-21-virtual-thread-spring-security-flyway-c0fde13c1eca#551c</a></p><blockquote><p>本文讲解了基于最新的 Spring Boot3.2 和 Java 21 所使用到的技术栈</p></blockquote><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>数据库使用 <code>Postgres15</code> 和 flyway 来管理数据库 schema 的迁移。<br><img src="https://s2.loli.net/2023/12/20/nNEkQpBhHfe6VWb.png" alt="image.png"></p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>Spring6 实现了新的 <a href="https://datatracker.ietf.org/doc/html/rfc9457#name-members-of-a-problem-detail">RFC9457</a>规范，实现以下接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> <span class="keyword">extends</span> <span class="title class_">ResponseEntityExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Process @Valid</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> ResponseEntity&lt;Object&gt; <span class="title function_">handleMethodArgumentNotValid</span><span class="params">(</span></span><br><span class="line"><span class="params">      <span class="meta">@NonNull</span> <span class="keyword">final</span> MethodArgumentNotValidException ex,</span></span><br><span class="line"><span class="params">      <span class="meta">@NonNull</span> <span class="keyword">final</span> HttpHeaders headers,</span></span><br><span class="line"><span class="params">      <span class="meta">@NonNull</span> <span class="keyword">final</span> HttpStatusCode status,</span></span><br><span class="line"><span class="params">      <span class="meta">@NonNull</span> <span class="keyword">final</span> WebRequest request)</span> &#123;</span><br><span class="line">    log.info(ex.getMessage(), ex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> List&lt;ApiErrorDetails&gt; errors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> ObjectError err : ex.getBindingResult().getAllErrors()) &#123;</span><br><span class="line">      errors.add(</span><br><span class="line">          ApiErrorDetails.builder()</span><br><span class="line">              .pointer(((FieldError) err).getField())</span><br><span class="line">              .reason(err.getDefaultMessage())</span><br><span class="line">              .build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(BAD_REQUEST)</span><br><span class="line">        .body(<span class="built_in">this</span>.buildProblemDetail(BAD_REQUEST, <span class="string">&quot;Validation failed.&quot;</span>, errors));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ProblemDetail <span class="title function_">buildProblemDetail</span><span class="params">(</span></span><br><span class="line"><span class="params">      <span class="keyword">final</span> HttpStatus status, <span class="keyword">final</span> String detail, <span class="keyword">final</span> List&lt;ApiErrorDetails&gt; errors)</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">final</span> <span class="type">ProblemDetail</span> <span class="variable">problemDetail</span> <span class="operator">=</span></span><br><span class="line">        ProblemDetail.forStatusAndDetail(status, StringUtils.normalizeSpace(detail));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Adds errors fields on validation errors, following RFC 9457 best practices.</span></span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(errors)) &#123;</span><br><span class="line">      problemDetail.setProperty(<span class="string">&quot;errors&quot;</span>, errors);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> problemDetail;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;about:blank&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bad Request&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">400</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Validation failed.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;instance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/management/companies&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;errors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;pointer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;must not be blank&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;pointer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;slug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;must not be blank&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="应用异常"><a href="#应用异常" class="headerlink" title="应用异常"></a>应用异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RootException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Serial</span> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6378336966214073013L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> HttpStatus httpStatus;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ApiErrorDetails&gt; errors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">RootException</span><span class="params">(<span class="meta">@NonNull</span> <span class="keyword">final</span> HttpStatus httpStatus)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.httpStatus = httpStatus;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">RootException</span><span class="params">(<span class="meta">@NonNull</span> <span class="keyword">final</span> HttpStatus httpStatus, <span class="keyword">final</span> String message)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(message);</span><br><span class="line">    <span class="built_in">this</span>.httpStatus = httpStatus;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExceptionHandler(RootException.class)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;ProblemDetail&gt; <span class="title function_">rootException</span><span class="params">(<span class="keyword">final</span> RootException ex)</span> &#123;</span><br><span class="line">  log.info(ex.getMessage(), ex);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Uses default message, can be adapted to use ex.getMessage().</span></span><br><span class="line">  <span class="keyword">final</span> <span class="type">ProblemDetail</span> <span class="variable">problemDetail</span> <span class="operator">=</span></span><br><span class="line">      <span class="built_in">this</span>.buildProblemDetail(</span><br><span class="line">          ex.getHttpStatus(), API_DEFAULT_REQUEST_FAILED_MESSAGE, ex.getErrors());</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> ResponseEntity.status(ex.getHttpStatus()).body(problemDetail);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;about:blank&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Internal Server Error&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="string">&quot;detail&quot;</span>: <span class="string">&quot;Request failed.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;instance&quot;</span>: <span class="string">&quot;/back-office/hello-world&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常降级"><a href="#异常降级" class="headerlink" title="异常降级"></a>异常降级</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line"><span class="meta">@ExceptionHandler(Throwable.class)</span></span><br><span class="line"><span class="keyword">public</span> ProblemDetail <span class="title function_">handleAllExceptions</span><span class="params">(<span class="keyword">final</span> Throwable ex, <span class="keyword">final</span> WebRequest request)</span> &#123;</span><br><span class="line">  log.warn(ex.getMessage(), ex);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.slack.notify(format(<span class="string">&quot;[API] InternalServerError: %s&quot;</span>, ex.getMessage()));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.buildProblemDetail(HttpStatus.INTERNAL_SERVER_ERROR, API_DEFAULT_ERROR_MESSAGE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;about:blank&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Internal Server Error&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="string">&quot;detail&quot;</span>: <span class="string">&quot;Something went wrong. Please try again later or enter in contact with our service.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;instance&quot;</span>: <span class="string">&quot;/back-office/hello-world&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当有无法处理的异常时，就需要配置一个兜底的异常。</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CompanyRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Company, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">String</span> <span class="variable">CACHE_NAME</span> <span class="operator">=</span> <span class="string">&quot;company&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@Cacheable(value = CACHE_NAME, key = &quot;&#123;&#x27;byId&#x27;, #id&#125;&quot;)</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  Optional&lt;Company&gt; <span class="title function_">findById</span><span class="params">(<span class="meta">@NonNull</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Cacheable(value = CACHE_NAME, key = &quot;&#123;&#x27;bySlug&#x27;, #slug&#125;&quot;)</span></span><br><span class="line">  Optional&lt;Company&gt; <span class="title function_">findBySlug</span><span class="params">(String slug)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Caching(</span></span><br><span class="line"><span class="meta">      evict = &#123;</span></span><br><span class="line"><span class="meta">        @CacheEvict(value = CACHE_NAME, key = &quot;&#123;&#x27;byId&#x27;, #entity.id&#125;&quot;),</span></span><br><span class="line"><span class="meta">        @CacheEvict(value = CACHE_NAME, key = &quot;&#123;&#x27;bySlug&#x27;, #entity.slug&#125;&quot;),</span></span><br><span class="line"><span class="meta">      &#125;)</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  &lt;S <span class="keyword">extends</span> <span class="title class_">Company</span>&gt; <span class="meta">@NonNull</span> S <span class="title function_">save</span><span class="params">(<span class="meta">@NonNull</span> S entity)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * This cache implementation is only valid if the table is not</span></span><br><span class="line"><span class="comment">   * frequently updated since it will clear the cache at every update operation</span></span><br><span class="line"><span class="comment">   * If you want to be more performant you can use something like https://github.com/ms100/cache-as-multi</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CacheEvict(cacheNames = CACHE_NAME, allEntries = true)</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  &lt;S <span class="keyword">extends</span> <span class="title class_">Company</span>&gt; List&lt;S&gt; <span class="title function_">saveAll</span><span class="params">(<span class="meta">@NonNull</span> Iterable&lt;S&gt; entities)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Caching(</span></span><br><span class="line"><span class="meta">      evict = &#123;</span></span><br><span class="line"><span class="meta">        @CacheEvict(value = CACHE_NAME, key = &quot;&#123;&#x27;byId&#x27;, #entity.id&#125;&quot;),</span></span><br><span class="line"><span class="meta">        @CacheEvict(value = CACHE_NAME, key = &quot;&#123;&#x27;bySlug&#x27;, #entity.slug&#125;&quot;),</span></span><br><span class="line"><span class="meta">      &#125;)</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@NonNull</span> Company entity)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * This cache implementation is only valid if the table is not</span></span><br><span class="line"><span class="comment">   * frequently updated since it will clear the cache at every delete operation</span></span><br><span class="line"><span class="comment">   * If you want to be more performant you can use something like https://github.com/ms100/cache-as-multi</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">  <span class="meta">@CacheEvict(cacheNames = CACHE_NAME, allEntries = true)</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">deleteAll</span><span class="params">(<span class="meta">@NonNull</span> Iterable&lt;? extends Company&gt; entities)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring 提供了标准的缓存接口，即便是后续需要切换到 Redis，使用的 API 和注解都不会发生改变。</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>Java21 后支持了虚拟线程，几乎可以无限的实现线程，在 Spring Boot 3.2 需要单独开启。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.threads.virtual.enabled</span><br></pre></td></tr></table></figure><h3 id="可观测性"><a href="#可观测性" class="headerlink" title="可观测性"></a>可观测性</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">info,</span> <span class="string">health,</span> <span class="string">prometheus,</span> <span class="string">metrics</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/20/Wh3toXGSJV7AU45.png" alt="image.png"></p><blockquote><p>注意在生成环境不要暴露管理 API</p></blockquote><h3 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-tracing-bridge-otel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.ttddyy.observation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>datasource-micrometer-spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;datasource-micrometer.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.opentelemetry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>opentelemetry-exporter-otlp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;opentelemetry-exporter-otlp.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同步请求的时候每个请求都会带上 <code>traceId</code> 和 <code>spanId</code> ，如果是异步请求时候需要配置：<code>spring.reactor.context-propagation=true</code></p><p>如果使用 <code>@Async</code>时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskExecutorConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Override default SimpleAsyncTaskExecutor to provide context propagation in @Async function</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> TaskExecutor <span class="title function_">simpleAsyncTaskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">SimpleAsyncTaskExecutor</span> <span class="variable">taskExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAsyncTaskExecutor</span>();</span><br><span class="line">    taskExecutor.setTaskDecorator(<span class="keyword">new</span> <span class="title class_">ContextPropagatingTaskDecorator</span>());</span><br><span class="line">    <span class="keyword">return</span> taskExecutor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本地测试时候可以使用 <a href="https://github.com/CtrlSpice/otel-desktop-viewer">Otel Desktop Viewer</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span>  </span><br><span class="line">  <span class="attr">tracing:</span></span><br><span class="line">    <span class="attr">sampling:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">otlp:</span></span><br><span class="line">    <span class="attr">tracing:</span></span><br><span class="line">      <span class="attr">endpoint:</span> <span class="string">http://localhost:4317</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/20/r8ko5fm1xTFDLc3.png" alt="image.png"></p><h2 id="Rust-Vs-Go-A-Hands-On-Comparison"><a href="#Rust-Vs-Go-A-Hands-On-Comparison" class="headerlink" title="Rust Vs Go: A Hands-On Comparison"></a>Rust Vs Go: A Hands-On Comparison</h2><p>URL: <a href="https://www.shuttle.rs/blog/2023/09/27/rust-vs-go-comparison">https://www.shuttle.rs/blog/2023/09/27/rust-vs-go-comparison</a></p><blockquote><p>动手比较 Rust 和 Go</p></blockquote><p><img src="https://s2.loli.net/2023/12/23/O5frBYd1pPevzXE.png" alt="image.png"></p><p>本文是通过编写一个 web 服务来进行比较的。</p><ul><li>Go 更加简单易学，同时标准库非常强大，只需要配合 gin+sqlx 这两个第三方库就能实现一个 web 服务</li><li>Rust也可以快速的构建一个安全的 web 服务，但需要依赖许多第三方库，比如http&#x2F;JSON&#x2F;模板引擎&#x2F;时间处理等</li><li>但 Rust 在异常处理方面心智负担更低，代码更容易阅读。</li><li>如果是一个初创小团队，使用 Go 的上手难度确实更低；</li><li>但如果团队愿意花时间投入到 Rust 中，结合他出色的错误处理，和强大的编译检查，长时间来看会得到更好的效果。</li></ul><h2 id="为什么要使用-Go-语言？Go-语言的优势在哪里？-知乎"><a href="#为什么要使用-Go-语言？Go-语言的优势在哪里？-知乎" class="headerlink" title="为什么要使用 Go 语言？Go 语言的优势在哪里？ - 知乎"></a>为什么要使用 Go 语言？Go 语言的优势在哪里？ - 知乎</h2><p>URL: <a href="https://www.zhihu.com/question/21409296/answer/1040884859">https://www.zhihu.com/question/21409296/answer/1040884859</a></p><blockquote><p>图文并茂，讲解了 G-M-P 各自之间的关系，以及调度模型。</p></blockquote><p><img src="https://s2.loli.net/2023/12/23/mpNuQKGijy3d6WC.png" alt="image.png"></p><ul><li>G: <strong>Goroutine</strong>，用户创建的协程，图中搬运的砖头。</li><li>M: <strong>Machine</strong>，OS 内核的线程的抽象，代表真正执行的资源；对应到就是图中的地鼠，地鼠不能用户直接创建；得是砖头 G 太多，地鼠 M 本身太少，同时还有空闲的小车 P，此时就会从其他地方借一些地鼠 M 过来直到把小车 P 用完为止。</li><li>P: Processor 处理器，G 只有绑定到 P 才能被调度；P 是图中的小车，由用户设置的 <code>GoMAXPROCS</code> 决定小车的数量。</li></ul><p>文章链接：</p><ul><li><a href="https://blog.canopas.com/golang-14-shorthand-tricks-you-might-not-know-8d8d21954c49">https://blog.canopas.com/golang-14-shorthand-tricks-you-might-not-know-8d8d21954c49</a></li><li><a href="https://medium.com/@jojoooo/exploring-a-base-spring-boot-application-with-java-21-virtual-thread-spring-security-flyway-c0fde13c1eca#551c">https://medium.com/@jojoooo/exploring-a-base-spring-boot-application-with-java-21-virtual-thread-spring-security-flyway-c0fde13c1eca#551c</a></li><li><a href="https://www.zhihu.com/question/21409296/answer/1040884859">https://www.zhihu.com/question/21409296/answer/1040884859</a></li></ul><p>#Newletters </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/12/23/VibnQF1pM2K6fsd.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术阅读周刊，每周更新。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    <category term="Newsletter" scheme="http://crossoverjie.top/categories/OB/Newsletter/"/>
    
    
  </entry>
  
  <entry>
    <title>如何给开源项目发起提案</title>
    <link href="http://crossoverjie.top/2023/12/21/ob/Pulsar%20Proposal/"/>
    <id>http://crossoverjie.top/2023/12/21/ob/Pulsar%20Proposal/</id>
    <published>2023-12-21T03:09:52.000Z</published>
    <updated>2023-12-21T10:10:37.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>前段时间在使用 Pulsar 的 admin API 时，发现其中的一个接口响应非常慢：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.topics().getPartitionedStats(topic);</span><br></pre></td></tr></table></figure><p>使用 curl 拿到的响应结果非常大，同时也非常耗时：<br><img src="https://s2.loli.net/2023/12/21/dMsUq1eFNz9IoYC.png" alt="image.png"></p><p>具体的 issue 在这里：<a href="https://github.com/apache/pulsar/issues/21200">https://github.com/apache/pulsar/issues/21200</a></p><span id="more"></span><p>后面经过分析，是因为某些 topic 的生产者和消费者非常多，导致这个查询 topic 统计的接口数据量非常大。<br><img src="https://s2.loli.net/2023/12/21/CIwr3qivSQyPnEx.png" alt="image.png"></p><p>但在我这个场景其实是不需要这些生产者和消费者信息的，现在就导致这个 topic 无法查看状态，所以就建议新增两个参数可以过滤这两个字段。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>因为涉及到新增 API 了，所以社区维护者就建议我起草一个提案试试：<br><img src="https://s2.loli.net/2023/12/21/qyDmVHRsFBoewiQ.png" alt="image.png"></p><h2 id="什么时候需要提案"><a href="#什么时候需要提案" class="headerlink" title="什么时候需要提案"></a>什么时候需要提案</h2><p>此时就涉及到什么情况下需要给社区发起一个提案的问题了。<br><img src="https://s2.loli.net/2023/12/21/VH8NqwgWcROLXhP.png" alt="image.png"><br>在官方的提案指南中有着详细的说明，简单来说就是：</p><ul><li>对任何模块新增了 API、或者是重大改动的新特性、监控指标、配置参数时都需要发起提案</li><li>对应的如果只是对现有 bug 的修复、文档等一些可控的变更时，是不需要发起提案的，直接提交 PR 即可。</li></ul><h3 id="提案步骤"><a href="#提案步骤" class="headerlink" title="提案步骤"></a>提案步骤</h3><h4 id="起草"><a href="#起草" class="headerlink" title="起草"></a>起草</h4><p>首先第一步就是根据官方模版起草一个提案：<br>重点描述背景、目的、详细设计等。<br><img src="https://s2.loli.net/2023/12/21/eT7xQEk3li6Rdyp.png" alt="image.png"><br>并发起一个 PR，如果不确定怎么写的话可以参考已经合并了的提案。</p><h4 id="邮件讨论"><a href="#邮件讨论" class="headerlink" title="邮件讨论"></a>邮件讨论</h4><p>之后则是将这个 PR 发送到开发组邮箱中，让社区成员参与讨论。</p><p><img src="https://s2.loli.net/2023/12/21/cAlZLYGEOqiyMoh.png" alt="image.png"><br>这一步可能会比较耗时，提案内容可能会被反复修改。</p><p>发起提案的一个重要目的是可以让社区成员进行讨论，评估是否需要这个提案或者是否<br>有其他解决方法。</p><h4 id="发起投票"><a href="#发起投票" class="headerlink" title="发起投票"></a>发起投票</h4><p>经过讨论，如果提案获得通过后就可以发起投票了，至少需要有三个 binding 通过的投票后这个提案就通过了。</p><blockquote><p>虽然任何人都可以参与投票，但社区只会考虑 PMC 的投票建议；投票的时效性也只有 48h。</p></blockquote><p><img src="https://s2.loli.net/2023/12/21/SiHbGyRzX1kBTjt.png" alt="image.png"></p><p>48 小时候便可以发一个投票结果的邮件，如果达到通过条件便可以通知参与投票的 PMC 合并这个 PR 了。<br><img src="https://s2.loli.net/2023/12/21/r7tm8pyVER6QvCf.png" alt="image.png"></p><h4 id="实现提案"><a href="#实现提案" class="headerlink" title="实现提案"></a>实现提案</h4><p>之后就是没啥好说的实现过程，因为通常我们是需要在提案里详细描述实现过程以及涉及到修改的地方。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>只要提案被 review 通过后实现起来就非常简单了，跟着提案里的流程实现就好了。</p><blockquote><p>这点非常类似于我们在企业中对某个业务做技术方案，如果大家都按照类似的流程严格审核方案，那实现起来是非常快的，而且可以尽量的减少事后扯皮。</p></blockquote><p>所以最后我的实现 PR 提交之后，都没有任何的修改意见，直接就合并了；也大大降低了审核人员的负担，提高整体效率。</p><p>以上就是我第一次参与 Pulsar 社区的提案过程，我猜测其他社区的流程也是大差不差；其中重点就是异步沟通；大家都认可之后真的会比实时通信的效率高很多。</p><p>具体的提案细节可以阅读官方指南 <a href="https://github.com/apache/pulsar/blob/master/pip/README.md">https://github.com/apache/pulsar/blob/master/pip/README.md</a></p><p>#Blog #Pulsar </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;前段时间在使用 Pulsar 的 admin API 时，发现其中的一个接口响应非常慢：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;admin.topics().getPartitionedStats(topic);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 curl 拿到的响应结果非常大，同时也非常耗时：&lt;br&gt;&lt;img src=&quot;https://s2.loli.net/2023/12/21/dMsUq1eFNz9IoYC.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;具体的 issue 在这里：&lt;a href=&quot;https://github.com/apache/pulsar/issues/21200&quot;&gt;https://github.com/apache/pulsar/issues/21200&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    
    <category term="Pulsar" scheme="http://crossoverjie.top/tags/Pulsar/"/>
    
  </entry>
  
  <entry>
    <title>技术阅读周刊第🔟期</title>
    <link href="http://crossoverjie.top/2023/12/15/ob/newsletter/Newsletter10-20231215/"/>
    <id>http://crossoverjie.top/2023/12/15/ob/newsletter/Newsletter10-20231215/</id>
    <published>2023-12-15T09:28:25.000Z</published>
    <updated>2023-12-16T07:59:26.164Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/12/16/keYlOC74XMoPAvZ.png"></p><p><strong>技术阅读周刊，每周更新。</strong></p><span id="more"></span><h2 id="历史更新"><a href="#历史更新" class="headerlink" title="历史更新"></a>历史更新</h2><ul><li><a href="https://crossoverjie.top/2023/11/17/ob/newsletter/Newsletter06-20231117/">20231117：第六期</a></li><li><a href="https://crossoverjie.top/2023/11/24/ob/newsletter/Newsletter07-20231124/">20231124：第七期</a></li><li><a href="https://crossoverjie.top/2023/12/01/ob/newsletter/Newsletter08-20231201/">20231201：第八期</a></li><li><a href="https://crossoverjie.top/2023/12/08/ob/newsletter/Newsletter09-20231208/">20231215：第九期</a><!--more--></li></ul><h2 id="Golang-14-Shorthand-Tricks-You-Might-Not-Know-by-Nidhi-D-Dec-2023-Canopas"><a href="#Golang-14-Shorthand-Tricks-You-Might-Not-Know-by-Nidhi-D-Dec-2023-Canopas" class="headerlink" title="Golang: 14 Shorthand Tricks You Might Not Know! | by Nidhi D | Dec, 2023 | Canopas"></a>Golang: 14 Shorthand Tricks You Might Not Know! | by Nidhi D | Dec, 2023 | Canopas</h2><p>URL: <a href="https://blog.canopas.com/golang-14-shorthand-tricks-you-might-not-know-8d8d21954c49">https://blog.canopas.com/golang-14-shorthand-tricks-you-might-not-know-8d8d21954c49</a></p><h3 id="同时声明和初始化变量"><a href="#同时声明和初始化变量" class="headerlink" title="同时声明和初始化变量"></a>同时声明和初始化变量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line"><span class="keyword">var</span> message <span class="type">string</span>  </span><br><span class="line">message = <span class="string">&quot;Hello, Golang!&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line">message := <span class="string">&quot;Hello, Golang!&quot;</span></span><br></pre></td></tr></table></figure><h3 id="声明和初始化多个变量"><a href="#声明和初始化多个变量" class="headerlink" title="声明和初始化多个变量"></a>声明和初始化多个变量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line"><span class="keyword">var</span> a, b, c <span class="type">int</span>  </span><br><span class="line">a = <span class="number">1</span>  </span><br><span class="line">b = <span class="number">2</span>  </span><br><span class="line">c = <span class="number">3</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line">a, b, c := <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="交换变量"><a href="#交换变量" class="headerlink" title="交换变量"></a>交换变量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a, b := <span class="number">1</span>, <span class="number">2</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Long form  </span></span><br><span class="line">temp := a  </span><br><span class="line">a = b  </span><br><span class="line">b = temp  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure><h3 id="Defer-函数调用"><a href="#Defer-函数调用" class="headerlink" title="Defer 函数调用"></a>Defer 函数调用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cleanup</span><span class="params">()</span></span> &#123;  </span><br><span class="line"><span class="comment">// Cleanup logic  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">defer</span> cleanup()  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;  </span><br><span class="line"><span class="comment">// Cleanup logic  </span></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><h3 id="检测-Map-中的数据是否存在"><a href="#检测-Map-中的数据是否存在" class="headerlink" title="检测 Map 中的数据是否存在"></a>检测 Map 中的数据是否存在</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line">value, exists := myMap[key]  </span><br><span class="line"><span class="keyword">if</span> !exists &#123;  </span><br><span class="line">    <span class="comment">// Key doesn&#x27;t exist in the map  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line"><span class="keyword">if</span> value, exists := myMap[key]; !exists &#123;  </span><br><span class="line">    <span class="comment">// Key doesn&#x27;t exist in the map  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用下标和值迭代切片"><a href="#使用下标和值迭代切片" class="headerlink" title="使用下标和值迭代切片"></a>使用下标和值迭代切片</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(numbers); i++ &#123;  </span><br><span class="line">fmt.Println(i, numbers[i])  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line"><span class="keyword">for</span> i, value := <span class="keyword">range</span> numbers &#123;  </span><br><span class="line">fmt.Println(i, value)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误检测"><a href="#错误检测" class="headerlink" title="错误检测"></a>错误检测</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line">result, err := someFunction()  </span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line"><span class="comment">// Handle the error  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line"><span class="keyword">if</span> result, err := someFunction(); err != <span class="literal">nil</span> &#123;  </span><br><span class="line"><span class="comment">// Handle the error  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建一个变量的指针"><a href="#创建一个变量的指针" class="headerlink" title="创建一个变量的指针"></a>创建一个变量的指针</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line"><span class="keyword">var</span> x <span class="type">int</span>  </span><br><span class="line">ptr := &amp;x  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line">ptr := <span class="built_in">new</span>(<span class="type">int</span>)</span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;  </span><br><span class="line"><span class="keyword">return</span> x + y  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line">add := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;  </span><br><span class="line"><span class="keyword">return</span> x + y  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建和初始化-Map"><a href="#创建和初始化-Map" class="headerlink" title="创建和初始化 Map"></a>创建和初始化 Map</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line">colors := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)  </span><br><span class="line">colors[<span class="string">&quot;red&quot;</span>] = <span class="string">&quot;#ff0000&quot;</span>  </span><br><span class="line">colors[<span class="string">&quot;green&quot;</span>] = <span class="string">&quot;#00ff00&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line">colors := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;  </span><br><span class="line"><span class="string">&quot;red&quot;</span>: <span class="string">&quot;#ff0000&quot;</span>,  </span><br><span class="line"><span class="string">&quot;green&quot;</span>: <span class="string">&quot;#00ff00&quot;</span>,  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明多个常量"><a href="#声明多个常量" class="headerlink" title="声明多个常量"></a>声明多个常量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line"><span class="keyword">const</span> pi <span class="type">float64</span> = <span class="number">3.14159</span>  </span><br><span class="line"><span class="keyword">const</span> maxAttempts <span class="type">int</span> = <span class="number">3</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line"><span class="keyword">const</span> (  </span><br><span class="line">pi = <span class="number">3.14159</span>  </span><br><span class="line">maxAttempts = <span class="number">3</span>  </span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Java-Mastery-Unleashed-12-Essential-Tips-Every-Developer-Must-Embrace"><a href="#Java-Mastery-Unleashed-12-Essential-Tips-Every-Developer-Must-Embrace" class="headerlink" title="Java Mastery Unleashed: 12 Essential Tips Every Developer Must Embrace"></a>Java Mastery Unleashed: 12 Essential Tips Every Developer Must Embrace</h2><p>URL: <a href="https://blog.stackademic.com/boost-your-java-skills-12-must-know-programming-tips-for-java-developers-34f8381ec431">https://blog.stackademic.com/boost-your-java-skills-12-must-know-programming-tips-for-java-developers-34f8381ec431</a></p><blockquote><p>一些常用的 Java 技巧</p></blockquote><ul><li><p>善用 Lambda 表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Before</span></span><br><span class="line">List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line"><span class="keyword">for</span> (Person person : people) &#123;  </span><br><span class="line">names.add(person.getName());  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// After</span></span><br><span class="line">List&lt;String&gt; names = people.stream()  </span><br><span class="line">.map(Person::getName)  </span><br><span class="line">.collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li><li><p>使用 Optionals 替代 null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; maybeName = Optional.ofNullable(person.getName());  </span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> maybeName.orElse(<span class="string">&quot;Unknown&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用 stream 简化集合操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; evenNumbers = numbers.stream()  </span><br><span class="line">.filter(num -&gt; num % <span class="number">2</span> == <span class="number">0</span>)  </span><br><span class="line">.collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li><li><p>String.format 拼接字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot; World&quot;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s%s&quot;</span>, s1, s2);</span><br></pre></td></tr></table></figure></li><li><p>使用 default method 扩展接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TimeClient</span> &#123;  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setTime</span><span class="params">(<span class="type">int</span> hour, <span class="type">int</span> minute, <span class="type">int</span> second)</span>;  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setDate</span><span class="params">(<span class="type">int</span> day, <span class="type">int</span> month, <span class="type">int</span> year)</span>;  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setDateAndTime</span><span class="params">(<span class="type">int</span> day, <span class="type">int</span> month, <span class="type">int</span> year, <span class="type">int</span> hour, <span class="type">int</span> minute, <span class="type">int</span> second)</span>;  </span><br><span class="line">LocalDateTime <span class="title function_">getLocalDateTime</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用枚举替换常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Level</span> &#123; LOW, MEDIUM, HIGH &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Level</span> <span class="variable">myVar</span> <span class="operator">=</span> Level.MEDIUM;</span><br><span class="line">        System.out.println(myVar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 try-with-Resource 管理资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;example.txt&quot;</span>);</span><br><span class="line">     <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fileReader)) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">    <span class="comment">// Process the file</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">// Handle the exception</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="SpringBoot-Webflux-vs-Vert-x-Performance-comparison-for-hello-world-case-Tech-Tonic"><a href="#SpringBoot-Webflux-vs-Vert-x-Performance-comparison-for-hello-world-case-Tech-Tonic" class="headerlink" title="SpringBoot Webflux vs Vert.x: Performance comparison for hello world case | Tech Tonic"></a>SpringBoot Webflux vs Vert.x: Performance comparison for hello world case | Tech Tonic</h2><p>URL: <a href="https://medium.com/deno-the-complete-reference/springboot-webflux-vs-vert-x-performance-comparison-for-hello-world-case-41a6bd8e9f8c">https://medium.com/deno-the-complete-reference/springboot-webflux-vs-vert-x-performance-comparison-for-hello-world-case-41a6bd8e9f8c</a></p><blockquote><p>本文对比了 SpringBoot Webflux 和 Vert.x 的性能对比</p></blockquote><p>以下是两个框架写的压测接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.config.EnableWebFlux;</span><br><span class="line"><span class="keyword">import</span> org.reactivestreams.Publisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableWebFlux</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        SpringApplication.run(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Publisher&lt;String&gt; <span class="title function_">handler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vert.x</span></span><br><span class="line"><span class="keyword">package</span> com.example.starter;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> io.vertx.core.AbstractVerticle;  </span><br><span class="line"><span class="keyword">import</span> io.vertx.core.Promise;  </span><br><span class="line"><span class="keyword">import</span> io.vertx.core.http.HttpServer;  </span><br><span class="line"><span class="keyword">import</span> io.vertx.ext.web.Router;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainVerticle</span> <span class="keyword">extends</span> <span class="title class_">AbstractVerticle</span> &#123;  </span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span>  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Promise&lt;Void&gt; startPromise)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">    <span class="type">HttpServer</span> <span class="variable">server</span> <span class="operator">=</span> vertx.createHttpServer();  </span><br><span class="line">    <span class="type">Router</span> <span class="variable">router</span> <span class="operator">=</span> Router.router(vertx);  </span><br><span class="line">  </span><br><span class="line">    router.get(<span class="string">&quot;/&quot;</span>).respond(ctx -&gt; ctx  </span><br><span class="line">        .response()  </span><br><span class="line">        .putHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain&quot;</span>)  </span><br><span class="line">        .end(<span class="string">&quot;hello world!&quot;</span>));  </span><br><span class="line">  </span><br><span class="line">    server.requestHandler(router).listen(<span class="number">3000</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后直接看对比结果吧：<br><img src="https://s2.loli.net/2023/12/13/smHjAKqN32ETX6I.png" alt="image.png"><br><img src="https://s2.loli.net/2023/12/13/ylwjNGvxUEmgQ5i.png" alt="image.png"><br><img src="https://s2.loli.net/2023/12/13/yY72ipAab8jetUT.png" alt="image.png"><br>最终作者根据一个计算公式得出两个框架的得分，规则如下：</p><ul><li>差距小于 5% 不得分</li><li>5～20 得 1 分</li><li>20～50 得两分</li><li>大于 50，得三分<br><img src="https://s2.loli.net/2023/12/13/wNPSTLRyIt79k85.png" alt="image.png"><br>最终是 <code>Vert.x</code> 得分超过 <code>Webflux</code> 55%⬆️</li></ul><p>不过个人觉得压测结果再好，套上业务后，比如一个接口查询了多个后端服务，后端服务有依赖于多个数据库，最终出来的 RT 大家都差不多。</p><p>除非是某些对性能极致要求的场景，比如实时数据分析、物联网中间件等和直接业务不太相关领域。</p><p>它的底层依然是 Netty，但比 Netty 提供了跟易用的 API。</p><h2 id="Git-Cherry-Pick-Examples-to-Apply-Hot-Fixes-and-Security-Patches-—-Nick-Janetakis"><a href="#Git-Cherry-Pick-Examples-to-Apply-Hot-Fixes-and-Security-Patches-—-Nick-Janetakis" class="headerlink" title="Git Cherry Pick Examples to Apply Hot Fixes and Security Patches — Nick Janetakis"></a>Git Cherry Pick Examples to Apply Hot Fixes and Security Patches — Nick Janetakis</h2><p>URL: <a href="https://nickjanetakis.com/blog/git-cherry-pick-examples-to-apply-hot-fixes-and-security-patches?ref=dailydev">https://nickjanetakis.com/blog/git-cherry-pick-examples-to-apply-hot-fixes-and-security-patches?ref=dailydev</a></p><blockquote><p>讲解了 git cherry-pick 的作用，什么时候该用，什么时候不用。</p></blockquote><p>举个例子：<br>一些大型的开源项目往往都会有一个主分子，同时维护了不同版本的子分支，有些用户可能就会一直使用一些长期维护的子分支，比如 <code>v2.1.0 \ v2.3.0</code></p><p>但对于大部分的开发者来说主要会维护主分支，也会在主分支上推进一些新功能，这些新功能不一定会同步到上述提到的两个老版本中。</p><p>但对于一些安全漏洞，重大 bug 等是需要同步到这些子分支的，但又不能把一些不兼容的新特性同步到子分支中。</p><p>此时就可以使用  cherry-pick 这个功能，只将某一个提交给 pick 到目标分支中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cherry pick more than 1 SHA.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This could be useful if you have a handful of commits that you want to bring over,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">you<span class="string">&#x27;ll likely want to order them with the oldest commit being first in the list.</span></span></span><br><span class="line">git cherry-pick &lt;SHA&gt; &lt;SHA&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Edit the git commit message for the newly applied commit.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># This could be useful if want to customize the git commit message with extra context.</span></span></span><br><span class="line">git cherry-pick &lt;SHA&gt; --edit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Avoid automatically creating the commit which lets you edit the files first.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># This could be useful if you need to make manual code adjustments before committing,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">such as applying a security patch which uses an older library with a different API.</span></span></span><br><span class="line">git cherry-pick &lt;SHA&gt; --no-commit</span><br></pre></td></tr></table></figure><p>文章链接：</p><ul><li><a href="https://blog.canopas.com/golang-14-shorthand-tricks-you-might-not-know-8d8d21954c49">https://blog.canopas.com/golang-14-shorthand-tricks-you-might-not-know-8d8d21954c49</a></li><li><a href="https://blog.stackademic.com/boost-your-java-skills-12-must-know-programming-tips-for-java-developers-34f8381ec431">https://blog.stackademic.com/boost-your-java-skills-12-must-know-programming-tips-for-java-developers-34f8381ec431</a></li><li><a href="https://medium.com/deno-the-complete-reference/springboot-webflux-vs-vert-x-performance-comparison-for-hello-world-case-41a6bd8e9f8c">https://medium.com/deno-the-complete-reference/springboot-webflux-vs-vert-x-performance-comparison-for-hello-world-case-41a6bd8e9f8c</a></li><li><a href="https://nickjanetakis.com/blog/git-cherry-pick-examples-to-apply-hot-fixes-and-security-patches?ref=dailydev">https://nickjanetakis.com/blog/git-cherry-pick-examples-to-apply-hot-fixes-and-security-patches?ref=dailydev</a></li></ul><p>#Newletters </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/12/16/keYlOC74XMoPAvZ.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术阅读周刊，每周更新。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    <category term="Newsletter" scheme="http://crossoverjie.top/categories/OB/Newsletter/"/>
    
    
  </entry>
  
  <entry>
    <title>如何编写一个 Pulsar Broker Interceptor 插件</title>
    <link href="http://crossoverjie.top/2023/12/11/ob/Pulsar-Broker-Interceptor/"/>
    <id>http://crossoverjie.top/2023/12/11/ob/Pulsar-Broker-Interceptor/</id>
    <published>2023-12-11T08:38:27.000Z</published>
    <updated>2023-12-28T02:14:15.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>之前写过一篇文章 <a href="https://crossoverjie.top/2023/08/23/ob/VictoriaLogs-Intro/">VictoriaLogs：一款超低占用的 ElasticSearch 替代方案</a>讲到了我们使用 <code>Victorialogs</code> 来存储 Pulsar 消息队列的消息 trace 信息。</p><p><img src="https://s2.loli.net/2023/12/11/UYdMH19uyjrNA2I.png" alt="image.png"></p><p>而其中的关键的埋点信息是通过 Pulsar 的 <code>BrokerInterceptor</code> 实现的，后面就有朋友咨询这块代码是否开源，目前是没有开源的，不过借此机会可以聊聊如何实现一个 <code>BrokerInterceptor</code> 插件，当前还没有相关的介绍文档。</p><span id="more"></span><p>其实当时我在找 <code>BrokerInterceptor</code> 的相关资料时就发现官方并没有提供对应的开发文档。</p><p>只有一个 <a href="https://pulsar.apache.org/docs/3.1.x/develop-plugin/#what-is-an-additional-servlet">additional servlet</a>的开发文档，而 <code>BrokerInterceptor</code> 只在 <a href="https://www.youtube.com/watch?v=alzv7FyOoP0">YouTube</a> 上找到了一个社区分享的视频。<br><img src="https://s2.loli.net/2023/12/11/H3rs8OdYZecQEn5.png" alt="image.png"></p><p>虽说看视频可以跟着实现，但总归是没有文档方便。</p><hr><p>在这之前还是先讲讲 <code>BrokerInterceptor</code> 有什么用？<br><img src="https://s2.loli.net/2023/12/11/F8cxdwsTyWuaVGg.png" alt="image.png"></p><p>其实从它所提供的接口就能看出，在消息到达 Broker 后的一些关键节点都提供了相关的接口，实现这些接口就能做很多事情了，比如我这里所需要的消息追踪。</p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>下面开始如何使用 <code>BrokerInterceptor</code>：<br>首先是创建一个 <code>Maven</code> 项目，然后引入相关的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.pulsar<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pulsar-broker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pulsar.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h1><p>然后我们便可以实现 <code>org.apache.pulsar.broker.intercept.BrokerInterceptor</code> 来完成具体的业务了。</p><p>在我们做消息追踪的场景下，我们实现了以下几个接口：</p><ul><li>messageProduced</li><li>messageDispatched</li><li>messageAcked</li></ul><p>以 <code>messageProduced</code> 为例，需要解析出消息ID，然后拼接成一个字符串写入 <code>Victorialogs</code> 存储中，其余的两个埋点也是类似的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">messageProduced</span><span class="params">(ServerCnx cnx, Producer producer, <span class="type">long</span> startTimeNs, <span class="type">long</span> ledgerId, <span class="type">long</span> entryId,  </span></span><br><span class="line"><span class="params">                            Topic.PublishContext publishContext)</span> &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">ns</span> <span class="operator">=</span> getNs(producer.getTopic().getName());  </span><br><span class="line">    <span class="keyword">if</span> (!LogSender.checkNamespace(ns)) &#123;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;    <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> producer.getTopic().getName();  </span><br><span class="line">    <span class="type">String</span> <span class="variable">partition</span> <span class="operator">=</span> getPartition(topic);  </span><br><span class="line">    <span class="type">String</span> <span class="variable">msgId</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s:%s:%s&quot;</span>, ledgerId, entryId, partition);  </span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Event</span>.Publish(msgId, producer.getClientAddress(), System.currentTimeMillis(),  </span><br><span class="line">            producer.getProducerName(), topic).toString();  </span><br><span class="line">    LogSender.send(s);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="编写项目描述文件"><a href="#编写项目描述文件" class="headerlink" title="编写项目描述文件"></a>编写项目描述文件</h1><p>我们需要创建一个项目描述文件，路径如下：<br><code>src/main/resources/META-INF/services/broker_interceptor.yml</code><br>名字也是固定的，broker 会在启动的时候读取这个文件，其内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">interceptor-name</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">description</span></span><br><span class="line"><span class="attr">interceptorClass:</span> <span class="string">com.xx.CustomInterceptor</span></span><br></pre></td></tr></table></figure><p>重点是填写自定义实现类的全限定名。</p><h1 id="配置打包插件"><a href="#配置打包插件" class="headerlink" title="配置打包插件"></a>配置打包插件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.nifi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nifi-nar-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;-$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-nar<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>nar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于 Broker 识别的是 nar 包，所以我们需要配置 nar 包插件，之后使用 <code>mvn package</code> 就会生成出 nar 包。</p><h1 id="配置-broker-conf"><a href="#配置-broker-conf" class="headerlink" title="配置 broker.conf"></a>配置 broker.conf</h1><p>我们还需要在 broker.conf 中配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brokerInterceptors: &quot;interceptor-name&quot;</span><br></pre></td></tr></table></figure><p>也就是刚才配置的插件名称。</p><p>不过需要注意的是，如果你是使用 helm 安装的 pulsar，在 3.1 版本之前需要手动将<code>brokerInterceptors</code> 写入到 <code>broker.conf</code> 中。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> apachepulsar/pulsar-all:<span class="number">3.0</span>.<span class="number">1</span>  </span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> target/interceptor-1.0.1.nar /pulsar/interceptors/  </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;\n&quot;</span> &gt;&gt; /pulsar/conf/broker.conf  </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;brokerInterceptors=&quot;</span> &gt;&gt; /pulsar/conf/broker.conf</span></span><br></pre></td></tr></table></figure><p>不然在最终容器中的 <code>broker.conf</code> 中是读取不到这个配置的，导致插件没有生效。</p><blockquote><p>我们是重新基于官方镜像打的一个包含自定义插件的镜像，最终使用这个镜像进行部署。</p></blockquote><p><a href="https://github.com/apache/pulsar/pull/20719">https://github.com/apache/pulsar/pull/20719</a><br>我在这个 PR 中已经将配置加入进去了，但得在 3.1 之后才能生效；也就是在 3.1 之前都得加上加上这行：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;\n&quot;</span> &gt;&gt; /pulsar/conf/broker.conf  </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;brokerInterceptors=&quot;</span> &gt;&gt; /pulsar/conf/broker.conf</span></span><br></pre></td></tr></table></figure><hr><p>目前来看 Pulsar 的 <code>BrokerInterceptor</code> 应该使用不多，不然使用 helm 安装时是不可能生效的；而且官方文档也没用相关的描述。</p><p>#Blog #Pulsar </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;之前写过一篇文章 &lt;a href=&quot;https://crossoverjie.top/2023/08/23/ob/VictoriaLogs-Intro/&quot;&gt;VictoriaLogs：一款超低占用的 ElasticSearch 替代方案&lt;/a&gt;讲到了我们使用 &lt;code&gt;Victorialogs&lt;/code&gt; 来存储 Pulsar 消息队列的消息 trace 信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/12/11/UYdMH19uyjrNA2I.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;而其中的关键的埋点信息是通过 Pulsar 的 &lt;code&gt;BrokerInterceptor&lt;/code&gt; 实现的，后面就有朋友咨询这块代码是否开源，目前是没有开源的，不过借此机会可以聊聊如何实现一个 &lt;code&gt;BrokerInterceptor&lt;/code&gt; 插件，当前还没有相关的介绍文档。&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    
    <category term="Pulsar" scheme="http://crossoverjie.top/tags/Pulsar/"/>
    
  </entry>
  
</feed>
