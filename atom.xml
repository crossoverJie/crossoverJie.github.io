<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>crossoverJie&#39;s Blog</title>
  
  <subtitle>baller</subtitle>
  <link href="http://crossoverjie.top/atom.xml" rel="self"/>
  
  <link href="http://crossoverjie.top/"/>
  <updated>2024-01-08T04:01:31.588Z</updated>
  <id>http://crossoverjie.top/</id>
  
  <author>
    <name>crossoverJie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>技术阅读周刊第十三期：一些提高生产力的终端命令</title>
    <link href="http://crossoverjie.top/2024/01/05/ob/newsletter/Newsletter12-20240105/"/>
    <id>http://crossoverjie.top/2024/01/05/ob/newsletter/Newsletter12-20240105/</id>
    <published>2024-01-05T09:28:25.000Z</published>
    <updated>2024-01-08T04:01:31.588Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2024/01/05/wU8gPSzaoitBerC.png"></p><p><strong>技术阅读周刊，每周更新。</strong></p><span id="more"></span><h2 id="历史更新"><a href="#历史更新" class="headerlink" title="历史更新"></a>历史更新</h2><ul><li><a href="https://crossoverjie.top/2023/12/01/ob/newsletter/Newsletter08-20231201/">20231201：第八期</a></li><li><a href="https://crossoverjie.top/2023/12/15/ob/newsletter/Newsletter10-20231215/">20231215：第十期</a></li><li><a href="https://crossoverjie.top/2023/12/22/ob/newsletter/Newsletter10-20231222/">20231122：第十一期</a></li><li><a href="https://crossoverjie.top/2023/12/29/ob/newsletter/Newsletter12-20231229/">20231129：第十二期</a><!--more--></li></ul><h2 id="生存还是毁灭？一文带你看懂-Pulsar-的消息保留和过期策略-腾讯云开发者社区-腾讯云"><a href="#生存还是毁灭？一文带你看懂-Pulsar-的消息保留和过期策略-腾讯云开发者社区-腾讯云" class="headerlink" title="生存还是毁灭？一文带你看懂 Pulsar 的消息保留和过期策略-腾讯云开发者社区-腾讯云"></a>生存还是毁灭？一文带你看懂 Pulsar 的消息保留和过期策略-腾讯云开发者社区-腾讯云</h2><p>URL: <a href="https://cloud.tencent.com/developer/article/2245703">https://cloud.tencent.com/developer/article/2245703</a></p><p><img src="https://s2.loli.net/2024/01/05/ZYRxDydaIn2W4jJ.png"></p><blockquote><p>本文分析了 Pulsar 消息的生命周期，主要是如何保留和回收消息</p></blockquote><ul><li>TTL（Time To Live）：使得未 ACK 的消息进入 ACK 状态，供后续回收的时候使用</li><li><strong>Retention</strong>保留策略：默认情况下已经被所有订阅者 ACK 的消息会被立即回收掉，配置保留策略可以保留一定时间、一定数量的 ACK 消息，利用这个时间差可以做消息回查</li><li>Backlog: 未被确认消息的集合，也就是积压消息；也可以配置只保留一定时间、数量的消息，从而减少磁盘压力；当超过我们配置的阈值时，有以下几种选择：<br><img src="https://s2.loli.net/2024/01/04/pdEKHRT4v2fAkBm.png" alt="image.png"></li></ul><h2 id="这些流行的K8S工具，你都用上了吗"><a href="#这些流行的K8S工具，你都用上了吗" class="headerlink" title="这些流行的K8S工具，你都用上了吗"></a>这些流行的K8S工具，你都用上了吗</h2><p>URL: <a href="https://mp.weixin.qq.com/s/EC-YLm71YB4cMDoTjrdfyg">https://mp.weixin.qq.com/s/EC-YLm71YB4cMDoTjrdfyg</a></p><blockquote><p>推荐了一些常用的 kubernetes 管理工具</p></blockquote><p><img src="https://s2.loli.net/2024/01/05/kWbLtETcey9Gmzp.png"></p><ul><li>Helm: kubernetes 平台的必备的包管理工具</li><li>本地运行的 kubernetes 工具：有时候需要在本地进行开发和测试，这类工具就很有用：<ul><li>Docker Desktop</li><li>minikube</li><li>kind</li><li>k3s</li><li>这类工具在ingress、负载均衡、集群外访问等需要单独配置。</li></ul></li><li>集群自动缩放器：用于缩放底层节点<ul><li>一些云服务厂商自动集成了这类功能，如果是自建集群：</li><li>kubernetes Autoscaler</li><li>Karpenter</li></ul></li><li>备份和迁移<ul><li>如果部署了有状态的应用，需要进行数据迁移和备份时，可以使用 <code>velero</code></li></ul></li><li>命令行工具<ul><li>kube-ps1 用于终端的 kubernetes 命令提示</li><li>kubectx 用于在终端进行 集群、namespace 上下文切换</li></ul></li><li>IDE<ul><li>OpenLens 一个客户端可视化 app，用于方便管理 kubernetes 集群</li></ul></li></ul><h2 id="3-Terminal-Commands-to-Increase-Your-Productivity-DEV-Community"><a href="#3-Terminal-Commands-to-Increase-Your-Productivity-DEV-Community" class="headerlink" title="3 Terminal Commands to Increase Your Productivity - DEV Community"></a>3 Terminal Commands to Increase Your Productivity - DEV Community</h2><p>URL: <a href="https://dev.to/pankajgupta221b/3-terminal-commands-to-increase-your-productivity-57dm?ref=dailydev">https://dev.to/pankajgupta221b/3-terminal-commands-to-increase-your-productivity-57dm?ref=dailydev</a></p><blockquote><p>作者介绍了几个常用的可以提高生产力的终端命令</p></blockquote><p><img src="https://s2.loli.net/2024/01/05/9UQjHvpaLEqMldW.png"></p><h3 id="alias-别名"><a href="#alias-别名" class="headerlink" title="alias 别名"></a>alias 别名</h3><p>别名非常好用，以下是我常用的一些别名:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-=&#x27;cd -&#x27;</span><br><span class="line">...=../..</span><br><span class="line">....=../../..</span><br><span class="line">.....=../../../..</span><br><span class="line">......=../../../../..</span><br><span class="line">1=&#x27;cd -&#x27;</span><br><span class="line">2=&#x27;cd -2&#x27;</span><br><span class="line">3=&#x27;cd -3&#x27;</span><br><span class="line">4=&#x27;cd -4&#x27;</span><br><span class="line">5=&#x27;cd -5&#x27;</span><br><span class="line">6=&#x27;cd -6&#x27;</span><br><span class="line">7=&#x27;cd -7&#x27;</span><br><span class="line">8=&#x27;cd -8&#x27;</span><br><span class="line">9=&#x27;cd -9&#x27;</span><br><span class="line">dc=docker</span><br><span class="line">jdk11=&#x27;export JAVA_HOME=~/jdk/jdk-11.0.16.1.jdk/Contents/Home&#x27;</span><br><span class="line">jdk17=&#x27;export JAVA_HOME=~/Users/chenjie/Documents/dev~/jdk/jdk-17.0.1.jdk/Contents/Home/&#x27;</span><br><span class="line">jdk21=&#x27;export JAVA_HOME=~/jdk/jdk-21.0.1.jdk/Contents/Home&#x27;</span><br><span class="line">jdk8=&#x27;export JAVA_HOME=&#x27;</span><br><span class="line">k=kubectl</span><br><span class="line">pp=&#x27;sh hexo-push.sh&#x27;</span><br></pre></td></tr></table></figure><h3 id="pbcopy"><a href="#pbcopy" class="headerlink" title="pbcopy"></a>pbcopy</h3><p>这个在有时候需要 debug 日志或者复制一些长文本到剪贴板里非常有用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xx.properties |grep timeout | pbcopy</span><br></pre></td></tr></table></figure><p>这样就可以把 timeout 这个关键字从文件中复制到粘贴板，我就可以将它复制到其他地方使用。</p><h3 id="反向搜索"><a href="#反向搜索" class="headerlink" title="反向搜索"></a>反向搜索</h3><p>在终端中使用 ctrl+r 就可以根据关键字在历史命令中查找命令，这个在忘记了一些命令但只记得关键字的时候非常有用。<br><img src="https://s2.loli.net/2024/01/05/dfuDG6L2n7h5BNP.png"></p><p>我这里使用的终端是 Warp ，交互上更加好用一些。</p><h3 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h3><p>可以用于显示日历<br><img src="https://s2.loli.net/2024/01/05/5yCL9oKWIrjB2Dc.png"></p><p>文章链接：</p><ul><li><a href="https://cloud.tencent.com/developer/article/2245703">https://cloud.tencent.com/developer/article/2245703</a></li><li><a href="https://mp.weixin.qq.com/s/EC-YLm71YB4cMDoTjrdfyg">https://mp.weixin.qq.com/s/EC-YLm71YB4cMDoTjrdfyg</a></li><li><a href="https://dev.to/pankajgupta221b/3-terminal-commands-to-increase-your-productivity-57dm?ref=dailydev">https://dev.to/pankajgupta221b/3-terminal-commands-to-increase-your-productivity-57dm?ref=dailydev</a></li></ul><p>#Newletters </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2024/01/05/wU8gPSzaoitBerC.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术阅读周刊，每周更新。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    <category term="Newsletter" scheme="http://crossoverjie.top/categories/OB/Newsletter/"/>
    
    
  </entry>
  
  <entry>
    <title>Pulsar3.0新功能介绍</title>
    <link href="http://crossoverjie.top/2024/01/03/ob/Pulsar3.0-new-feature/"/>
    <id>http://crossoverjie.top/2024/01/03/ob/Pulsar3.0-new-feature/</id>
    <published>2024-01-03T15:04:58.000Z</published>
    <updated>2024-01-02T16:41:35.234Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2024/01/03/1QuX3wI6P8hefLa.png" alt="Pulsar3.0-NewFeature.png"></p><p>在上一篇文章 <a href="https://crossoverjie.top/2023/12/24/ob/Pulsar3.0-upgrade/">Pulsar3.0 升级指北</a>讲了关于升级 Pulsar 集群的关键步骤与灾难恢复，本次主要分享一些 <code>Pulsar3.0</code> 的新功能与可能带来的一些问题。</p><h1 id="升级后所遇到的问题"><a href="#升级后所遇到的问题" class="headerlink" title="升级后所遇到的问题"></a>升级后所遇到的问题</h1><p>先来个欲扬先抑，聊聊升级后所碰到的问题吧。</p><p>其中有两个问题我们感知比较明显，特别是第一个。</p><span id="more"></span><h2 id="topic被删除"><a href="#topic被删除" class="headerlink" title="topic被删除"></a>topic被删除</h2><p>我们在上个月某天凌晨从 <code>2.11.2</code> 升级到 <code>3.0.1</code> 之后，进行了上一篇文章中所提到的功能性测试，发现没什么问题，觉得一切都还挺顺利的，半个小时搞定后就下班了。</p><p>结果哪知道第二天是被电话叫醒的，有部分业务反馈业务重启之后就无法连接到 Pulsar 了。</p><p><img src="https://s2.loli.net/2024/01/02/KUAnZ8W65jO3x7d.png" alt="image.png"><br>最终定位是 topic 被删除了。</p><blockquote><p>其中的细节还蛮多的，修复过程也是一波三折，后面我会单独写一篇文章来详细梳理这个过程。</p></blockquote><p>在这个 issue 和 PR 中有详细的描述：<br><a href="https://github.com/apache/pulsar/issues/21653">https://github.com/apache/pulsar/issues/21653</a><br><a href="https://github.com/apache/pulsar/pull/21704">https://github.com/apache/pulsar/pull/21704</a></p><p>感兴趣的朋友也可以先看看。</p><h2 id="监控指标丢失"><a href="#监控指标丢失" class="headerlink" title="监控指标丢失"></a>监控指标丢失</h2><p>第二个问题不是那么严重，是升级后发现  bookkeeper 的一些监控指标丢失了，比如这里的写入延迟：<br><img src="https://s2.loli.net/2024/01/02/9c7qs4CX1lejOIn.png" alt="image.png"><br>我也定位了蛮久，但不管是官方的 docker 镜像还是源码编译都无法复现这个问题。</p><p>最终丢失的指标有这些：</p><ul><li>bookkeeper_server_ADD_ENTRY_REQUEST</li><li>bookkeeper_server_ADD_ENTRY_BLOCKED</li><li>bookkeeper_server_READ_ENTRY_BLOCKED</li><li>bookie_journal_JOURNAL_CB_QUEUE_SIZE</li><li>bookie_read_cache_hits_count</li><li>bookie_read_cache_misses_count</li><li>bookie_DELETED_LEDGER_COUNT</li><li>bookie_MAJOR_COMPACTION_COUNT</li></ul><p>详细内容可以参考这个 issue：<br><a href="https://github.com/apache/pulsar/issues/21766">https://github.com/apache/pulsar/issues/21766</a></p><h1 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h1><p>讲完了遇到的 bug，再来看看带来的新特性，重点介绍我们用得上的特性。</p><h2 id="支持低负载均衡"><a href="#支持低负载均衡" class="headerlink" title="支持低负载均衡"></a>支持低负载均衡</h2><p><img src="https://s2.loli.net/2024/01/02/KVpW4DyNimlMhqH.png" alt="image.png"></p><p>当我们升级或者是重启 broker 的时候，全部重启成功后其实会发现最后重启的那个 broker 是没有流量的。</p><p>这个原理和优化在之前写过的 <a href="https://crossoverjie.top/2023/02/07/pulsar/pulsar-load-banance/#Pulsar-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8E%9F%E7%90%86">Pulsar负载均衡原理及优化</a> 其实有详细介绍。</p><p>本次 3.0 终于将那个优化发版了，之后只要我们配置 <code>lowerBoundarySheddingEnabled: true</code> 就能开启这个低负载均衡的一个特性，使得低负载的 broker 依然有流量进入。</p><h2 id="跳过空洞消息"><a href="#跳过空洞消息" class="headerlink" title="跳过空洞消息"></a>跳过空洞消息</h2><p><img src="https://s2.loli.net/2024/01/02/nj2IyteVUQ79SBZ.png" alt="image.png"><br>Pulsar 可能会因为消息消费异常导致游标出现空洞，从而导致磁盘得不到释放；</p><p>所以我们有一个定时任务，会定期扫描积压消息的 topic 判断是否存在空洞消息，如果存在便可以在管理台使用 skipMessage API 跳过空洞消息，从而释放磁盘。</p><p>但在 3.0 之前这个跳过 API 存在 bug，只要跳过的数量超过 8 时，实际跳过的数量就会小于 8.</p><p>具体 issue 和修复过程在这里：<br><a href="https://github.com/apache/pulsar/issues/20262">https://github.com/apache/pulsar/issues/20262</a><br><a href="https://github.com/apache/pulsar/pull/20326">https://github.com/apache/pulsar/pull/20326</a></p><p>总之这个问题在 3.0 之后也是修复了，有类似需求的朋友也可以使用。</p><h2 id="新的负载均衡器"><a href="#新的负载均衡器" class="headerlink" title="新的负载均衡器"></a>新的负载均衡器</h2><p>同时也支持了一个新的负载均衡器，解决了以下问题：</p><ul><li>以前的负载均衡大量依赖 zk，当 topic 数量增多时对扩展性带来问题。<ul><li>新的负载均衡器使用 <code>non-persistent</code> 来存储负载信息，就不再依赖 zk 。</li></ul></li><li>以前的负载均衡器需要依赖 <code>leader broker</code> 进行重定向到具体的 broker，其实这些重定向并无意义，徒增了系统开销。<ul><li>新的负载均衡器使用了 SystemTopic 来存放 topic 的所有权信息，这样每个 broker 都可以拿到数据，从而不再需要从 leader broker 重定向了。</li></ul></li></ul><p>更多完整信息可以参考这个 PIP: <a href="https://github.com/apache/pulsar/issues/16691">PIP-192: New Pulsar Broker Load Balancer</a></p><h2 id="支持大规模延迟消息"><a href="#支持大规模延迟消息" class="headerlink" title="支持大规模延迟消息"></a>支持大规模延迟消息</h2><p>第二个重大特性是支持大规模延迟消息，相信是有不少企业选择 Pulsar 也是因为他原生就支持延迟消息。</p><p>我们也是大量在业务中使用延迟消息，以往的延迟消息有着以下一些问题：</p><ul><li>内存开销过大，延迟消息的索引都是保存在内存中，即便是可以分布在多个 broker 中分散存储，但消耗依然较大<ul><li>重点优化了索引的内存占有量。</li></ul></li><li>重启 broker 时会消耗大量时候重建索引<ul><li>支持了索引快照，最大限度的降低了构建索引的资源消耗。</li></ul></li></ul><h1 id="待优化功能"><a href="#待优化功能" class="headerlink" title="待优化功能"></a>待优化功能</h1><h2 id="监控面板优化"><a href="#监控面板优化" class="headerlink" title="监控面板优化"></a>监控面板优化</h2><p>最后即便是升级到了 3.0 依然还有一些待优化的功能，在之前的 <a href="https://crossoverjie.top/2023/08/03/ob/Pulsar-Client/">从 Pulsar Client 的原理到它的监控面板</a>中有提到给客户端加了一些监控埋点信息。</p><p>最终使用下来发现还缺一个 ack 耗时的一个面板，其实日常碰到最多的问题就是突然不能消费了（或者消费过慢）。</p><p>这时如果有这样的耗时面板，首先就可以定位出是否是消费者本身的问题。</p><p><img src="https://s2.loli.net/2024/01/03/YFoy4PfnRbz72qX.png" alt="image.png"><br>目前还在开发中，大概类似于这样的数据。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Pulsar3.0 是 Pulsar 的第一个 LTS 版本，推荐尽快升级可以获得长期支持。<br>但只要是软件就会有 bug，即便是 LTS 版本，所以大家日常使用碰到 Bug 建议多向社区反馈，一起推动 Pulsar 的进步。</p><p>#Blog #Pulsar </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2024/01/03/1QuX3wI6P8hefLa.png&quot; alt=&quot;Pulsar3.0-NewFeature.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在上一篇文章 &lt;a href=&quot;https://crossoverjie.top/2023/12/24/ob/Pulsar3.0-upgrade/&quot;&gt;Pulsar3.0 升级指北&lt;/a&gt;讲了关于升级 Pulsar 集群的关键步骤与灾难恢复，本次主要分享一些 &lt;code&gt;Pulsar3.0&lt;/code&gt; 的新功能与可能带来的一些问题。&lt;/p&gt;
&lt;h1 id=&quot;升级后所遇到的问题&quot;&gt;&lt;a href=&quot;#升级后所遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;升级后所遇到的问题&quot;&gt;&lt;/a&gt;升级后所遇到的问题&lt;/h1&gt;&lt;p&gt;先来个欲扬先抑，聊聊升级后所碰到的问题吧。&lt;/p&gt;
&lt;p&gt;其中有两个问题我们感知比较明显，特别是第一个。&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    
    <category term="Pulsar" scheme="http://crossoverjie.top/tags/Pulsar/"/>
    
  </entry>
  
  <entry>
    <title>技术阅读周刊第十二期</title>
    <link href="http://crossoverjie.top/2023/12/29/ob/newsletter/Newsletter12-20231229/"/>
    <id>http://crossoverjie.top/2023/12/29/ob/newsletter/Newsletter12-20231229/</id>
    <published>2023-12-29T09:28:25.000Z</published>
    <updated>2023-12-29T06:10:06.808Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/12/29/t1FmIn4i6HAOoDB.png" alt="image.png"></p><p><strong>技术阅读周刊，每周更新。</strong></p><span id="more"></span><h2 id="历史更新"><a href="#历史更新" class="headerlink" title="历史更新"></a>历史更新</h2><ul><li><a href="https://crossoverjie.top/2023/12/01/ob/newsletter/Newsletter08-20231201/">20231201：第八期</a></li><li><a href="https://crossoverjie.top/2023/12/15/ob/newsletter/Newsletter10-20231215/">20231215：第十期</a></li><li><a href="https://crossoverjie.top/2023/12/22/ob/newsletter/Newsletter10-20231222/">20231122：第十一期</a><!--more--></li></ul><h2 id="Deno-vs-Go-Native-hello-world-performance-Tech-Tonic"><a href="#Deno-vs-Go-Native-hello-world-performance-Tech-Tonic" class="headerlink" title="Deno vs Go: Native hello world performance | Tech Tonic"></a>Deno vs Go: Native hello world performance | Tech Tonic</h2><p>URL: <a href="https://medium.com/deno-the-complete-reference/deno-vs-go-native-hello-world-performance-c57d8fc13c75">https://medium.com/deno-the-complete-reference/deno-vs-go-native-hello-world-performance-c57d8fc13c75</a></p><blockquote><p>使用 Deno 和 Go 进行基本的接口对比</p></blockquote><ul><li>MacBook Pro M2 with 16GB of RAM</li><li><code>Deno</code> v1.38.0</li><li>Go v1.21.3</li></ul><p>都是最简单的 httpServer:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Deno</span>.<span class="title function_">serve</span>(&#123;</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">&#125;, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> pathName = <span class="keyword">new</span> <span class="title function_">URL</span>(req.<span class="property">url</span>).<span class="property">pathname</span>;</span><br><span class="line">    <span class="keyword">if</span> (pathName !== <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="literal">null</span>, &#123; <span class="attr">status</span>: <span class="number">404</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="literal">null</span>, &#123; <span class="attr">status</span>: <span class="number">500</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;io&quot;</span></span><br><span class="line">  <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  http.HandleFunc(<span class="string">&quot;/&quot;</span>, helloWorld)</span><br><span class="line">  http.ListenAndServe(<span class="string">&quot;:3000&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloWorld</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">  io.WriteString(w, <span class="string">&quot;Hello world!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/25/6GdkNpm8V7azrtR.png" alt="image.png"></p><p>总的来说 Deno 比 Go 慢了 30% 左右，但 CPU 占有率比 Go 更少，Go 的内存占用更低。</p><blockquote><p>这个对比就图一乐。</p></blockquote><h2 id="Top-7-Spring-Boot-Design-Patterns-Unveiled-by-Dharmendra-Awasthi-Dec-2023-Stackademic"><a href="#Top-7-Spring-Boot-Design-Patterns-Unveiled-by-Dharmendra-Awasthi-Dec-2023-Stackademic" class="headerlink" title="Top 7 Spring Boot Design Patterns Unveiled | by Dharmendra Awasthi | Dec, 2023 | Stackademic"></a>Top 7 Spring Boot Design Patterns Unveiled | by Dharmendra Awasthi | Dec, 2023 | Stackademic</h2><p>URL: <a href="https://blog.stackademic.com/top-7-spring-boot-design-patterns-unveiled-4a2569f8d324">https://blog.stackademic.com/top-7-spring-boot-design-patterns-unveiled-4a2569f8d324</a></p><blockquote><p>7 个我们可以学习的 Spring Boot 的设计模式</p></blockquote><h3 id="Singleton-Pattern-单例模式"><a href="#Singleton-Pattern-单例模式" class="headerlink" title="Singleton Pattern 单例模式"></a><code>Singleton Pattern</code> 单例模式</h3><p>这个没啥好说的，面试都被讲烂了，依然很经典。<br>当我们使用这些注解声明一个 Bean 时<code>@Component</code>, <code>@Service</code>, <code>@Repository</code>, or <code>@Controller</code>，就会被创建一个单例对象注入到 IOC 容器中。</p><h3 id="Factory-Pattern-工厂模式"><a href="#Factory-Pattern-工厂模式" class="headerlink" title="Factory Pattern 工厂模式"></a>Factory Pattern 工厂模式</h3><p>Spring 也提供了工厂模式的接口，我们可以自定义创建逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;MyBean&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MyBean <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// Custom logic to create and return MyBean instance</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> MyBean.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// Or false, depending on your bean&#x27;s scope</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Builder-创建者模式"><a href="#Builder-创建者模式" class="headerlink" title="Builder 创建者模式"></a>Builder 创建者模式</h3><p>这个其实不算是 Spring 所提供的，但确实很好用；通常用于创建需要很多可选参数的对象时使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">// Other fields</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> User.builder()</span><br><span class="line">    .username(<span class="string">&quot;john_doe&quot;</span>)</span><br><span class="line">    .email(<span class="string">&quot;john@example.com&quot;</span>)</span><br><span class="line">    .age(<span class="number">30</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><h3 id="Proxy-代理模式"><a href="#Proxy-代理模式" class="headerlink" title="Proxy 代理模式"></a>Proxy 代理模式</h3><p>代理模式在 spring 中通常用于 AOP 切面，可以实现一些通用的非业务逻辑功能；比如日志、缓存、安全检测等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingAspect</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.example.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeServiceMethods</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Logic to be executed before service methods</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Logging before service methods...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Observe-观察者模式"><a href="#Observe-观察者模式" class="headerlink" title="Observe 观察者模式"></a>Observe 观察者模式</h3><p>本质上是将业务解耦，生产者发布事件，订阅者接收事件，只是 spring 帮我们封装好了逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderPlacedEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Order order;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderPlacedEvent</span><span class="params">(Object source, Order order)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">        <span class="built_in">this</span>.order = order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getters for order information</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationEventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderService</span><span class="params">(ApplicationEventPublisher eventPublisher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventPublisher = eventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">placeOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        <span class="comment">// Logic to place order</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Publish OrderPlacedEvent</span></span><br><span class="line">        eventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">OrderPlacedEvent</span>(<span class="built_in">this</span>, order));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.EventListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendEmailOnOrderPlacement</span><span class="params">(OrderPlacedEvent event)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> event.getOrder();</span><br><span class="line">        <span class="comment">// Logic to send email based on the placed order</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转转一体化监控系统——Prometheus·Grafana成本治理-TakinTalks稳定性技术交流平台"><a href="#转转一体化监控系统——Prometheus·Grafana成本治理-TakinTalks稳定性技术交流平台" class="headerlink" title="转转一体化监控系统——Prometheus·Grafana成本治理_TakinTalks稳定性技术交流平台"></a>转转一体化监控系统——Prometheus·Grafana成本治理_TakinTalks稳定性技术交流平台</h2><p>URL: <a href="https://news.shulie.io/?p=8229">https://news.shulie.io/?p=8229</a><br><img src="https://s2.loli.net/2023/12/29/WSl4PQDKh9g3Hiu.png" alt="image.png"></p><p>链接里有 B 站视频，文字版链接：<a href="https://mp.weixin.qq.com/s/FySeVBL7EfihOlNDBvAPpw">https://mp.weixin.qq.com/s/FySeVBL7EfihOlNDBvAPpw</a></p><blockquote><p>转转的监控方案</p></blockquote><ul><li>基于 Prometheus 架构（确实已经是监控领域的标准了）</li><li>使用 <strong>M3DB</strong> 替换了单机的 Prometheus。<ul><li>我们使用 VM 替换的 Prometheus，转转没有选择 VM 是因为 M3DB 的压缩率更高。</li></ul></li><li>采用 Push 模型推送数据<ul><li>由 SDK 进行推送，对业务无感知</li><li>省略了注册中心，改为了数据库存储服务节点信息。<ul><li>由于我们使用了 <code>kubernetes</code>，所以是基于 kubernetes 的 SD 实现的服务发现。</li><li>所以我们采用的也是 Pull 拉取模型</li></ul></li></ul></li><li>重写了告警系统，Prometheus 自带的告警系统存在学习难度大等问题。</li></ul><p>文章链接：</p><ul><li><a href="https://medium.com/deno-the-complete-reference/deno-vs-go-native-hello-world-performance-c57d8fc13c75">https://medium.com/deno-the-complete-reference/deno-vs-go-native-hello-world-performance-c57d8fc13c75</a></li><li><a href="https://blog.stackademic.com/top-7-spring-boot-design-patterns-unveiled-4a2569f8d324">https://blog.stackademic.com/top-7-spring-boot-design-patterns-unveiled-4a2569f8d324</a></li><li><a href="https://news.shulie.io/?p=8229">https://news.shulie.io/?p=8229</a></li></ul><p>#Newletters </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/12/29/t1FmIn4i6HAOoDB.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术阅读周刊，每周更新。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    <category term="Newsletter" scheme="http://crossoverjie.top/categories/OB/Newsletter/"/>
    
    
  </entry>
  
  <entry>
    <title>Pulsar3.0 升级指北</title>
    <link href="http://crossoverjie.top/2023/12/24/ob/Pulsar3.0-upgrade/"/>
    <id>http://crossoverjie.top/2023/12/24/ob/Pulsar3.0-upgrade/</id>
    <published>2023-12-24T09:08:27.000Z</published>
    <updated>2023-12-28T02:14:11.229Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/12/24/4EVJDOaxl1WI3j9.png" alt="Pulsar3.0-upgrade.png"></p><h1 id="Pulsar3-0-介绍"><a href="#Pulsar3-0-介绍" class="headerlink" title="Pulsar3.0 介绍"></a>Pulsar3.0 介绍</h1><p>Pulsar3.0 是 Pulsar 社区推出的第一个 LTS 长期支持版本。</p><p><img src="https://s2.loli.net/2023/12/22/RL2AvFCQiIseMxH.png" alt="image.png"></p><p>如图所示，LTS 版本会最长支持到 36 个月，而 Feature 版本最多只有六个月；类似于我们使用的 <code>JDK11,17,21</code> 都是可以长期使用的；所以也推荐大家都升级到 LTS 版本。</p><hr><p>作为首个 LTS 版本，3.0 自然也是自带了许多新特性，这个会在后续介绍。</p><span id="more"></span><h1 id="升级指南"><a href="#升级指南" class="headerlink" title="升级指南"></a>升级指南</h1><p>先来看看升级指南：<br><img src="https://s2.loli.net/2023/12/24/ZAc2845LvhsBHfx.png" alt="image.png"><br>在官方的兼容表中会发现：不推荐跨版本升级。</p><p>也就是说如果你现在还在使用的是 2.10.x，那么推荐是先升级到 2.11.x 然后再升级到 3.0.x.</p><p>而且根据我们的使用经验来看，首个版本是不保险的，即便是 LTS 版本；<br>所以不推荐直接升级到 3.0.0，而是更推荐 3.0.1+，这个小版本会修复 3.0 所带来的一些 bug。</p><p>先讲一下我们的升级流程，大家可以用做参考。</p><h2 id="升级前准备"><a href="#升级前准备" class="headerlink" title="升级前准备"></a>升级前准备</h2><p>根据我们的使用场景，为了以防万一，首先需要将我们的插件依赖升级到对应的版本。<br><img src="https://s2.loli.net/2023/12/24/8NzRJUrBWqKPkm9.png" alt="image.png"><br>其实简单来说就是更新下依赖，然后再重新打包，在后续的流程进行测试。</p><h3 id="预热镜像"><a href="#预热镜像" class="headerlink" title="预热镜像"></a>预热镜像</h3><p>之后是预热镜像，我们使用 <code>harbor</code> 搭建了自己的 docker 镜像仓库，这样在升级重启镜像的时候可以更快的从内网拉取镜像。</p><blockquote><p>毕竟一个 pulsar-all 的镜像也不小，尽量的缩短启动时间。</p></blockquote><p>预热的过程也很简单：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker pull apachepulsar/pulsar-all:3.0.1</span><br><span class="line"></span><br><span class="line">docker tag apachepulsar/pulsar-all:3.0.1 harbor-private.xx.com/pulsar/pulsar-all:3.0.1</span><br><span class="line"></span><br><span class="line">docker image push harbor-private.xx.com/pulsar/pulsar-all:3.0.1</span><br></pre></td></tr></table></figure><p>之后升级的时候就可以使用私服的镜像了。</p><h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h2><p>我这边有写了一个 <code>cli</code> 可以帮我快速创建或升级一个集群，然后触发我所编写的功能测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./pulsar-upgrade-cli upgrade pulsar-test ./charts/pulsar --version x.x.x -f charts/pulsar/values.yaml -n pulsar-test</span><br></pre></td></tr></table></figure><p>这个 cli 很简单，一共就做三件事：</p><ul><li>使用 helm 接口升级集群</li><li>等待所有的 Pod 都升级成功</li><li>触发功能测试</li></ul><p>之后的效果如下：<br><img src="https://s2.loli.net/2023/12/24/m85XPGr9nLqtp17.png" alt="image.png"></p><p>主要就是覆盖了我们的使用场景，都跑通过之后才会走后续的流程。</p><h2 id="运行监控"><a href="#运行监控" class="headerlink" title="运行监控"></a>运行监控</h2><p><img src="https://s2.loli.net/2023/12/24/2iDHdwPB4UJXsGh.png" alt="image.png"></p><p>之后会启动一个 200 左右的并发生产和消费数据，模拟线上的使用情况，会一直让这个任务跑着，大概一晚上就可以了，第二天通过监控查看：</p><ul><li>应用有无异常日志</li><li>流量是否正常</li><li>各个组件的内存占用</li><li>写入延迟等信息</li></ul><h2 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h2><p>组件的升级步骤这里参考了官方指南：<br><a href="https://pulsar.apache.org/docs/3.1.x/administration-upgrade/#upgrade-zookeeper-optional">https://pulsar.apache.org/docs/3.1.x/administration-upgrade/#upgrade-zookeeper-optional</a><br><img src="https://s2.loli.net/2023/12/24/9dXxSTOwb8lFm1v.png" alt="image.png"></p><ul><li>升级ZK</li><li>关闭auto recovery</li><li>升级Bookkeeper</li><li>升级Broker</li><li>升级Proxy</li><li>开启auto recovery</li></ul><p>只要一步步按照这个流程走，问题不大，哪一步出现问题后需要及时回滚，回滚流程参考下面的回滚部分。</p><p>同时在升级过程中需要一直查看 broker 的 error 日志，如果有明显的不符合预期的日志一定要注意。</p><blockquote><p>在升级  bookkeeper 的时候，broker 可能会出现 bk 连接失败的异常，这个可以不用在意。</p></blockquote><h2 id="线上验证"><a href="#线上验证" class="headerlink" title="线上验证"></a>线上验证</h2><p>都升级完后就是线上业务验证环节了：</p><ul><li><input checked="" disabled="" type="checkbox"> 查看监控面板，是否有明显的流量、内存、延迟的异常指标。 ✅ 2023-12-24</li><li><input checked="" disabled="" type="checkbox"> topic 元数据完整性验证：这个是因为我们这次升级出了一个 topic 被删除的 bug，所以需要重点验证下；这部分会在下次详细分析。 ✅ 2023-12-24</li><li><input checked="" disabled="" type="checkbox"> 查看业务消息收发有无异常 ✅ 2023-12-24</li><li><input checked="" disabled="" type="checkbox"> 链路查询是否正常，我们有一个消息链路查询的页面，主要是使用 <code>Pulsar-SQL</code> 和 <code>broker-interceptor</code> 实现的。 ✅ 2023-12-24</li></ul><h2 id="异常回滚"><a href="#异常回滚" class="headerlink" title="异常回滚"></a>异常回滚</h2><p>当出现异常的时候需要立即回滚，这里的异常一般就是消息收发异常，客户端掉线等。</p><p>经过我的测试 3.0.x 的存储和之前的版本是兼容的，所以 <code>bookkeeper</code> 都能降级其他的组件就没啥可担心的了。</p><p>需要降级时直接将所有组件降级为上一个版本即可。</p><h2 id="灾难恢复"><a href="#灾难恢复" class="headerlink" title="灾难恢复"></a>灾难恢复</h2><p>因为是从 2.x 升级到 3.x 也是涉及到了跨大版本，所以也准备了灾难恢复的方案。</p><blockquote><p>比如极端情况下升级失败，所有数据丢失的情况。</p></blockquote><p>整个灾难恢复的主要目的就是恢复后的集群对外提供的域名不发生变化，同时所有的客户端可以自动重连上来，也就是最坏的情况下所有的数据丢了可以接受，但不能影响业务正常使用。</p><p>所以我们的流程如下：</p><h3 id="备份-topic"><a href="#备份-topic" class="headerlink" title="备份 topic"></a>备份 topic</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span>  </span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backup</span><span class="params">()</span>&#123;  </span><br><span class="line">    List&lt;String&gt; topicList = pulsarAdmin.topics().getPartitionedTopicList(<span class="string">&quot;tenant/namespace&quot;</span>);  </span><br><span class="line">    log.info(<span class="string">&quot;topic size=&#123;&#125;&quot;</span>,topicList.size());  </span><br><span class="line">    <span class="comment">// create a custom thread pool  </span></span><br><span class="line">    CopyOnWriteArrayList&lt;TopicMeta&gt; dataList = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();  </span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">customThreadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);  </span><br><span class="line">    <span class="keyword">for</span> (String topicName : topicList) &#123;  </span><br><span class="line">        customThreadPool.execute(()-&gt; &#123;  </span><br><span class="line">            PartitionedTopicMetadata metadata;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                metadata = pulsarAdmin.topics().getPartitionedTopicMetadata(topicName);  </span><br><span class="line">                <span class="type">TopicMeta</span> <span class="variable">topicMeta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TopicMeta</span>();  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">// backup topic  </span></span><br><span class="line">                topicMeta.setName(topicName);  </span><br><span class="line">                topicMeta.setPartition(metadata.partitions);  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">// backup permission  </span></span><br><span class="line">                Map&lt;String, Set&lt;AuthAction&gt;&gt; permissions = pulsarAdmin.topics().getPermissions(topicName);  </span><br><span class="line">                topicMeta.setPermissions(permissions);  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">// back sub  </span></span><br><span class="line">                List&lt;String&gt; subscriptions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">                <span class="type">PartitionedTopicStats</span> <span class="variable">topicStats</span> <span class="operator">=</span> pulsarAdmin.topics().getPartitionedStats(topicName, <span class="literal">true</span>);  </span><br><span class="line">                topicStats.getSubscriptions().forEach((k,v)-&gt; subscriptions.add(k));  </span><br><span class="line">                topicMeta.setSubscriptions(subscriptions);  </span><br><span class="line">  </span><br><span class="line">                dataList.add(topicMeta);  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (PulsarAdminException e) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">            &#125;        &#125;);    &#125;  </span><br><span class="line">    customThreadPool.shutdown();  </span><br><span class="line">    <span class="keyword">while</span> (!customThreadPool.isTerminated()) &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">    log.info(<span class="string">&quot;&#123;&#125;&quot;</span>,dataList.size());  </span><br><span class="line">    log.info(<span class="string">&quot;&#123;&#125;&quot;</span>,JSONUtil.toJsonStr(dataList));  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// TopicMetaData</span></span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicMeta</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> partition;  </span><br><span class="line">    Map&lt;String, Set&lt;AuthAction&gt;&gt; permissions;  </span><br><span class="line">    List&lt;String&gt; subscriptions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一步是备份 topic：</p><ul><li>topic 主要是名称和分区数量</li><li>备份权限</li><li>备份 topic 的订阅者</li></ul><h3 id="公私钥备份"><a href="#公私钥备份" class="headerlink" title="公私钥备份"></a>公私钥备份</h3><p>因为我们客户端使用了 JWT 验证，所有为了使得恢复的 Pulsar 集群可以让客户端无缝切换到新集群，因此必须得使用相同的公私钥。</p><p>这个其实比较简单，我们使用的是 helm 安装的集群，所以只需要备份好 <code>Secret</code> 即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>  </span><br><span class="line"><span class="attr">data:</span>  </span><br><span class="line">  <span class="attr">PRIVATEKEY:</span> <span class="string">XXX</span>  </span><br><span class="line">  <span class="attr">PUBLICKEY:</span> <span class="string">XXX</span> </span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span>  </span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">pulsar-token-asymmetric-key</span>  </span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">pulsar</span>  </span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 还有几个 superUser 的 Secret</span></span><br></pre></td></tr></table></figure><h3 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h3><h4 id="创建新集群"><a href="#创建新集群" class="headerlink" title="创建新集群"></a>创建新集群</h4><p>首先使用 helm 重新创建一个新集群：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./scripts/pulsar/prepare_helm_release.sh -n pulsar -k pulsar</span><br><span class="line"></span><br><span class="line">helm install \    --values charts/pulsar/values.yaml \    --set namespace=pulsar\  </span><br><span class="line">    --set initialize=true \  </span><br><span class="line">    pulsar ./charts/pulsar -n pulsar</span><br></pre></td></tr></table></figure><h4 id="恢复公私钥"><a href="#恢复公私钥" class="headerlink" title="恢复公私钥"></a>恢复公私钥</h4><p>直接使用刚才备份的公私钥覆盖到新集群即可。</p><h4 id="恢复namespace"><a href="#恢复namespace" class="headerlink" title="恢复namespace"></a>恢复namespace</h4><p>进入 toolset pod 创建需要使用的 <code>tenant/namespace</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">k exec -it pulsar-toolset-0 -n pulsar bash</span><br><span class="line"></span><br><span class="line">bin/pulsar-admin tenants create tenant</span><br><span class="line"></span><br><span class="line">bin/pulsar-admin namespaces create tenant/namespace</span><br></pre></td></tr></table></figure><h4 id="元数据恢复"><a href="#元数据恢复" class="headerlink" title="元数据恢复"></a>元数据恢复</h4><p>之后便是最重要的元数据恢复了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span>  </span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">restore</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="type">PulsarAdmin</span> <span class="variable">pulsarAdmin</span> <span class="operator">=</span> PulsarAdmin.builder().serviceHttpUrl(<span class="string">&quot;http://url:8080&quot;</span>)  </span><br><span class="line">            .authentication(AuthenticationFactory.token(token))  </span><br><span class="line">            .build();  </span><br><span class="line">    <span class="type">Path</span> <span class="variable">filePath</span> <span class="operator">=</span> Path.of(<span class="string">&quot;restore-ns.json&quot;</span>);  </span><br><span class="line">    <span class="type">String</span> <span class="variable">fileContent</span> <span class="operator">=</span> Files.readString(filePath);  </span><br><span class="line">    List&lt;TopicMeta&gt; topicMetaList = JSON.parseArray(fileContent, TopicMeta.class);  </span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">customThreadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">50</span>);  </span><br><span class="line">    <span class="keyword">for</span> (TopicMeta topicMeta : topicMetaList) &#123;  </span><br><span class="line">        customThreadPool.execute(() -&gt; &#123;  </span><br><span class="line">            <span class="comment">// Create topic  </span></span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                pulsarAdmin.topics().createPartitionedTopic(topicMeta.getName(), topicMeta.getPartition());  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (PulsarAdminException e) &#123;  </span><br><span class="line">                log.error(<span class="string">&quot;Create topic error&quot;</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="comment">// Create sub  </span></span><br><span class="line">            <span class="keyword">for</span> (String subscription : topicMeta.getSubscriptions()) &#123;  </span><br><span class="line">                <span class="keyword">try</span> &#123;  </span><br><span class="line">                    pulsarAdmin.topics().createSubscription(topicMeta.getName(), subscription, MessageId.latest);  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (PulsarAdminException e) &#123;  </span><br><span class="line">                    log.error(<span class="string">&quot;createSubscription error&quot;</span>);  </span><br><span class="line">                &#125;            &#125;  </span><br><span class="line">            <span class="comment">// Grant permission  </span></span><br><span class="line">            topicMeta.getPermissions().forEach((role, authActions) -&gt; &#123;  </span><br><span class="line">                permission(pulsarAdmin, topicMeta.getName(), role, authActions);  </span><br><span class="line">            &#125;);  </span><br><span class="line">            log.info(<span class="string">&quot;topic:&#123;&#125; restore success&quot;</span>, topicMeta.getName());  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        &#125;);    &#125;  </span><br><span class="line">    customThreadPool.shutdown();  </span><br><span class="line">    <span class="keyword">while</span> (!customThreadPool.isTerminated()) &#123;  </span><br><span class="line">    &#125;    log.info(<span class="string">&quot;restore success&quot;</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">permission</span><span class="params">(PulsarAdmin pulsarAdmin, String topic, String role, Set&lt;AuthAction&gt; authActions)</span> &#123;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        pulsarAdmin.topics().grantPermission(topic, role, authActions);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (PulsarAdminException e) &#123;  </span><br><span class="line">        log.error(<span class="string">&quot;grantPermission error&quot;</span>, e);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程和备份类似：</p><ul><li>创建分区 topic</li><li>创建订阅者</li><li>授权角色信息</li></ul><p>因为授权接口限制了并发调用，所有需要加锁，导致整个恢复的流程就会比较慢。</p><p>8000 topic 的 namespace 大概恢复时间为 40min 左右。</p><p>之后依次恢复其他 namespace 即可。</p><h4 id="恢复-police"><a href="#恢复-police" class="headerlink" title="恢复 police"></a>恢复 police</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin.namespaces().setNamespaceMessageTTL(<span class="string">&quot;tenant/namespace&quot;</span>, <span class="number">3600</span> * <span class="number">6</span>);</span><br><span class="line">admin.namespaces().setBacklogQuota(<span class="string">&quot;tenant/namespace&quot;</span>, BacklogQuota)</span><br></pre></td></tr></table></figure><p>如果之前的集群有设置 TTL 或者是 backlogQuota 时都需要手动恢复。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是整个升级和灾难恢复的流程，当然灾难恢复希望大家不要碰到。</p><p>我会在下一篇详细介绍 <code>Pulsar 3.0</code> 的新功能以及所碰到的一些坑。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/12/24/4EVJDOaxl1WI3j9.png&quot; alt=&quot;Pulsar3.0-upgrade.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Pulsar3-0-介绍&quot;&gt;&lt;a href=&quot;#Pulsar3-0-介绍&quot; class=&quot;headerlink&quot; title=&quot;Pulsar3.0 介绍&quot;&gt;&lt;/a&gt;Pulsar3.0 介绍&lt;/h1&gt;&lt;p&gt;Pulsar3.0 是 Pulsar 社区推出的第一个 LTS 长期支持版本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/12/22/RL2AvFCQiIseMxH.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;如图所示，LTS 版本会最长支持到 36 个月，而 Feature 版本最多只有六个月；类似于我们使用的 &lt;code&gt;JDK11,17,21&lt;/code&gt; 都是可以长期使用的；所以也推荐大家都升级到 LTS 版本。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;作为首个 LTS 版本，3.0 自然也是自带了许多新特性，这个会在后续介绍。&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    
    <category term="Pulsar" scheme="http://crossoverjie.top/tags/Pulsar/"/>
    
  </entry>
  
  <entry>
    <title>技术阅读周刊第十一期</title>
    <link href="http://crossoverjie.top/2023/12/22/ob/newsletter/Newsletter10-20231222/"/>
    <id>http://crossoverjie.top/2023/12/22/ob/newsletter/Newsletter10-20231222/</id>
    <published>2023-12-22T09:28:25.000Z</published>
    <updated>2023-12-23T08:19:14.951Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/12/23/VibnQF1pM2K6fsd.png" alt="image.png"></p><p><strong>技术阅读周刊，每周更新。</strong></p><span id="more"></span><h2 id="历史更新"><a href="#历史更新" class="headerlink" title="历史更新"></a>历史更新</h2><ul><li><a href="https://crossoverjie.top/2023/11/24/ob/newsletter/Newsletter07-20231124/">20231124：第七期</a></li><li><a href="https://crossoverjie.top/2023/12/01/ob/newsletter/Newsletter08-20231201/">20231201：第八期</a></li><li><a href="https://crossoverjie.top/2023/12/15/ob/newsletter/Newsletter10-20231215/">20231215：第十期</a><!--more--></li></ul><h2 id="A-Comprehensive-guide-to-Spring-Boot-3-2-with-Java-21-Virtual-Threads-Spring-Security-PostgreSQL-Flyway-Caching-Micrometer-Opentelemetry-JUnit-5-RabbitMQ-Keycloak-Integration-and-More-10-x2F-17-by-Jonathan-Chevalier-Nov-2023-Medium"><a href="#A-Comprehensive-guide-to-Spring-Boot-3-2-with-Java-21-Virtual-Threads-Spring-Security-PostgreSQL-Flyway-Caching-Micrometer-Opentelemetry-JUnit-5-RabbitMQ-Keycloak-Integration-and-More-10-x2F-17-by-Jonathan-Chevalier-Nov-2023-Medium" class="headerlink" title="A Comprehensive guide to Spring Boot 3.2 with Java 21, Virtual Threads, Spring Security, PostgreSQL, Flyway, Caching, Micrometer, Opentelemetry, JUnit 5, RabbitMQ, Keycloak Integration, and More! (10&#x2F;17) | by Jonathan Chevalier | Nov, 2023 | Medium"></a>A Comprehensive guide to Spring Boot 3.2 with Java 21, Virtual Threads, Spring Security, PostgreSQL, Flyway, Caching, Micrometer, Opentelemetry, JUnit 5, RabbitMQ, Keycloak Integration, and More! (10&#x2F;17) | by Jonathan Chevalier | Nov, 2023 | Medium</h2><p>URL: <a href="https://medium.com/@jojoooo/exploring-a-base-spring-boot-application-with-java-21-virtual-thread-spring-security-flyway-c0fde13c1eca#551c">https://medium.com/@jojoooo/exploring-a-base-spring-boot-application-with-java-21-virtual-thread-spring-security-flyway-c0fde13c1eca#551c</a></p><blockquote><p>本文讲解了基于最新的 Spring Boot3.2 和 Java 21 所使用到的技术栈</p></blockquote><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>数据库使用 <code>Postgres15</code> 和 flyway 来管理数据库 schema 的迁移。<br><img src="https://s2.loli.net/2023/12/20/nNEkQpBhHfe6VWb.png" alt="image.png"></p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>Spring6 实现了新的 <a href="https://datatracker.ietf.org/doc/html/rfc9457#name-members-of-a-problem-detail">RFC9457</a>规范，实现以下接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> <span class="keyword">extends</span> <span class="title class_">ResponseEntityExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Process @Valid</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> ResponseEntity&lt;Object&gt; <span class="title function_">handleMethodArgumentNotValid</span><span class="params">(</span></span><br><span class="line"><span class="params">      <span class="meta">@NonNull</span> <span class="keyword">final</span> MethodArgumentNotValidException ex,</span></span><br><span class="line"><span class="params">      <span class="meta">@NonNull</span> <span class="keyword">final</span> HttpHeaders headers,</span></span><br><span class="line"><span class="params">      <span class="meta">@NonNull</span> <span class="keyword">final</span> HttpStatusCode status,</span></span><br><span class="line"><span class="params">      <span class="meta">@NonNull</span> <span class="keyword">final</span> WebRequest request)</span> &#123;</span><br><span class="line">    log.info(ex.getMessage(), ex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> List&lt;ApiErrorDetails&gt; errors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> ObjectError err : ex.getBindingResult().getAllErrors()) &#123;</span><br><span class="line">      errors.add(</span><br><span class="line">          ApiErrorDetails.builder()</span><br><span class="line">              .pointer(((FieldError) err).getField())</span><br><span class="line">              .reason(err.getDefaultMessage())</span><br><span class="line">              .build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(BAD_REQUEST)</span><br><span class="line">        .body(<span class="built_in">this</span>.buildProblemDetail(BAD_REQUEST, <span class="string">&quot;Validation failed.&quot;</span>, errors));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ProblemDetail <span class="title function_">buildProblemDetail</span><span class="params">(</span></span><br><span class="line"><span class="params">      <span class="keyword">final</span> HttpStatus status, <span class="keyword">final</span> String detail, <span class="keyword">final</span> List&lt;ApiErrorDetails&gt; errors)</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">final</span> <span class="type">ProblemDetail</span> <span class="variable">problemDetail</span> <span class="operator">=</span></span><br><span class="line">        ProblemDetail.forStatusAndDetail(status, StringUtils.normalizeSpace(detail));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Adds errors fields on validation errors, following RFC 9457 best practices.</span></span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(errors)) &#123;</span><br><span class="line">      problemDetail.setProperty(<span class="string">&quot;errors&quot;</span>, errors);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> problemDetail;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;about:blank&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bad Request&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">400</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Validation failed.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;instance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/management/companies&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;errors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;pointer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;must not be blank&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;pointer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;slug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;must not be blank&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="应用异常"><a href="#应用异常" class="headerlink" title="应用异常"></a>应用异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RootException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Serial</span> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6378336966214073013L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> HttpStatus httpStatus;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ApiErrorDetails&gt; errors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">RootException</span><span class="params">(<span class="meta">@NonNull</span> <span class="keyword">final</span> HttpStatus httpStatus)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.httpStatus = httpStatus;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">RootException</span><span class="params">(<span class="meta">@NonNull</span> <span class="keyword">final</span> HttpStatus httpStatus, <span class="keyword">final</span> String message)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(message);</span><br><span class="line">    <span class="built_in">this</span>.httpStatus = httpStatus;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExceptionHandler(RootException.class)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;ProblemDetail&gt; <span class="title function_">rootException</span><span class="params">(<span class="keyword">final</span> RootException ex)</span> &#123;</span><br><span class="line">  log.info(ex.getMessage(), ex);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Uses default message, can be adapted to use ex.getMessage().</span></span><br><span class="line">  <span class="keyword">final</span> <span class="type">ProblemDetail</span> <span class="variable">problemDetail</span> <span class="operator">=</span></span><br><span class="line">      <span class="built_in">this</span>.buildProblemDetail(</span><br><span class="line">          ex.getHttpStatus(), API_DEFAULT_REQUEST_FAILED_MESSAGE, ex.getErrors());</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> ResponseEntity.status(ex.getHttpStatus()).body(problemDetail);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;about:blank&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Internal Server Error&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="string">&quot;detail&quot;</span>: <span class="string">&quot;Request failed.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;instance&quot;</span>: <span class="string">&quot;/back-office/hello-world&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常降级"><a href="#异常降级" class="headerlink" title="异常降级"></a>异常降级</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line"><span class="meta">@ExceptionHandler(Throwable.class)</span></span><br><span class="line"><span class="keyword">public</span> ProblemDetail <span class="title function_">handleAllExceptions</span><span class="params">(<span class="keyword">final</span> Throwable ex, <span class="keyword">final</span> WebRequest request)</span> &#123;</span><br><span class="line">  log.warn(ex.getMessage(), ex);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.slack.notify(format(<span class="string">&quot;[API] InternalServerError: %s&quot;</span>, ex.getMessage()));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.buildProblemDetail(HttpStatus.INTERNAL_SERVER_ERROR, API_DEFAULT_ERROR_MESSAGE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;about:blank&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Internal Server Error&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="string">&quot;detail&quot;</span>: <span class="string">&quot;Something went wrong. Please try again later or enter in contact with our service.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;instance&quot;</span>: <span class="string">&quot;/back-office/hello-world&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当有无法处理的异常时，就需要配置一个兜底的异常。</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CompanyRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Company, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">String</span> <span class="variable">CACHE_NAME</span> <span class="operator">=</span> <span class="string">&quot;company&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@Cacheable(value = CACHE_NAME, key = &quot;&#123;&#x27;byId&#x27;, #id&#125;&quot;)</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  Optional&lt;Company&gt; <span class="title function_">findById</span><span class="params">(<span class="meta">@NonNull</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Cacheable(value = CACHE_NAME, key = &quot;&#123;&#x27;bySlug&#x27;, #slug&#125;&quot;)</span></span><br><span class="line">  Optional&lt;Company&gt; <span class="title function_">findBySlug</span><span class="params">(String slug)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Caching(</span></span><br><span class="line"><span class="meta">      evict = &#123;</span></span><br><span class="line"><span class="meta">        @CacheEvict(value = CACHE_NAME, key = &quot;&#123;&#x27;byId&#x27;, #entity.id&#125;&quot;),</span></span><br><span class="line"><span class="meta">        @CacheEvict(value = CACHE_NAME, key = &quot;&#123;&#x27;bySlug&#x27;, #entity.slug&#125;&quot;),</span></span><br><span class="line"><span class="meta">      &#125;)</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  &lt;S <span class="keyword">extends</span> <span class="title class_">Company</span>&gt; <span class="meta">@NonNull</span> S <span class="title function_">save</span><span class="params">(<span class="meta">@NonNull</span> S entity)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * This cache implementation is only valid if the table is not</span></span><br><span class="line"><span class="comment">   * frequently updated since it will clear the cache at every update operation</span></span><br><span class="line"><span class="comment">   * If you want to be more performant you can use something like https://github.com/ms100/cache-as-multi</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CacheEvict(cacheNames = CACHE_NAME, allEntries = true)</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  &lt;S <span class="keyword">extends</span> <span class="title class_">Company</span>&gt; List&lt;S&gt; <span class="title function_">saveAll</span><span class="params">(<span class="meta">@NonNull</span> Iterable&lt;S&gt; entities)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Caching(</span></span><br><span class="line"><span class="meta">      evict = &#123;</span></span><br><span class="line"><span class="meta">        @CacheEvict(value = CACHE_NAME, key = &quot;&#123;&#x27;byId&#x27;, #entity.id&#125;&quot;),</span></span><br><span class="line"><span class="meta">        @CacheEvict(value = CACHE_NAME, key = &quot;&#123;&#x27;bySlug&#x27;, #entity.slug&#125;&quot;),</span></span><br><span class="line"><span class="meta">      &#125;)</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@NonNull</span> Company entity)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * This cache implementation is only valid if the table is not</span></span><br><span class="line"><span class="comment">   * frequently updated since it will clear the cache at every delete operation</span></span><br><span class="line"><span class="comment">   * If you want to be more performant you can use something like https://github.com/ms100/cache-as-multi</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">  <span class="meta">@CacheEvict(cacheNames = CACHE_NAME, allEntries = true)</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">deleteAll</span><span class="params">(<span class="meta">@NonNull</span> Iterable&lt;? extends Company&gt; entities)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring 提供了标准的缓存接口，即便是后续需要切换到 Redis，使用的 API 和注解都不会发生改变。</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>Java21 后支持了虚拟线程，几乎可以无限的实现线程，在 Spring Boot 3.2 需要单独开启。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.threads.virtual.enabled</span><br></pre></td></tr></table></figure><h3 id="可观测性"><a href="#可观测性" class="headerlink" title="可观测性"></a>可观测性</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">info,</span> <span class="string">health,</span> <span class="string">prometheus,</span> <span class="string">metrics</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/20/Wh3toXGSJV7AU45.png" alt="image.png"></p><blockquote><p>注意在生成环境不要暴露管理 API</p></blockquote><h3 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-tracing-bridge-otel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.ttddyy.observation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>datasource-micrometer-spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;datasource-micrometer.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.opentelemetry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>opentelemetry-exporter-otlp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;opentelemetry-exporter-otlp.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同步请求的时候每个请求都会带上 <code>traceId</code> 和 <code>spanId</code> ，如果是异步请求时候需要配置：<code>spring.reactor.context-propagation=true</code></p><p>如果使用 <code>@Async</code>时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskExecutorConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Override default SimpleAsyncTaskExecutor to provide context propagation in @Async function</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> TaskExecutor <span class="title function_">simpleAsyncTaskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">SimpleAsyncTaskExecutor</span> <span class="variable">taskExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAsyncTaskExecutor</span>();</span><br><span class="line">    taskExecutor.setTaskDecorator(<span class="keyword">new</span> <span class="title class_">ContextPropagatingTaskDecorator</span>());</span><br><span class="line">    <span class="keyword">return</span> taskExecutor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本地测试时候可以使用 <a href="https://github.com/CtrlSpice/otel-desktop-viewer">Otel Desktop Viewer</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span>  </span><br><span class="line">  <span class="attr">tracing:</span></span><br><span class="line">    <span class="attr">sampling:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">otlp:</span></span><br><span class="line">    <span class="attr">tracing:</span></span><br><span class="line">      <span class="attr">endpoint:</span> <span class="string">http://localhost:4317</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/12/20/r8ko5fm1xTFDLc3.png" alt="image.png"></p><h2 id="Rust-Vs-Go-A-Hands-On-Comparison"><a href="#Rust-Vs-Go-A-Hands-On-Comparison" class="headerlink" title="Rust Vs Go: A Hands-On Comparison"></a>Rust Vs Go: A Hands-On Comparison</h2><p>URL: <a href="https://www.shuttle.rs/blog/2023/09/27/rust-vs-go-comparison">https://www.shuttle.rs/blog/2023/09/27/rust-vs-go-comparison</a></p><blockquote><p>动手比较 Rust 和 Go</p></blockquote><p><img src="https://s2.loli.net/2023/12/23/O5frBYd1pPevzXE.png" alt="image.png"></p><p>本文是通过编写一个 web 服务来进行比较的。</p><ul><li>Go 更加简单易学，同时标准库非常强大，只需要配合 gin+sqlx 这两个第三方库就能实现一个 web 服务</li><li>Rust也可以快速的构建一个安全的 web 服务，但需要依赖许多第三方库，比如http&#x2F;JSON&#x2F;模板引擎&#x2F;时间处理等</li><li>但 Rust 在异常处理方面心智负担更低，代码更容易阅读。</li><li>如果是一个初创小团队，使用 Go 的上手难度确实更低；</li><li>但如果团队愿意花时间投入到 Rust 中，结合他出色的错误处理，和强大的编译检查，长时间来看会得到更好的效果。</li></ul><h2 id="为什么要使用-Go-语言？Go-语言的优势在哪里？-知乎"><a href="#为什么要使用-Go-语言？Go-语言的优势在哪里？-知乎" class="headerlink" title="为什么要使用 Go 语言？Go 语言的优势在哪里？ - 知乎"></a>为什么要使用 Go 语言？Go 语言的优势在哪里？ - 知乎</h2><p>URL: <a href="https://www.zhihu.com/question/21409296/answer/1040884859">https://www.zhihu.com/question/21409296/answer/1040884859</a></p><blockquote><p>图文并茂，讲解了 G-M-P 各自之间的关系，以及调度模型。</p></blockquote><p><img src="https://s2.loli.net/2023/12/23/mpNuQKGijy3d6WC.png" alt="image.png"></p><ul><li>G: <strong>Goroutine</strong>，用户创建的协程，图中搬运的砖头。</li><li>M: <strong>Machine</strong>，OS 内核的线程的抽象，代表真正执行的资源；对应到就是图中的地鼠，地鼠不能用户直接创建；得是砖头 G 太多，地鼠 M 本身太少，同时还有空闲的小车 P，此时就会从其他地方借一些地鼠 M 过来直到把小车 P 用完为止。</li><li>P: Processor 处理器，G 只有绑定到 P 才能被调度；P 是图中的小车，由用户设置的 <code>GoMAXPROCS</code> 决定小车的数量。</li></ul><p>文章链接：</p><ul><li><a href="https://blog.canopas.com/golang-14-shorthand-tricks-you-might-not-know-8d8d21954c49">https://blog.canopas.com/golang-14-shorthand-tricks-you-might-not-know-8d8d21954c49</a></li><li><a href="https://medium.com/@jojoooo/exploring-a-base-spring-boot-application-with-java-21-virtual-thread-spring-security-flyway-c0fde13c1eca#551c">https://medium.com/@jojoooo/exploring-a-base-spring-boot-application-with-java-21-virtual-thread-spring-security-flyway-c0fde13c1eca#551c</a></li><li><a href="https://www.zhihu.com/question/21409296/answer/1040884859">https://www.zhihu.com/question/21409296/answer/1040884859</a></li></ul><p>#Newletters </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/12/23/VibnQF1pM2K6fsd.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术阅读周刊，每周更新。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    <category term="Newsletter" scheme="http://crossoverjie.top/categories/OB/Newsletter/"/>
    
    
  </entry>
  
  <entry>
    <title>如何给开源项目发起提案</title>
    <link href="http://crossoverjie.top/2023/12/21/ob/Pulsar%20Proposal/"/>
    <id>http://crossoverjie.top/2023/12/21/ob/Pulsar%20Proposal/</id>
    <published>2023-12-21T03:09:52.000Z</published>
    <updated>2023-12-21T10:10:37.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>前段时间在使用 Pulsar 的 admin API 时，发现其中的一个接口响应非常慢：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.topics().getPartitionedStats(topic);</span><br></pre></td></tr></table></figure><p>使用 curl 拿到的响应结果非常大，同时也非常耗时：<br><img src="https://s2.loli.net/2023/12/21/dMsUq1eFNz9IoYC.png" alt="image.png"></p><p>具体的 issue 在这里：<a href="https://github.com/apache/pulsar/issues/21200">https://github.com/apache/pulsar/issues/21200</a></p><span id="more"></span><p>后面经过分析，是因为某些 topic 的生产者和消费者非常多，导致这个查询 topic 统计的接口数据量非常大。<br><img src="https://s2.loli.net/2023/12/21/CIwr3qivSQyPnEx.png" alt="image.png"></p><p>但在我这个场景其实是不需要这些生产者和消费者信息的，现在就导致这个 topic 无法查看状态，所以就建议新增两个参数可以过滤这两个字段。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>因为涉及到新增 API 了，所以社区维护者就建议我起草一个提案试试：<br><img src="https://s2.loli.net/2023/12/21/qyDmVHRsFBoewiQ.png" alt="image.png"></p><h2 id="什么时候需要提案"><a href="#什么时候需要提案" class="headerlink" title="什么时候需要提案"></a>什么时候需要提案</h2><p>此时就涉及到什么情况下需要给社区发起一个提案的问题了。<br><img src="https://s2.loli.net/2023/12/21/VH8NqwgWcROLXhP.png" alt="image.png"><br>在官方的提案指南中有着详细的说明，简单来说就是：</p><ul><li>对任何模块新增了 API、或者是重大改动的新特性、监控指标、配置参数时都需要发起提案</li><li>对应的如果只是对现有 bug 的修复、文档等一些可控的变更时，是不需要发起提案的，直接提交 PR 即可。</li></ul><h3 id="提案步骤"><a href="#提案步骤" class="headerlink" title="提案步骤"></a>提案步骤</h3><h4 id="起草"><a href="#起草" class="headerlink" title="起草"></a>起草</h4><p>首先第一步就是根据官方模版起草一个提案：<br>重点描述背景、目的、详细设计等。<br><img src="https://s2.loli.net/2023/12/21/eT7xQEk3li6Rdyp.png" alt="image.png"><br>并发起一个 PR，如果不确定怎么写的话可以参考已经合并了的提案。</p><h4 id="邮件讨论"><a href="#邮件讨论" class="headerlink" title="邮件讨论"></a>邮件讨论</h4><p>之后则是将这个 PR 发送到开发组邮箱中，让社区成员参与讨论。</p><p><img src="https://s2.loli.net/2023/12/21/cAlZLYGEOqiyMoh.png" alt="image.png"><br>这一步可能会比较耗时，提案内容可能会被反复修改。</p><p>发起提案的一个重要目的是可以让社区成员进行讨论，评估是否需要这个提案或者是否<br>有其他解决方法。</p><h4 id="发起投票"><a href="#发起投票" class="headerlink" title="发起投票"></a>发起投票</h4><p>经过讨论，如果提案获得通过后就可以发起投票了，至少需要有三个 binding 通过的投票后这个提案就通过了。</p><blockquote><p>虽然任何人都可以参与投票，但社区只会考虑 PMC 的投票建议；投票的时效性也只有 48h。</p></blockquote><p><img src="https://s2.loli.net/2023/12/21/SiHbGyRzX1kBTjt.png" alt="image.png"></p><p>48 小时候便可以发一个投票结果的邮件，如果达到通过条件便可以通知参与投票的 PMC 合并这个 PR 了。<br><img src="https://s2.loli.net/2023/12/21/r7tm8pyVER6QvCf.png" alt="image.png"></p><h4 id="实现提案"><a href="#实现提案" class="headerlink" title="实现提案"></a>实现提案</h4><p>之后就是没啥好说的实现过程，因为通常我们是需要在提案里详细描述实现过程以及涉及到修改的地方。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>只要提案被 review 通过后实现起来就非常简单了，跟着提案里的流程实现就好了。</p><blockquote><p>这点非常类似于我们在企业中对某个业务做技术方案，如果大家都按照类似的流程严格审核方案，那实现起来是非常快的，而且可以尽量的减少事后扯皮。</p></blockquote><p>所以最后我的实现 PR 提交之后，都没有任何的修改意见，直接就合并了；也大大降低了审核人员的负担，提高整体效率。</p><p>以上就是我第一次参与 Pulsar 社区的提案过程，我猜测其他社区的流程也是大差不差；其中重点就是异步沟通；大家都认可之后真的会比实时通信的效率高很多。</p><p>具体的提案细节可以阅读官方指南 <a href="https://github.com/apache/pulsar/blob/master/pip/README.md">https://github.com/apache/pulsar/blob/master/pip/README.md</a></p><p>#Blog #Pulsar </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;前段时间在使用 Pulsar 的 admin API 时，发现其中的一个接口响应非常慢：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;admin.topics().getPartitionedStats(topic);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 curl 拿到的响应结果非常大，同时也非常耗时：&lt;br&gt;&lt;img src=&quot;https://s2.loli.net/2023/12/21/dMsUq1eFNz9IoYC.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;具体的 issue 在这里：&lt;a href=&quot;https://github.com/apache/pulsar/issues/21200&quot;&gt;https://github.com/apache/pulsar/issues/21200&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    
    <category term="Pulsar" scheme="http://crossoverjie.top/tags/Pulsar/"/>
    
  </entry>
  
  <entry>
    <title>技术阅读周刊第🔟期</title>
    <link href="http://crossoverjie.top/2023/12/15/ob/newsletter/Newsletter10-20231215/"/>
    <id>http://crossoverjie.top/2023/12/15/ob/newsletter/Newsletter10-20231215/</id>
    <published>2023-12-15T09:28:25.000Z</published>
    <updated>2023-12-16T07:59:26.164Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/12/16/keYlOC74XMoPAvZ.png"></p><p><strong>技术阅读周刊，每周更新。</strong></p><span id="more"></span><h2 id="历史更新"><a href="#历史更新" class="headerlink" title="历史更新"></a>历史更新</h2><ul><li><a href="https://crossoverjie.top/2023/11/17/ob/newsletter/Newsletter06-20231117/">20231117：第六期</a></li><li><a href="https://crossoverjie.top/2023/11/24/ob/newsletter/Newsletter07-20231124/">20231124：第七期</a></li><li><a href="https://crossoverjie.top/2023/12/01/ob/newsletter/Newsletter08-20231201/">20231201：第八期</a></li><li><a href="https://crossoverjie.top/2023/12/08/ob/newsletter/Newsletter09-20231208/">20231215：第九期</a><!--more--></li></ul><h2 id="Golang-14-Shorthand-Tricks-You-Might-Not-Know-by-Nidhi-D-Dec-2023-Canopas"><a href="#Golang-14-Shorthand-Tricks-You-Might-Not-Know-by-Nidhi-D-Dec-2023-Canopas" class="headerlink" title="Golang: 14 Shorthand Tricks You Might Not Know! | by Nidhi D | Dec, 2023 | Canopas"></a>Golang: 14 Shorthand Tricks You Might Not Know! | by Nidhi D | Dec, 2023 | Canopas</h2><p>URL: <a href="https://blog.canopas.com/golang-14-shorthand-tricks-you-might-not-know-8d8d21954c49">https://blog.canopas.com/golang-14-shorthand-tricks-you-might-not-know-8d8d21954c49</a></p><h3 id="同时声明和初始化变量"><a href="#同时声明和初始化变量" class="headerlink" title="同时声明和初始化变量"></a>同时声明和初始化变量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line"><span class="keyword">var</span> message <span class="type">string</span>  </span><br><span class="line">message = <span class="string">&quot;Hello, Golang!&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line">message := <span class="string">&quot;Hello, Golang!&quot;</span></span><br></pre></td></tr></table></figure><h3 id="声明和初始化多个变量"><a href="#声明和初始化多个变量" class="headerlink" title="声明和初始化多个变量"></a>声明和初始化多个变量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line"><span class="keyword">var</span> a, b, c <span class="type">int</span>  </span><br><span class="line">a = <span class="number">1</span>  </span><br><span class="line">b = <span class="number">2</span>  </span><br><span class="line">c = <span class="number">3</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line">a, b, c := <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="交换变量"><a href="#交换变量" class="headerlink" title="交换变量"></a>交换变量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a, b := <span class="number">1</span>, <span class="number">2</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Long form  </span></span><br><span class="line">temp := a  </span><br><span class="line">a = b  </span><br><span class="line">b = temp  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure><h3 id="Defer-函数调用"><a href="#Defer-函数调用" class="headerlink" title="Defer 函数调用"></a>Defer 函数调用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cleanup</span><span class="params">()</span></span> &#123;  </span><br><span class="line"><span class="comment">// Cleanup logic  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">defer</span> cleanup()  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;  </span><br><span class="line"><span class="comment">// Cleanup logic  </span></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><h3 id="检测-Map-中的数据是否存在"><a href="#检测-Map-中的数据是否存在" class="headerlink" title="检测 Map 中的数据是否存在"></a>检测 Map 中的数据是否存在</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line">value, exists := myMap[key]  </span><br><span class="line"><span class="keyword">if</span> !exists &#123;  </span><br><span class="line">    <span class="comment">// Key doesn&#x27;t exist in the map  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line"><span class="keyword">if</span> value, exists := myMap[key]; !exists &#123;  </span><br><span class="line">    <span class="comment">// Key doesn&#x27;t exist in the map  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用下标和值迭代切片"><a href="#使用下标和值迭代切片" class="headerlink" title="使用下标和值迭代切片"></a>使用下标和值迭代切片</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(numbers); i++ &#123;  </span><br><span class="line">fmt.Println(i, numbers[i])  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line"><span class="keyword">for</span> i, value := <span class="keyword">range</span> numbers &#123;  </span><br><span class="line">fmt.Println(i, value)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误检测"><a href="#错误检测" class="headerlink" title="错误检测"></a>错误检测</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line">result, err := someFunction()  </span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line"><span class="comment">// Handle the error  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line"><span class="keyword">if</span> result, err := someFunction(); err != <span class="literal">nil</span> &#123;  </span><br><span class="line"><span class="comment">// Handle the error  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建一个变量的指针"><a href="#创建一个变量的指针" class="headerlink" title="创建一个变量的指针"></a>创建一个变量的指针</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line"><span class="keyword">var</span> x <span class="type">int</span>  </span><br><span class="line">ptr := &amp;x  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line">ptr := <span class="built_in">new</span>(<span class="type">int</span>)</span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;  </span><br><span class="line"><span class="keyword">return</span> x + y  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line">add := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;  </span><br><span class="line"><span class="keyword">return</span> x + y  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建和初始化-Map"><a href="#创建和初始化-Map" class="headerlink" title="创建和初始化 Map"></a>创建和初始化 Map</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line">colors := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)  </span><br><span class="line">colors[<span class="string">&quot;red&quot;</span>] = <span class="string">&quot;#ff0000&quot;</span>  </span><br><span class="line">colors[<span class="string">&quot;green&quot;</span>] = <span class="string">&quot;#00ff00&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line">colors := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;  </span><br><span class="line"><span class="string">&quot;red&quot;</span>: <span class="string">&quot;#ff0000&quot;</span>,  </span><br><span class="line"><span class="string">&quot;green&quot;</span>: <span class="string">&quot;#00ff00&quot;</span>,  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明多个常量"><a href="#声明多个常量" class="headerlink" title="声明多个常量"></a>声明多个常量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Long form  </span></span><br><span class="line"><span class="keyword">const</span> pi <span class="type">float64</span> = <span class="number">3.14159</span>  </span><br><span class="line"><span class="keyword">const</span> maxAttempts <span class="type">int</span> = <span class="number">3</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Shorthand  </span></span><br><span class="line"><span class="keyword">const</span> (  </span><br><span class="line">pi = <span class="number">3.14159</span>  </span><br><span class="line">maxAttempts = <span class="number">3</span>  </span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Java-Mastery-Unleashed-12-Essential-Tips-Every-Developer-Must-Embrace"><a href="#Java-Mastery-Unleashed-12-Essential-Tips-Every-Developer-Must-Embrace" class="headerlink" title="Java Mastery Unleashed: 12 Essential Tips Every Developer Must Embrace"></a>Java Mastery Unleashed: 12 Essential Tips Every Developer Must Embrace</h2><p>URL: <a href="https://blog.stackademic.com/boost-your-java-skills-12-must-know-programming-tips-for-java-developers-34f8381ec431">https://blog.stackademic.com/boost-your-java-skills-12-must-know-programming-tips-for-java-developers-34f8381ec431</a></p><blockquote><p>一些常用的 Java 技巧</p></blockquote><ul><li><p>善用 Lambda 表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Before</span></span><br><span class="line">List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line"><span class="keyword">for</span> (Person person : people) &#123;  </span><br><span class="line">names.add(person.getName());  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// After</span></span><br><span class="line">List&lt;String&gt; names = people.stream()  </span><br><span class="line">.map(Person::getName)  </span><br><span class="line">.collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li><li><p>使用 Optionals 替代 null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; maybeName = Optional.ofNullable(person.getName());  </span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> maybeName.orElse(<span class="string">&quot;Unknown&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用 stream 简化集合操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; evenNumbers = numbers.stream()  </span><br><span class="line">.filter(num -&gt; num % <span class="number">2</span> == <span class="number">0</span>)  </span><br><span class="line">.collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li><li><p>String.format 拼接字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot; World&quot;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s%s&quot;</span>, s1, s2);</span><br></pre></td></tr></table></figure></li><li><p>使用 default method 扩展接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TimeClient</span> &#123;  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setTime</span><span class="params">(<span class="type">int</span> hour, <span class="type">int</span> minute, <span class="type">int</span> second)</span>;  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setDate</span><span class="params">(<span class="type">int</span> day, <span class="type">int</span> month, <span class="type">int</span> year)</span>;  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setDateAndTime</span><span class="params">(<span class="type">int</span> day, <span class="type">int</span> month, <span class="type">int</span> year, <span class="type">int</span> hour, <span class="type">int</span> minute, <span class="type">int</span> second)</span>;  </span><br><span class="line">LocalDateTime <span class="title function_">getLocalDateTime</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用枚举替换常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Level</span> &#123; LOW, MEDIUM, HIGH &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Level</span> <span class="variable">myVar</span> <span class="operator">=</span> Level.MEDIUM;</span><br><span class="line">        System.out.println(myVar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 try-with-Resource 管理资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;example.txt&quot;</span>);</span><br><span class="line">     <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fileReader)) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">    <span class="comment">// Process the file</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">// Handle the exception</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="SpringBoot-Webflux-vs-Vert-x-Performance-comparison-for-hello-world-case-Tech-Tonic"><a href="#SpringBoot-Webflux-vs-Vert-x-Performance-comparison-for-hello-world-case-Tech-Tonic" class="headerlink" title="SpringBoot Webflux vs Vert.x: Performance comparison for hello world case | Tech Tonic"></a>SpringBoot Webflux vs Vert.x: Performance comparison for hello world case | Tech Tonic</h2><p>URL: <a href="https://medium.com/deno-the-complete-reference/springboot-webflux-vs-vert-x-performance-comparison-for-hello-world-case-41a6bd8e9f8c">https://medium.com/deno-the-complete-reference/springboot-webflux-vs-vert-x-performance-comparison-for-hello-world-case-41a6bd8e9f8c</a></p><blockquote><p>本文对比了 SpringBoot Webflux 和 Vert.x 的性能对比</p></blockquote><p>以下是两个框架写的压测接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.config.EnableWebFlux;</span><br><span class="line"><span class="keyword">import</span> org.reactivestreams.Publisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableWebFlux</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        SpringApplication.run(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Publisher&lt;String&gt; <span class="title function_">handler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vert.x</span></span><br><span class="line"><span class="keyword">package</span> com.example.starter;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> io.vertx.core.AbstractVerticle;  </span><br><span class="line"><span class="keyword">import</span> io.vertx.core.Promise;  </span><br><span class="line"><span class="keyword">import</span> io.vertx.core.http.HttpServer;  </span><br><span class="line"><span class="keyword">import</span> io.vertx.ext.web.Router;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainVerticle</span> <span class="keyword">extends</span> <span class="title class_">AbstractVerticle</span> &#123;  </span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span>  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Promise&lt;Void&gt; startPromise)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">    <span class="type">HttpServer</span> <span class="variable">server</span> <span class="operator">=</span> vertx.createHttpServer();  </span><br><span class="line">    <span class="type">Router</span> <span class="variable">router</span> <span class="operator">=</span> Router.router(vertx);  </span><br><span class="line">  </span><br><span class="line">    router.get(<span class="string">&quot;/&quot;</span>).respond(ctx -&gt; ctx  </span><br><span class="line">        .response()  </span><br><span class="line">        .putHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain&quot;</span>)  </span><br><span class="line">        .end(<span class="string">&quot;hello world!&quot;</span>));  </span><br><span class="line">  </span><br><span class="line">    server.requestHandler(router).listen(<span class="number">3000</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后直接看对比结果吧：<br><img src="https://s2.loli.net/2023/12/13/smHjAKqN32ETX6I.png" alt="image.png"><br><img src="https://s2.loli.net/2023/12/13/ylwjNGvxUEmgQ5i.png" alt="image.png"><br><img src="https://s2.loli.net/2023/12/13/yY72ipAab8jetUT.png" alt="image.png"><br>最终作者根据一个计算公式得出两个框架的得分，规则如下：</p><ul><li>差距小于 5% 不得分</li><li>5～20 得 1 分</li><li>20～50 得两分</li><li>大于 50，得三分<br><img src="https://s2.loli.net/2023/12/13/wNPSTLRyIt79k85.png" alt="image.png"><br>最终是 <code>Vert.x</code> 得分超过 <code>Webflux</code> 55%⬆️</li></ul><p>不过个人觉得压测结果再好，套上业务后，比如一个接口查询了多个后端服务，后端服务有依赖于多个数据库，最终出来的 RT 大家都差不多。</p><p>除非是某些对性能极致要求的场景，比如实时数据分析、物联网中间件等和直接业务不太相关领域。</p><p>它的底层依然是 Netty，但比 Netty 提供了跟易用的 API。</p><h2 id="Git-Cherry-Pick-Examples-to-Apply-Hot-Fixes-and-Security-Patches-—-Nick-Janetakis"><a href="#Git-Cherry-Pick-Examples-to-Apply-Hot-Fixes-and-Security-Patches-—-Nick-Janetakis" class="headerlink" title="Git Cherry Pick Examples to Apply Hot Fixes and Security Patches — Nick Janetakis"></a>Git Cherry Pick Examples to Apply Hot Fixes and Security Patches — Nick Janetakis</h2><p>URL: <a href="https://nickjanetakis.com/blog/git-cherry-pick-examples-to-apply-hot-fixes-and-security-patches?ref=dailydev">https://nickjanetakis.com/blog/git-cherry-pick-examples-to-apply-hot-fixes-and-security-patches?ref=dailydev</a></p><blockquote><p>讲解了 git cherry-pick 的作用，什么时候该用，什么时候不用。</p></blockquote><p>举个例子：<br>一些大型的开源项目往往都会有一个主分子，同时维护了不同版本的子分支，有些用户可能就会一直使用一些长期维护的子分支，比如 <code>v2.1.0 \ v2.3.0</code></p><p>但对于大部分的开发者来说主要会维护主分支，也会在主分支上推进一些新功能，这些新功能不一定会同步到上述提到的两个老版本中。</p><p>但对于一些安全漏洞，重大 bug 等是需要同步到这些子分支的，但又不能把一些不兼容的新特性同步到子分支中。</p><p>此时就可以使用  cherry-pick 这个功能，只将某一个提交给 pick 到目标分支中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cherry pick more than 1 SHA.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This could be useful if you have a handful of commits that you want to bring over,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">you<span class="string">&#x27;ll likely want to order them with the oldest commit being first in the list.</span></span></span><br><span class="line">git cherry-pick &lt;SHA&gt; &lt;SHA&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Edit the git commit message for the newly applied commit.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># This could be useful if want to customize the git commit message with extra context.</span></span></span><br><span class="line">git cherry-pick &lt;SHA&gt; --edit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Avoid automatically creating the commit which lets you edit the files first.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># This could be useful if you need to make manual code adjustments before committing,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">such as applying a security patch which uses an older library with a different API.</span></span></span><br><span class="line">git cherry-pick &lt;SHA&gt; --no-commit</span><br></pre></td></tr></table></figure><p>文章链接：</p><ul><li><a href="https://blog.canopas.com/golang-14-shorthand-tricks-you-might-not-know-8d8d21954c49">https://blog.canopas.com/golang-14-shorthand-tricks-you-might-not-know-8d8d21954c49</a></li><li><a href="https://blog.stackademic.com/boost-your-java-skills-12-must-know-programming-tips-for-java-developers-34f8381ec431">https://blog.stackademic.com/boost-your-java-skills-12-must-know-programming-tips-for-java-developers-34f8381ec431</a></li><li><a href="https://medium.com/deno-the-complete-reference/springboot-webflux-vs-vert-x-performance-comparison-for-hello-world-case-41a6bd8e9f8c">https://medium.com/deno-the-complete-reference/springboot-webflux-vs-vert-x-performance-comparison-for-hello-world-case-41a6bd8e9f8c</a></li><li><a href="https://nickjanetakis.com/blog/git-cherry-pick-examples-to-apply-hot-fixes-and-security-patches?ref=dailydev">https://nickjanetakis.com/blog/git-cherry-pick-examples-to-apply-hot-fixes-and-security-patches?ref=dailydev</a></li></ul><p>#Newletters </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/12/16/keYlOC74XMoPAvZ.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术阅读周刊，每周更新。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    <category term="Newsletter" scheme="http://crossoverjie.top/categories/OB/Newsletter/"/>
    
    
  </entry>
  
  <entry>
    <title>如何编写一个 Pulsar Broker Interceptor 插件</title>
    <link href="http://crossoverjie.top/2023/12/11/ob/Pulsar-Broker-Interceptor/"/>
    <id>http://crossoverjie.top/2023/12/11/ob/Pulsar-Broker-Interceptor/</id>
    <published>2023-12-11T08:38:27.000Z</published>
    <updated>2023-12-28T02:14:15.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>之前写过一篇文章 <a href="https://crossoverjie.top/2023/08/23/ob/VictoriaLogs-Intro/">VictoriaLogs：一款超低占用的 ElasticSearch 替代方案</a>讲到了我们使用 <code>Victorialogs</code> 来存储 Pulsar 消息队列的消息 trace 信息。</p><p><img src="https://s2.loli.net/2023/12/11/UYdMH19uyjrNA2I.png" alt="image.png"></p><p>而其中的关键的埋点信息是通过 Pulsar 的 <code>BrokerInterceptor</code> 实现的，后面就有朋友咨询这块代码是否开源，目前是没有开源的，不过借此机会可以聊聊如何实现一个 <code>BrokerInterceptor</code> 插件，当前还没有相关的介绍文档。</p><span id="more"></span><p>其实当时我在找 <code>BrokerInterceptor</code> 的相关资料时就发现官方并没有提供对应的开发文档。</p><p>只有一个 <a href="https://pulsar.apache.org/docs/3.1.x/develop-plugin/#what-is-an-additional-servlet">additional servlet</a>的开发文档，而 <code>BrokerInterceptor</code> 只在 <a href="https://www.youtube.com/watch?v=alzv7FyOoP0">YouTube</a> 上找到了一个社区分享的视频。<br><img src="https://s2.loli.net/2023/12/11/H3rs8OdYZecQEn5.png" alt="image.png"></p><p>虽说看视频可以跟着实现，但总归是没有文档方便。</p><hr><p>在这之前还是先讲讲 <code>BrokerInterceptor</code> 有什么用？<br><img src="https://s2.loli.net/2023/12/11/F8cxdwsTyWuaVGg.png" alt="image.png"></p><p>其实从它所提供的接口就能看出，在消息到达 Broker 后的一些关键节点都提供了相关的接口，实现这些接口就能做很多事情了，比如我这里所需要的消息追踪。</p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>下面开始如何使用 <code>BrokerInterceptor</code>：<br>首先是创建一个 <code>Maven</code> 项目，然后引入相关的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.pulsar<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pulsar-broker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pulsar.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h1><p>然后我们便可以实现 <code>org.apache.pulsar.broker.intercept.BrokerInterceptor</code> 来完成具体的业务了。</p><p>在我们做消息追踪的场景下，我们实现了以下几个接口：</p><ul><li>messageProduced</li><li>messageDispatched</li><li>messageAcked</li></ul><p>以 <code>messageProduced</code> 为例，需要解析出消息ID，然后拼接成一个字符串写入 <code>Victorialogs</code> 存储中，其余的两个埋点也是类似的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">messageProduced</span><span class="params">(ServerCnx cnx, Producer producer, <span class="type">long</span> startTimeNs, <span class="type">long</span> ledgerId, <span class="type">long</span> entryId,  </span></span><br><span class="line"><span class="params">                            Topic.PublishContext publishContext)</span> &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">ns</span> <span class="operator">=</span> getNs(producer.getTopic().getName());  </span><br><span class="line">    <span class="keyword">if</span> (!LogSender.checkNamespace(ns)) &#123;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;    <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> producer.getTopic().getName();  </span><br><span class="line">    <span class="type">String</span> <span class="variable">partition</span> <span class="operator">=</span> getPartition(topic);  </span><br><span class="line">    <span class="type">String</span> <span class="variable">msgId</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s:%s:%s&quot;</span>, ledgerId, entryId, partition);  </span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Event</span>.Publish(msgId, producer.getClientAddress(), System.currentTimeMillis(),  </span><br><span class="line">            producer.getProducerName(), topic).toString();  </span><br><span class="line">    LogSender.send(s);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="编写项目描述文件"><a href="#编写项目描述文件" class="headerlink" title="编写项目描述文件"></a>编写项目描述文件</h1><p>我们需要创建一个项目描述文件，路径如下：<br><code>src/main/resources/META-INF/services/broker_interceptor.yml</code><br>名字也是固定的，broker 会在启动的时候读取这个文件，其内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">interceptor-name</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">description</span></span><br><span class="line"><span class="attr">interceptorClass:</span> <span class="string">com.xx.CustomInterceptor</span></span><br></pre></td></tr></table></figure><p>重点是填写自定义实现类的全限定名。</p><h1 id="配置打包插件"><a href="#配置打包插件" class="headerlink" title="配置打包插件"></a>配置打包插件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.nifi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nifi-nar-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;-$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-nar<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>nar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于 Broker 识别的是 nar 包，所以我们需要配置 nar 包插件，之后使用 <code>mvn package</code> 就会生成出 nar 包。</p><h1 id="配置-broker-conf"><a href="#配置-broker-conf" class="headerlink" title="配置 broker.conf"></a>配置 broker.conf</h1><p>我们还需要在 broker.conf 中配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brokerInterceptors: &quot;interceptor-name&quot;</span><br></pre></td></tr></table></figure><p>也就是刚才配置的插件名称。</p><p>不过需要注意的是，如果你是使用 helm 安装的 pulsar，在 3.1 版本之前需要手动将<code>brokerInterceptors</code> 写入到 <code>broker.conf</code> 中。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> apachepulsar/pulsar-all:<span class="number">3.0</span>.<span class="number">1</span>  </span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> target/interceptor-1.0.1.nar /pulsar/interceptors/  </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;\n&quot;</span> &gt;&gt; /pulsar/conf/broker.conf  </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;brokerInterceptors=&quot;</span> &gt;&gt; /pulsar/conf/broker.conf</span></span><br></pre></td></tr></table></figure><p>不然在最终容器中的 <code>broker.conf</code> 中是读取不到这个配置的，导致插件没有生效。</p><blockquote><p>我们是重新基于官方镜像打的一个包含自定义插件的镜像，最终使用这个镜像进行部署。</p></blockquote><p><a href="https://github.com/apache/pulsar/pull/20719">https://github.com/apache/pulsar/pull/20719</a><br>我在这个 PR 中已经将配置加入进去了，但得在 3.1 之后才能生效；也就是在 3.1 之前都得加上加上这行：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;\n&quot;</span> &gt;&gt; /pulsar/conf/broker.conf  </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;brokerInterceptors=&quot;</span> &gt;&gt; /pulsar/conf/broker.conf</span></span><br></pre></td></tr></table></figure><hr><p>目前来看 Pulsar 的 <code>BrokerInterceptor</code> 应该使用不多，不然使用 helm 安装时是不可能生效的；而且官方文档也没用相关的描述。</p><p>#Blog #Pulsar </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;之前写过一篇文章 &lt;a href=&quot;https://crossoverjie.top/2023/08/23/ob/VictoriaLogs-Intro/&quot;&gt;VictoriaLogs：一款超低占用的 ElasticSearch 替代方案&lt;/a&gt;讲到了我们使用 &lt;code&gt;Victorialogs&lt;/code&gt; 来存储 Pulsar 消息队列的消息 trace 信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/12/11/UYdMH19uyjrNA2I.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;而其中的关键的埋点信息是通过 Pulsar 的 &lt;code&gt;BrokerInterceptor&lt;/code&gt; 实现的，后面就有朋友咨询这块代码是否开源，目前是没有开源的，不过借此机会可以聊聊如何实现一个 &lt;code&gt;BrokerInterceptor&lt;/code&gt; 插件，当前还没有相关的介绍文档。&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    
    <category term="Pulsar" scheme="http://crossoverjie.top/tags/Pulsar/"/>
    
  </entry>
  
  <entry>
    <title>技术阅读周刊第9️⃣期</title>
    <link href="http://crossoverjie.top/2023/12/08/ob/newsletter/Newsletter09-20231208/"/>
    <id>http://crossoverjie.top/2023/12/08/ob/newsletter/Newsletter09-20231208/</id>
    <published>2023-12-08T09:28:25.000Z</published>
    <updated>2023-12-08T09:36:45.730Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/12/08/CXqYjtI7fBUlhma.png"></p><p><strong>技术阅读周刊，每周更新。</strong></p><span id="more"></span><h2 id="历史更新"><a href="#历史更新" class="headerlink" title="历史更新"></a>历史更新</h2><ul><li><a href="https://crossoverjie.top/2023/11/10/ob/newsletter/Newsletter05-20231110/">20231107：第五期</a></li><li><a href="https://crossoverjie.top/2023/11/17/ob/newsletter/Newsletter06-20231117/">20231117：第六期</a></li><li><a href="https://crossoverjie.top/2023/11/24/ob/newsletter/Newsletter07-20231124/">20231124：第七期</a></li><li><a href="https://crossoverjie.top/2023/12/01/ob/newsletter/Newsletter08-20231201/">20231201：第八期</a><!--more--></li></ul><h2 id="美团技术博客十周年，感谢一路相伴-美团技术团队"><a href="#美团技术博客十周年，感谢一路相伴-美团技术团队" class="headerlink" title="美团技术博客十周年，感谢一路相伴 - 美团技术团队"></a>美团技术博客十周年，感谢一路相伴 - 美团技术团队</h2><p>URL: <a href="https://tech.meituan.com/2023/12/04/ten-years-of-meituan-technology-blog.html">https://tech.meituan.com/2023/12/04/ten-years-of-meituan-technology-blog.html</a><br><img src="https://s2.loli.net/2023/12/06/1z4f7UOyJ2HPpu6.png" alt="image.png"></p><blockquote><p>美团技术博客更新十周年了，这个博客确实在广大开发者心中都是有口皆碑的；记得当初在这里看过 HashMap 的原理分析、动态线程池等技术；<br>现在也有加到订阅列表里，有更新时会第一时间阅读</p></blockquote><h2 id="CompletableFuture原理与实践-外卖商家端API的异步化-美团技术团队"><a href="#CompletableFuture原理与实践-外卖商家端API的异步化-美团技术团队" class="headerlink" title="CompletableFuture原理与实践-外卖商家端API的异步化 - 美团技术团队"></a>CompletableFuture原理与实践-外卖商家端API的异步化 - 美团技术团队</h2><p>URL: <a href="https://tech.meituan.com/2022/05/12/principles-and-practices-of-completablefuture.html">https://tech.meituan.com/2022/05/12/principles-and-practices-of-completablefuture.html</a><br><img src="https://s2.loli.net/2023/12/06/F42yeBdRsJOkon8.png" alt="image.png"></p><blockquote><p>本文描述了美团对 API 做异步优化的过程，最终选择了 CompletableFuture 的过程<br><code>CompletableFuture</code> 使用起来的坑还是蛮多的，推荐大家都应该阅读下。</p></blockquote><ul><li>明确知道自己的代码运行在哪个线程上，如果不传入线程池那就是公共的 <code>ForkJoinPool</code> 线程池，可能会有阻塞的情况；也可以直接传入自定义的线程池</li><li>线程池循环使用可能会引起死锁，当 A 线程依赖于 B 线程的执行结果时，如果此时是同一个线程池，并且线程池已满，B 线程一直得不到机会执行，那 A 线程也无法运行，从而导致死锁。</li><li><code>CompletableFuture</code> 的异常往往会被包装为CompletionException，所以最好是要异常工具类进行提取<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Throwable <span class="title function_">extractRealException</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">          <span class="comment">//这里判断异常类型是否为CompletionException、ExecutionException，如果是则进行提取，否则直接返回。</span></span><br><span class="line">        <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> CompletionException || throwable <span class="keyword">instanceof</span> ExecutionException) &#123;</span><br><span class="line">            <span class="keyword">if</span> (throwable.getCause() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> throwable.getCause();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> throwable;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li></ul><h2 id="没错，数据库确实应该放入-K8s-里！"><a href="#没错，数据库确实应该放入-K8s-里！" class="headerlink" title="没错，数据库确实应该放入 K8s 里！"></a>没错，数据库确实应该放入 K8s 里！</h2><p>URL: <a href="https://mp.weixin.qq.com/s/QJn6-EzPp7PXar-GdMITCA">https://mp.weixin.qq.com/s/QJn6-EzPp7PXar-GdMITCA</a></p><blockquote><p>虽然这是一篇软文，不过其中几个论据确实是有道理的。<br>而 K8s 的控制器则是基于另一种思路：<strong>机器能做的事就不应该由人来做</strong>。通过 Operator，可以实现<strong>24 小时不间断地同步期望状态和实际状态</strong>，而这是用 Ansible 很难实现的，你用 Ansible 实现是想写个定时任务嘛？</p></blockquote><ul><li>复杂度：<ul><li>Sealos 提供了一键安装命令，有效降低其复杂度</li></ul></li><li>稳定性：<ul><li>一个良好的软件架构会不断提升和收敛其鲁棒性，并逐渐减少对人的依赖，比如使用 Oracle 的人喝茶时间一定比用开源 MySQL 的人喝茶时间多</li></ul></li><li>性能：<ul><li>而且，容器对数据库性能的影响几乎可以忽略不计，真正重要的是磁盘 IO 和网络带宽时延等因素。</li></ul></li></ul><p>目前市面上大部分云服务厂商所提供的数据库服务也都是跑在  kubernetes 中的。</p><h2 id="deckarep-x2F-golang-set-A-simple-battle-tested-and-generic-set-type-for-the-Go-language-Trusted-by-Docker-1Password-Ethereum-and-Hashicorp"><a href="#deckarep-x2F-golang-set-A-simple-battle-tested-and-generic-set-type-for-the-Go-language-Trusted-by-Docker-1Password-Ethereum-and-Hashicorp" class="headerlink" title="deckarep&#x2F;golang-set: A simple, battle-tested and generic set type for the Go language. Trusted by Docker, 1Password, Ethereum and Hashicorp."></a>deckarep&#x2F;golang-set: A simple, battle-tested and generic set type for the Go language. Trusted by Docker, 1Password, Ethereum and Hashicorp.</h2><p>URL: <a href="https://github.com/deckarep/golang-set">https://github.com/deckarep/golang-set</a><br><img src="https://s2.loli.net/2023/12/08/ru6dAXPx3G7WlL4.png" alt="image.png"></p><blockquote><p>一个泛型的 Go Set 库, 还提供了一些集合常用的操作工具，比如 Contains&#x2F;Difference&#x2F;Intersect 等函数。</p></blockquote><p>已经被这些公司采用了：</p><ul><li>Ethereum</li><li>Docker</li><li>1Password</li><li>Hashicorp</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Syntax example, doesn&#x27;t compile.</span></span><br><span class="line">mySet := mapset.NewSet[T]() <span class="comment">// T 是具体的类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Therefore this code creates an int set</span></span><br><span class="line">mySet := mapset.NewSet[<span class="type">int</span>]()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Or perhaps you want a string set</span></span><br><span class="line">mySet := mapset.NewSet[<span class="type">string</span>]()</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> myStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">  name <span class="type">string</span></span><br><span class="line">  age <span class="type">uint8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Alternatively a set of structs</span></span><br><span class="line">mySet := mapset.NewSet[myStruct]()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lastly a set that can hold anything using the any or empty interface keyword: interface&#123;&#125;. This is effectively removes type safety.</span></span><br><span class="line">mySet := mapset.NewSet[any]()</span><br></pre></td></tr></table></figure><p>文章链接：</p><ul><li><a href="https://tech.meituan.com/2023/12/04/ten-years-of-meituan-technology-blog.html">https://tech.meituan.com/2023/12/04/ten-years-of-meituan-technology-blog.html</a></li><li><a href="https://tech.meituan.com/2022/05/12/principles-and-practices-of-completablefuture.html">https://tech.meituan.com/2022/05/12/principles-and-practices-of-completablefuture.html</a></li><li><a href="https://mp.weixin.qq.com/s/QJn6-EzPp7PXar-GdMITCA">https://mp.weixin.qq.com/s/QJn6-EzPp7PXar-GdMITCA</a></li><li><a href="https://github.com/deckarep/golang-set">https://github.com/deckarep/golang-set</a></li></ul><p>#Newletters </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/12/08/CXqYjtI7fBUlhma.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术阅读周刊，每周更新。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    <category term="Newsletter" scheme="http://crossoverjie.top/categories/OB/Newsletter/"/>
    
    
  </entry>
  
  <entry>
    <title>技术阅读周刊第8️⃣期</title>
    <link href="http://crossoverjie.top/2023/12/01/ob/newsletter/Newsletter08-20231201/"/>
    <id>http://crossoverjie.top/2023/12/01/ob/newsletter/Newsletter08-20231201/</id>
    <published>2023-12-01T09:28:25.000Z</published>
    <updated>2023-12-11T02:27:07.559Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/12/01/AXc16Ty8hoUw3sC.png" alt="image.png"></p><p><strong>技术阅读周刊，每周更新。</strong></p><span id="more"></span><h2 id="历史更新"><a href="#历史更新" class="headerlink" title="历史更新"></a>历史更新</h2><ul><li><a href="https://crossoverjie.top/2023/11/03/ob/newsletter/Newsletter04-20231103/">20231103：第四期</a></li><li><a href="https://crossoverjie.top/2023/11/10/ob/newsletter/Newsletter05-20231110/">20231107：第五期</a></li><li><a href="https://crossoverjie.top/2023/11/17/ob/newsletter/Newsletter06-20231117/">20231117：第六期</a></li><li><a href="https://crossoverjie.top/2023/11/24/ob/newsletter/Newsletter07-20231124/">20231124：第七期</a><!--more--></li></ul><h2 id="Prometheus-vs-VictoriaMetrics-VM-Last9"><a href="#Prometheus-vs-VictoriaMetrics-VM-Last9" class="headerlink" title="Prometheus vs. VictoriaMetrics (VM) | Last9"></a>Prometheus vs. VictoriaMetrics (VM) | Last9</h2><p>URL: <a href="https://last9.io/blog/prometheus-vs-victoriametrics/?ref=dailydev">https://last9.io/blog/prometheus-vs-victoriametrics/?ref=dailydev</a><br><img src="https://s2.loli.net/2023/11/28/NPR6nvLI2aTmJ9g.png" alt="image.png"></p><blockquote><p>对比了 Prometheus 和 VM 的区别<br><img src="https://s2.loli.net/2023/11/28/1Oqd5Zgxt8R4EQm.png" alt="image.png"><br>考虑到和云原生的环境的兼容性，那 Prometheus 可能更合适些，毕竟是 CNCF 组织下的项目。<br>但如果考虑到性能、存储、资源占用性，VM 会更合适一些。</p></blockquote><h2 id="28-Rust-in-Action-10-Project-Ideas-to-Elevate-Your-Skills"><a href="#28-Rust-in-Action-10-Project-Ideas-to-Elevate-Your-Skills" class="headerlink" title="28 - Rust in Action: 10 Project Ideas to Elevate Your Skills"></a>28 - Rust in Action: 10 Project Ideas to Elevate Your Skills</h2><p>URL: <a href="https://rust-trends.com/newsletter/rust-in-action-10-project-ideas-to-elevate-your-skills/?ref=dailydev">https://rust-trends.com/newsletter/rust-in-action-10-project-ideas-to-elevate-your-skills/?ref=dailydev</a><br><img src="https://s2.loli.net/2023/11/28/3LBGgx8YTXdftSp.png" alt="image.png"></p><blockquote><p>这是一个 Rust 的 newsletter，介绍了十个项目 idea 可以提高你的 Rust 的水平，我看了下这些项目也不怎么限制语言，任何语言都可以尝试下。</p></blockquote><ul><li><code>简易版的 grep 命令</code>简单：读取文件根据搜索条件输出搜索结果，涉及到的技术栈：<ul><li>文件 IO</li><li>正则表达式</li><li>命令行工具</li></ul></li><li><code>短域名服务</code>中等：接收一个长域名，转换为一个短域名，访问短域名时可以自动重定向到长域名。<ul><li>Web 框架</li><li>数据存储，可以是 SQLite&#x2F;Redis</li><li>生成短链接的字符串算法</li></ul></li><li><code>基于文本的冒险游戏</code>中等：用户可以探索房间，选择物品，解密等。<ul><li>输入输出</li><li>游戏结构体定义、以及状态流转。</li></ul></li><li><code>基本的网络爬虫</code>简单：爬取一个网页然后提取指定的信息。<ul><li>HTTP</li><li>HTML 解析</li><li>字符串匹配、正则。</li></ul></li><li><code>实时聊天应用</code>中等：支持多个人用户加入房间，可以给每个人发送消息。<ul><li>网络编程</li><li>多线程处理客户端连接</li></ul></li><li><code>Markdown 解析为 HTML</code>中等：<ul><li>文本解析</li><li>文件 IO</li></ul></li><li><code>简单的 HTTP 服务</code>中等：支持静态文件服务器，也可以处理 RESTful 请求。</li></ul><h2 id="Implementing-a-Bloom-Filter-in-Go-by-Francisco-Escher-Nov-2023-ITNEXT"><a href="#Implementing-a-Bloom-Filter-in-Go-by-Francisco-Escher-Nov-2023-ITNEXT" class="headerlink" title="Implementing a Bloom Filter in Go | by Francisco Escher | Nov, 2023 | ITNEXT"></a>Implementing a Bloom Filter in Go | by Francisco Escher | Nov, 2023 | ITNEXT</h2><p>URL: <a href="https://itnext.io/bloom-filters-and-go-1d5ac62557de">https://itnext.io/bloom-filters-and-go-1d5ac62557de</a><br><img src="https://s2.loli.net/2023/12/01/aY5dn6zIZp7UxNw.png" alt="image.png"></p><blockquote><p>多年前我也用 Java <a href="https://crossoverjie.top/2018/11/26/guava/guava-bloom-filter/?highlight=%E5%B8%83%E9%9A%86">写过一个布隆过滤器</a>，本文作者介绍用 Go 来实现，不过原理都差不多。</p></blockquote><p>布隆过滤器有以下特点：</p><ul><li>用极少的内存可以存放大量的数据</li><li>存在误报的可能</li><li>但返回数据不存在时一定不存在</li><li>返回数据存在有一定概率是不存在的</li></ul><p>所以基于以上特性就有了下面这些应用场景：</p><ul><li>网络安全：可以快速判断 IP 释放在黑名单中</li><li>web 缓存：判断请求是否在缓存中</li><li>数据库缓存，原理同上</li><li>语法检测：一些文本工具可以快速检测你输入的支付是否在字典里，不存在时进行提示</li><li>区块链认证</li><li>邮件过滤</li></ul><h2 id="Mastering-Concurrency-In-Go-—-With-Select-Goroutines-and-Channels-by-Yair-Fernando-Better-Programming"><a href="#Mastering-Concurrency-In-Go-—-With-Select-Goroutines-and-Channels-by-Yair-Fernando-Better-Programming" class="headerlink" title="Mastering Concurrency In Go — With Select, Goroutines, and Channels | by Yair Fernando | Better Programming"></a>Mastering Concurrency In Go — With Select, Goroutines, and Channels | by Yair Fernando | Better Programming</h2><p>URL: <a href="https://betterprogramming.pub/concurrency-with-select-goroutines-and-channels-9786e0c6be3c">https://betterprogramming.pub/concurrency-with-select-goroutines-and-channels-9786e0c6be3c</a><br><img src="https://s2.loli.net/2023/12/01/K1eQ8J7zHS6ogMb.png" alt="image.png"></p><blockquote><p>使用 select goroutine channel 掌握并发</p></blockquote><h3 id="利用-select-多个-channel，来控制最早完成的线程，同时抛弃其他线程"><a href="#利用-select-多个-channel，来控制最早完成的线程，同时抛弃其他线程" class="headerlink" title="利用 select 多个 channel，来控制最早完成的线程，同时抛弃其他线程"></a>利用 select 多个 channel，来控制最早完成的线程，同时抛弃其他线程</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">quickestApiResponse</span><span class="params">(functions []*Function)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> articles []*Article</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, function := <span class="keyword">range</span> functions &#123;</span><br><span class="line">function.Run()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> googleNewsResponse := &lt;-google:</span><br><span class="line">fmt.Printf(<span class="string">&quot;Source: %s\n&quot;</span>, googleNewsResponse.Source)</span><br><span class="line">articles = googleNewsResponse.Articles</span><br><span class="line"><span class="keyword">case</span> freeNewsReponse := &lt;-free:</span><br><span class="line">fmt.Printf(<span class="string">&quot;Source: %s\n&quot;</span>, freeNewsReponse.Source)</span><br><span class="line">articles = freeNewsReponse.Articles</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;Articles %v\n&quot;</span>, articles)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用-time-After-返回的-channel，来控制达到超时时间后退出所有的线程"><a href="#利用-time-After-返回的-channel，来控制达到超时时间后退出所有的线程" class="headerlink" title="利用 time.After 返回的 channel，来控制达到超时时间后退出所有的线程"></a>利用 time.After 返回的 channel，来控制达到超时时间后退出所有的线程</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">1</span>)  </span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;  </span><br><span class="line">fmt.Println(<span class="string">&quot;do something...&quot;</span>)  </span><br><span class="line">time.Sleep(<span class="number">4</span>*time.Second)  </span><br><span class="line">ch&lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;  </span><br><span class="line">&#125;()  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">select</span> &#123;  </span><br><span class="line"><span class="keyword">case</span> &lt;-ch:  </span><br><span class="line">fmt.Println(<span class="string">&quot;done&quot;</span>)  </span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(<span class="number">3</span>*time.Second):  </span><br><span class="line">fmt.Println(<span class="string">&quot;timeout&quot;</span>)  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Context-Withtimeout-来控制超时"><a href="#Context-Withtimeout-来控制超时" class="headerlink" title="Context.Withtimeout 来控制超时"></a>Context.Withtimeout 来控制超时</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)  </span><br><span class="line">timeout, cancel := context.WithTimeout(context.Background(), <span class="number">3</span>*time.Second)  </span><br><span class="line"><span class="keyword">defer</span> cancel()  </span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;  </span><br><span class="line">time.Sleep(time.Second * <span class="number">4</span>)  </span><br><span class="line">  </span><br><span class="line">ch &lt;- <span class="string">&quot;done&quot;</span>  </span><br><span class="line">&#125;()  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">select</span> &#123;  </span><br><span class="line"><span class="keyword">case</span> res := &lt;-ch:  </span><br><span class="line">fmt.Println(res)  </span><br><span class="line"><span class="keyword">case</span> &lt;-timeout.Done():  </span><br><span class="line">fmt.Println(<span class="string">&quot;timout&quot;</span>, timeout.Err())  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文章链接：</p><ul><li><a href="https://last9.io/blog/prometheus-vs-victoriametrics/?ref=dailydev">https://last9.io/blog/prometheus-vs-victoriametrics/?ref=dailydev</a></li><li><a href="https://rust-trends.com/newsletter/rust-in-action-10-project-ideas-to-elevate-your-skills/?ref=dailydev">https://rust-trends.com/newsletter/rust-in-action-10-project-ideas-to-elevate-your-skills/?ref=dailydev</a></li><li><a href="https://itnext.io/bloom-filters-and-go-1d5ac62557de">https://itnext.io/bloom-filters-and-go-1d5ac62557de</a></li><li><a href="https://betterprogramming.pub/concurrency-with-select-goroutines-and-channels-9786e0c6be3c">https://betterprogramming.pub/concurrency-with-select-goroutines-and-channels-9786e0c6be3c</a></li></ul><p>#Newletters </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/12/01/AXc16Ty8hoUw3sC.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术阅读周刊，每周更新。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    <category term="Newsletter" scheme="http://crossoverjie.top/categories/OB/Newsletter/"/>
    
    
  </entry>
  
  <entry>
    <title>k8s入门到实战-滚动更新与优雅停机</title>
    <link href="http://crossoverjie.top/2023/11/29/ob/k8s-rollout/"/>
    <id>http://crossoverjie.top/2023/11/29/ob/k8s-rollout/</id>
    <published>2023-11-29T06:40:10.000Z</published>
    <updated>2023-11-29T11:00:47.297Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/11/29/BPVLoC2UfX5Drv8.png" alt="rollout.png"></p><p>当我们在生产环境发布应用时，必须要考虑到当前系统还有用户正在使用的情况，所以尽量需要做到不停机发版。</p><span id="more"></span><p>所以在发布过程中理论上之前的 v1 版本依然存在，必须得等待 v2 版本启动成功后再删除历史的 v1 版本。</p><blockquote><p>如果 v2 版本启动失败 v1 版本不会做任何操作，依然能对外提供服务。</p></blockquote><h1 id="滚动更新"><a href="#滚动更新" class="headerlink" title="滚动更新"></a>滚动更新</h1><p><img src="https://s2.loli.net/2023/11/29/stqYlaFwecvhouS.png" alt="image.png"></p><p>这是我们预期中的发布流程，要在 kubernetes 使用该功能也非常简单，只需要在 spec 下配置相关策略即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br></pre></td></tr></table></figure><p>这个配置的含义是：</p><ul><li>使用滚动更新，当然还有 <strong>Recreate</strong> 用于删除旧版本的 Pod，我们基本不会用这个策略。</li><li><code>maxSurge</code>：滚动更新过程中可以最多超过预期 Pod 数量的百分比，当然也可以填整数。</li><li><code>maxUnavailable</code>：滚动更新过程中最大不可用 Pod 数量超过预期的百分比。</li></ul><p>这样一旦我们更新了 Pod 的镜像时，kubernetes 就会先创建一个新版本的 Pod 等待他启动成功后再逐步更新剩下的 Pod。<br><img src="https://s2.loli.net/2023/11/29/s52LOSvECPReUnT.png"></p><h1 id="优雅停机"><a href="#优雅停机" class="headerlink" title="优雅停机"></a>优雅停机</h1><p>滚动升级过程中不可避免的又会碰到一个优雅停机的问题，毕竟是需要停掉老的 Pod。</p><p>这时我们需要注意两种情况：</p><ul><li>停机过程中，已经进入 Pod 的请求需要执行完毕才能退出。</li><li>停机之后不能再有请求路由到已经停机的 Pod</li></ul><p>第一个问题如果我们使用的是 <code>Go</code>，可以使用一个钩子来监听  <code>kubernetes</code> 发出的退出信号：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">quit := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal)  </span><br><span class="line">signal.Notify(quit, syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT, syscall.SIGPIPE)  </span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    &lt;-quit  </span><br><span class="line">    log.Printf(<span class="string">&quot;quit signal received, exit \n&quot;</span>)  </span><br><span class="line">    os.Exit(<span class="number">0</span>)  </span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>在这里执行对应的资源释放。</p><p>如果使用的是 <code>spring boot</code> 也有对应的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line"><span class="attr">shutdown:</span> <span class="string">&quot;graceful&quot;</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line"><span class="attr">lifecycle:</span> </span><br><span class="line"><span class="attr">timeout-per-shutdown-phase:</span> <span class="string">&quot;20s&quot;</span></span><br></pre></td></tr></table></figure><p>当应用收到退出信号后，spring boot 将不会再接收新的请求，并等待现有的请求处理完毕。</p><p>但 kubernetes 也不会无限等待应用将 Pod 将任务执行完毕，我们可以在 Pod 中配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><p>来定义需要等待多长时间，这里是超过 30s 之后就会强行 kill Pod。</p><blockquote><p>具体值大家可以根据实际情况配置</p></blockquote><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">example-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">example-image</span></span><br><span class="line">    <span class="attr">lifecycle:</span></span><br><span class="line">      <span class="attr">preStop:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;sleep 10&quot;</span>]</span><br></pre></td></tr></table></figure><p>同时我们也可以配置 <code>preStop</code> 做一个 sleep 来确保 <code>kubernetes</code> 将准备删除的 Pod 在 <code>Iptable</code> 中已经更新了之后再删除 <code>Pod</code>。</p><p>这样可以避免第二种情况：已经删除的 <code>Pod</code> 依然还有请求路由过来。<br>具体可以参考 <code>spring boot</code> 文档：<br><a href="https://docs.spring.io/spring-boot/docs/2.4.4/reference/htmlsingle/#cloud-deployment-kubernetes-container-lifecycle">https://docs.spring.io/spring-boot/docs/2.4.4/reference/htmlsingle/#cloud-deployment-kubernetes-container-lifecycle</a></p><h1 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h1><p>回滚其实也可以看作是升级的一种，只是升级到了历史版本，在 <code>kubernetes</code> 中回滚应用非常简单。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回滚到上一个版本</span></span><br><span class="line"> k rollout undo deployment/abc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回滚到指定版本</span></span><br><span class="line">k rollout undo daemonset/abc --to-revision=3</span><br></pre></td></tr></table></figure><p>同时 kubernetes 也能保证是滚动回滚的。</p><h1 id="优雅重启"><a href="#优雅重启" class="headerlink" title="优雅重启"></a>优雅重启</h1><p>在之前的 <a href="https://crossoverjie.top/2023/10/19/ob/k8s-restart-pod/">如何优雅重启 kubernetes 的 Pod</a> 那篇文章中写过，如果想要优雅重启 Pod 也可以使用 rollout 命令，它也也可以保证是滚动重启。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k rollout restart deployment/nginx</span><br></pre></td></tr></table></figure><p>使用 <code>kubernetes</code> 的滚动更新确实要比我们以往的传统运维简单许多，就几个命令的事情之前得写一些复杂的运维脚本才能实现。</p><p>本文的所有源码在这里可以访问：<br><a href="https://github.com/crossoverJie/k8s-combat">https://github.com/crossoverJie/k8s-combat</a><br>#Blog #K8s </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/11/29/BPVLoC2UfX5Drv8.png&quot; alt=&quot;rollout.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;当我们在生产环境发布应用时，必须要考虑到当前系统还有用户正在使用的情况，所以尽量需要做到不停机发版。&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    
  </entry>
  
  <entry>
    <title>k8s入门到实战-应用探针</title>
    <link href="http://crossoverjie.top/2023/11/25/ob/k8s-probe/"/>
    <id>http://crossoverjie.top/2023/11/25/ob/k8s-probe/</id>
    <published>2023-11-25T15:20:13.000Z</published>
    <updated>2023-11-27T05:29:50.220Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/11/26/5uwvC1TrsjMYDZF.png" alt="Probe.png"></p><p>今天进入 <code>kubernetes</code> 的运维部分（并不是运维 <code>kubernetes</code>，而是运维应用），其实日常我们大部分使用 <code>kubernetes</code> 的功能就是以往运维的工作，现在云原生将运维和研发关系变得更紧密了。</p><span id="more"></span><p>今天主要讲解 <code>Probe</code> 探针相关的功能，探针最实用的功能就是可以控制应用优雅上线。</p><h1 id="就绪探针"><a href="#就绪探针" class="headerlink" title="就绪探针"></a>就绪探针</h1><p>举个例子，当我们的 service 关联了多个 Pod 的时候，其中一个 Pod 正在重启但还没达到可以对外提供服务的状态，这时候如果有流量进入。</p><p>那这个请求肯定就会出现异常，从而导致问题，所以我们需要一个和 <code>kubernetes</code> 沟通的渠道，告诉它什么时候可以将流量放进来。<br><img src="https://s2.loli.net/2023/11/26/StHngQR4K9vCxjf.png" alt="image.png"><br>比如如图所示的情况，红色 <code>Pod</code> 在未就绪的时候就不会有流量。</p><p>使用就绪探针就可以达到类似的效果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">readinessProbe:</span>  </span><br><span class="line">  <span class="attr">failureThreshold:</span> <span class="number">3</span>  </span><br><span class="line">  <span class="attr">httpGet:</span>  </span><br><span class="line">    <span class="attr">path:</span> <span class="string">/ping</span>  </span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span>  </span><br><span class="line">    <span class="attr">scheme:</span> <span class="string">HTTP</span>  </span><br><span class="line">  <span class="attr">periodSeconds:</span> <span class="number">3</span>  </span><br><span class="line">  <span class="attr">successThreshold:</span> <span class="number">1</span>  </span><br><span class="line">  <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这个配置也很直接：</p><ul><li>配置一个 HTTP 的 ping 接口</li><li>每三秒检测一次</li><li>失败 3 次则认为检测失败</li><li>成功一次就认为检测成功</li></ul><blockquote><p>但没有配置就绪探针时，一旦 Pod 的 <code>Endpoint</code> 加入到 service 中(Pod 进入 <code>Running</code> 状态)，请求就有可能被转发过来，所以配置就绪探针是非常有必要的。</p></blockquote><h1 id="启动探针"><a href="#启动探针" class="headerlink" title="启动探针"></a>启动探针</h1><p>而启动探针往往是和就绪探针搭配干活的，如果我们一个 Pod 启动时间过长，比如超过上面配置的失败检测次数，此时 Pod 就会被 kubernetes 重启，这样可能会进入无限重启的循环。</p><p>所以启动探针可以先检测一次是否已经启动，直到启动成功后才会做后续的检测。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">startupProbe:</span>  </span><br><span class="line">  <span class="attr">failureThreshold:</span> <span class="number">30</span>  </span><br><span class="line">  <span class="attr">httpGet:</span>  </span><br><span class="line">    <span class="attr">path:</span> <span class="string">/ping</span>  </span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span>  </span><br><span class="line">    <span class="attr">scheme:</span> <span class="string">HTTP</span>  </span><br><span class="line">  <span class="attr">periodSeconds:</span> <span class="number">5</span>  </span><br><span class="line">  <span class="attr">successThreshold:</span> <span class="number">1</span>  </span><br><span class="line">  <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>我这里两个检测接口是同一个，具体得根据自己是实际业务进行配置；<br>比如应用端口启动之后并不代表业务已经就绪了，可能某些基础数据还没加载到内存中，这个时候就需要自己写其他的接口来配置就绪探针了。</p></blockquote><p><img src="https://s2.loli.net/2023/11/26/AskpbIJiBovPGZ7.png" alt="image.png"></p><p>所有关于探针相关的日志都可以在 Pod 的事件中查看，比如如果一个应用在启动的过程中频繁重启，那就可以看看是不是某个探针检测失败了。</p><h1 id="存活探针"><a href="#存活探针" class="headerlink" title="存活探针"></a>存活探针</h1><p>存活探针往往是用于保证应用高可用的，虽然 kubernetes 可以在 Pod 退出后自动重启，比如 <code>Pod OOM</code>；但应用假死他是检测不出来的。</p><p>为了保证这种情况下 Pod 也能被自动重启，就可以配合存活探针使用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">livenessProbe:</span>  </span><br><span class="line">  <span class="attr">failureThreshold:</span> <span class="number">3</span>  </span><br><span class="line">  <span class="attr">httpGet:</span>  </span><br><span class="line">    <span class="attr">path:</span> <span class="string">/ping</span>  </span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span>  </span><br><span class="line">    <span class="attr">scheme:</span> <span class="string">HTTP</span>  </span><br><span class="line">  <span class="attr">periodSeconds:</span> <span class="number">3</span>  </span><br><span class="line">  <span class="attr">successThreshold:</span> <span class="number">1</span>  </span><br><span class="line">  <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>一旦接口响应失败，kubernetes 就会尝试重启。</p><p><img src="https://s2.loli.net/2023/11/26/khZlsDHLyX2WOxT.png" alt="image.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="https://s2.loli.net/2023/11/26/jRqSIbk4HmnsTWl.png" alt="image.png"></p><p>以上探针配置最好是可以在研效平台可视化配置，这样维护起来也比较简单。</p><p>探针是维护应用健康的必要手段，强烈推荐大家都进行配置。</p><p>本文的所有源码在这里可以访问：<br><a href="https://github.com/crossoverJie/k8s-combat">https://github.com/crossoverJie/k8s-combat</a><br>#Blog </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/11/26/5uwvC1TrsjMYDZF.png&quot; alt=&quot;Probe.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天进入 &lt;code&gt;kubernetes&lt;/code&gt; 的运维部分（并不是运维 &lt;code&gt;kubernetes&lt;/code&gt;，而是运维应用），其实日常我们大部分使用 &lt;code&gt;kubernetes&lt;/code&gt; 的功能就是以往运维的工作，现在云原生将运维和研发关系变得更紧密了。&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    
  </entry>
  
  <entry>
    <title>技术阅读周刊第第7️⃣期</title>
    <link href="http://crossoverjie.top/2023/11/24/ob/newsletter/Newsletter07-20231124/"/>
    <id>http://crossoverjie.top/2023/11/24/ob/newsletter/Newsletter07-20231124/</id>
    <published>2023-11-24T09:28:25.000Z</published>
    <updated>2023-11-24T03:32:53.691Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/11/24/zGKworjfL7JkyQt.png" alt="image.png"></p><p><strong>技术阅读周刊，每周更新。</strong></p><h2 id="历史更新"><a href="#历史更新" class="headerlink" title="历史更新"></a>历史更新</h2><ul><li><a href="https://crossoverjie.top/2023/10/13/ob/newsletter/Newsletter01-20231013/">20231013：第一期</a></li><li><a href="https://crossoverjie.top/2023/10/22/ob/newsletter/Newsletter02-20231022/">20231022：第二期</a></li><li><a href="https://crossoverjie.top/2023/10/27/ob/newsletter/Newsletter03-20231027/">20231027：第三期</a></li><li><a href="https://crossoverjie.top/2023/11/03/ob/newsletter/Newsletter04-20231103/">20231103：第四期</a></li><li><a href="https://crossoverjie.top/2023/11/10/ob/newsletter/Newsletter05-20231110/">20231107：第五期</a></li><li><a href="https://crossoverjie.top/2023/11/17/ob/newsletter/Newsletter06-20231117/">20231117：第六期</a><span id="more"></span></li></ul><h2 id="What-is-a-JWT-Understanding-JSON-Web-Tokens"><a href="#What-is-a-JWT-Understanding-JSON-Web-Tokens" class="headerlink" title="What is a JWT? Understanding JSON Web Tokens"></a>What is a JWT? Understanding JSON Web Tokens</h2><p>URL: <a href="https://supertokens.com/blog/what-is-jwt">https://supertokens.com/blog/what-is-jwt</a></p><blockquote><p>本文主要讲了一些 JWT 的基本原理，以及优缺点<br><img src="https://s2.loli.net/2023/11/20/iltd8qpuH6b75PY.png" alt="image.png"></p></blockquote><ul><li>JWT 的生成规则 <code>&lt;header&gt;.&lt;body&gt;.&lt;signature&gt;</code><ul><li>使用证书+签名算法创建签名 Key</li><li>将 header 和 body 的空格换行都去掉后进行 base64，然后使用 <code>.</code> 拼接起来。</li><li>将刚才拼接的字符串使用 <code>Base64 + HMACSHA256</code> 生成签名。</li><li>最终将 <code>&lt;header&gt;.&lt;body&gt;.&lt;signature&gt;</code> 拼接成 <code>JWT</code>。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Base64URLSafe</span>(   <span class="title class_">HMACSHA256</span>(<span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOiJhYmNkMTIzIiwiZXhwaXJ5IjoxNjQ2NjM1NjExMzAxfQ&quot;</span>, <span class="string">&quot;NTNv7j0TuYARvmNMmWXo6fKvM4o6nv/aUi9ryX38ZH+L1bkrnD1ObOQ8JAUmHCBq7Iy7otZcyAagBLHVKvvYaIpmMuxmARQ97jUVG16Jkpkp1wXOPsrF9zwew6TpczyHkHgX5EuLg2MeBuiT/qJACs1J0apruOOJCg/gOtkjB4c=&quot;</span>)</span><br><span class="line">)</span><br><span class="line"><span class="title class_">Results</span> <span class="attr">in</span>:</span><br><span class="line">3Thp81rDFrKXr3WrY1MyMnNK8kKoZBX9lg-<span class="title class_">JwFznR</span>-M</span><br></pre></td></tr></table></figure></li></ul></li><li>验证 JWT<ul><li>先获取 header，校验头里的签名类型和算法</li><li>获取 body，然后按照之前的方式 <code>Base64 + HMACSHA256</code> 生成签名</li><li>判断两者签名是否相同，不同则验证失败</li><li>判断过期时间是否过期</li></ul></li><li>JWT 的优点<ul><li>安全性：使用非对称加密保证数据不被篡改</li><li>高效，无状态：不需要单独使用数据库存储数据，只使用算法就能验证</li></ul></li><li>缺点<ul><li>因为他的独立性和无状态，除非是 token 过期了，不然很难撤销</li><li>依赖于第一步里生成的签名 Key，一旦这个 Key 被泄露就会被伪造。</li></ul></li></ul><h2 id="Go-开发中的十大常见陷阱-译"><a href="#Go-开发中的十大常见陷阱-译" class="headerlink" title="Go 开发中的十大常见陷阱[译]"></a>Go 开发中的十大常见陷阱[译]</h2><p>URL: <a href="https://tomotoes.com/blog/the-top-10-most-common-mistakes-ive-seen-in-go-projects/">https://tomotoes.com/blog/the-top-10-most-common-mistakes-ive-seen-in-go-projects/</a></p><blockquote><p>最近在  Reddit 上看到一个帖子，让推荐一本 Go 相关的书籍，大部分都是推荐的 “100 Go Mistakes and How to Avoid Them”，目前还没有中译版本，不过作者之前写过一个十个错误的博客，也可以预先看看。</p></blockquote><ul><li>未知的枚举值，将枚举的未知值设置为 0</li><li>自动优化的基准测试</li><li>被转移的指针，日常开发中建议传值，速度会更快。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">loop:  </span><br><span class="line">  <span class="keyword">for</span> &#123;  </span><br><span class="line">    <span class="keyword">select</span> &#123;  </span><br><span class="line">    <span class="keyword">case</span> &lt;-ch:  </span><br><span class="line">    <span class="comment">// Do something  </span></span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():  </span><br><span class="line">      <span class="keyword">break</span> loop  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li>出乎意料的 break，在 select 语句中想要退出 for 循环，可以使用标签。</li><li>正确传递错误上下文，使用 <a href="https://github.com/pkg/errors">https://github.com/pkg/errors</a></li><li>扩容切片有性能损耗，如果知道长度可以在初始化时指定长度。</li><li>正确使用 context</li><li>做好函数抽象，可以参考 <code>io.Reader/io.Writer</code></li><li>在 goroutine 中使用循环调用的时候需要额外赋值，这个在  1.22 已经修复了。</li></ul><h2 id="Dapr-A-Portable-Event-Driven-Runtime-for-Building-Distributed-Applications-by-Seifeddine-Rajhi-Nov-2023-Medium"><a href="#Dapr-A-Portable-Event-Driven-Runtime-for-Building-Distributed-Applications-by-Seifeddine-Rajhi-Nov-2023-Medium" class="headerlink" title="Dapr: A Portable, Event-Driven Runtime for Building Distributed Applications | by Seifeddine Rajhi | Nov, 2023 | Medium"></a>Dapr: A Portable, Event-Driven Runtime for Building Distributed Applications | by Seifeddine Rajhi | Nov, 2023 | Medium</h2><p>URL: <a href="https://medium.com/@seifeddinerajhi/dapr-a-portable-event-driven-runtime-for-building-distributed-applications-c2ea8254406c">https://medium.com/@seifeddinerajhi/dapr-a-portable-event-driven-runtime-for-building-distributed-applications-c2ea8254406c</a></p><blockquote><p>本文介绍了 Dapr 是什么，以及给了一个入门示例</p></blockquote><p><img src="https://s2.loli.net/2023/11/23/v1LOZia9uxS8PUR.png" alt="image.png"></p><ul><li>Dapr 是 <strong>Distributed Application Runtime</strong> 的简称，翻译过来就是分布式应用运行时。</li><li>你可以使用任何语言，任何框架、运行在任何地方构建你的分布式应用程序</li><li>Dapr 抽象了我们应用开发中所需要的大部分 API，所有与这些 API 交互的 SDK 都是由 Dapr 提供，所以我们不需要关系他的底层是什么。</li></ul><h2 id="3-years-managing-Kubernetes-clusters-my-10-lessons-by-Herve-Khg-Nov-2023-Medium"><a href="#3-years-managing-Kubernetes-clusters-my-10-lessons-by-Herve-Khg-Nov-2023-Medium" class="headerlink" title="3 years managing Kubernetes clusters, my 10 lessons. | by Herve Khg | Nov, 2023 | Medium"></a>3 years managing Kubernetes clusters, my 10 lessons. | by Herve Khg | Nov, 2023 | Medium</h2><p>URL: <a href="https://hervekhg.medium.com/3-years-managing-kubernetes-clusters-my-10-lessons-b565a5509f0e">https://hervekhg.medium.com/3-years-managing-kubernetes-clusters-my-10-lessons-b565a5509f0e</a></p><blockquote><p>作者描述他三年的 kubernetes 集群管理的十条经验</p></blockquote><ul><li>在云环境使用 kubernetes，这会比自己维护要简单很多，即便是自己维护也不会让自己的业务能力得到成长，或者收益性价比不高</li><li>使用代码来部署应用，避免直接在控制台用命令操作，这样难以记录操作。</li><li>避免过度使用 helm，同时要对充分理解其中的配置项；这个也很重要。</li><li>不要直接迁移应用到 kubernetes，往往需要做相关的适配。</li><li>非必要不要使用 Mesh</li><li>避免过多的使用管理工具，<code>kubernetes</code> 的管理工具有很多，但大部分操作就靠 <code>kubectl</code> 就够用了。</li><li>一定要记得定义资源的限制（内存和 CPU），避免程序 bug 导致 kubernetes 集群出现问题</li><li>尽量不要在 Pod 中存储数据，推荐使用 NAS、云存储</li><li>配置 HPA，可以根据负载自动扩容 Pod</li><li>不要畏惧改变，每年需要对 <code>kubernetes</code> 进行升级，升级前需要充分阅读 <code>ReleaseNote</code>.</li></ul><h2 id="Ten-Optimization-Tricks-to-Make-Your-Java-Application-Run-Faster-by-lance-Javarevisited-Medium"><a href="#Ten-Optimization-Tricks-to-Make-Your-Java-Application-Run-Faster-by-lance-Javarevisited-Medium" class="headerlink" title="Ten Optimization Tricks to Make Your Java Application Run Faster | by lance | Javarevisited | Medium"></a>Ten Optimization Tricks to Make Your Java Application Run Faster | by lance | Javarevisited | Medium</h2><p>URL: <a href="https://medium.com/javarevisited/ten-optimization-tricks-to-make-your-java-application-run-faster-9742f568ed6f">https://medium.com/javarevisited/ten-optimization-tricks-to-make-your-java-application-run-faster-9742f568ed6f</a></p><blockquote><p>十个优化让 Java 应用更快</p></blockquote><ol><li>循环拼接字符串使用 StringBuilder</li><li>线程池代替自定义线程</li><li>容器类预先分配大小</li><li>用枚举代替常量</li><li>用 NIO 代替传统 IO</li><li>用位移操作</li><li>多使用单例模式</li><li>减少锁的范围</li><li>尽量少使用全局变量</li><li>多使用基础数据类型</li></ol><p>文章链接：</p><ul><li><a href="https://supertokens.com/blog/what-is-jwt">https://supertokens.com/blog/what-is-jwt</a></li><li><a href="https://tomotoes.com/blog/the-top-10-most-common-mistakes-ive-seen-in-go-projects/">https://tomotoes.com/blog/the-top-10-most-common-mistakes-ive-seen-in-go-projects/</a></li><li><a href="https://medium.com/@seifeddinerajhi/dapr-a-portable-event-driven-runtime-for-building-distributed-applications-c2ea8254406c">https://medium.com/@seifeddinerajhi/dapr-a-portable-event-driven-runtime-for-building-distributed-applications-c2ea8254406c</a></li><li><a href="https://hervekhg.medium.com/3-years-managing-kubernetes-clusters-my-10-lessons-b565a5509f0e">https://hervekhg.medium.com/3-years-managing-kubernetes-clusters-my-10-lessons-b565a5509f0e</a></li><li><a href="https://medium.com/javarevisited/ten-optimization-tricks-to-make-your-java-application-run-faster-9742f568ed6f">https://medium.com/javarevisited/ten-optimization-tricks-to-make-your-java-application-run-faster-9742f568ed6f</a></li></ul><p>#Newletters </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/11/24/zGKworjfL7JkyQt.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术阅读周刊，每周更新。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;历史更新&quot;&gt;&lt;a href=&quot;#历史更新&quot; class=&quot;headerlink&quot; title=&quot;历史更新&quot;&gt;&lt;/a&gt;历史更新&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://crossoverjie.top/2023/10/13/ob/newsletter/Newsletter01-20231013/&quot;&gt;20231013：第一期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://crossoverjie.top/2023/10/22/ob/newsletter/Newsletter02-20231022/&quot;&gt;20231022：第二期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://crossoverjie.top/2023/10/27/ob/newsletter/Newsletter03-20231027/&quot;&gt;20231027：第三期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://crossoverjie.top/2023/11/03/ob/newsletter/Newsletter04-20231103/&quot;&gt;20231103：第四期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://crossoverjie.top/2023/11/10/ob/newsletter/Newsletter05-20231110/&quot;&gt;20231107：第五期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://crossoverjie.top/2023/11/17/ob/newsletter/Newsletter06-20231117/&quot;&gt;20231117：第六期&lt;/a&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    <category term="Newsletter" scheme="http://crossoverjie.top/categories/OB/Newsletter/"/>
    
    
  </entry>
  
  <entry>
    <title>升级到 Pulsar3.0 后深入了解 JWT 鉴权</title>
    <link href="http://crossoverjie.top/2023/11/19/ob/Pulsar-JWT/"/>
    <id>http://crossoverjie.top/2023/11/19/ob/Pulsar-JWT/</id>
    <published>2023-11-19T08:19:28.000Z</published>
    <updated>2023-12-28T02:14:19.273Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/11/19/gAadEDNG4piBbSl.png" alt="image.png"></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近在测试将 <code>Pulsar</code> 2.11.2 升级到 <code>3.0.1</code>的过程中碰到一个鉴权问题，正好借着这个问题充分了解下 <code>Pulsar</code> 的鉴权机制是如何运转的。</p><span id="more"></span><p>Pulsar 支持 <code>Namespace/Topic</code> 级别的鉴权，在生产环境中往往会使用 <code>topic</code> 级别的鉴权，从而防止消息泄露或者其他因为权限管控不严格而导致的问题。</p><p><img src="https://s2.loli.net/2023/11/19/1HGIlndNFCWwAzK.png" alt="image.png"></p><p>我们会在创建 <code>topic</code> 的时候为 <code>topic</code> 绑定一个应用，这样就只能由这个应用发送消息，其他的应用尝试发送消息的时候会遇到 401 鉴权的异常。</p><blockquote><p>同理，对于订阅者也可以关联指定的应用，从而使得只有规定的应用可以消费消息。</p></blockquote><h1 id="鉴权流程"><a href="#鉴权流程" class="headerlink" title="鉴权流程"></a>鉴权流程</h1><p>以上的两个功能本质上都是通过 <code>Pulsar</code> 的 <code>admin-API</code> 实现的。</p><p><img src="https://s2.loli.net/2023/11/19/zlLxTZi7rV8XvJg.png" alt="image.png"><br>这里关键的就是 <code>role</code>，在我们的场景下通常是一个应用的 <code>AppId</code>，只要是一个和项目唯一绑定的 <code>ID</code> 即可。</p><p>这只是授权的一步，整个鉴权流程图如下：<br><img src="https://s2.loli.net/2023/11/19/mGcIvBYo6SNy8gH.png"></p><h2 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h2><h3 id="生成公私钥"><a href="#生成公私钥" class="headerlink" title="生成公私钥"></a>生成公私钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/pulsar tokens create-key-pair --output-private-key my-private.key --output-public-key my-public.key</span><br></pre></td></tr></table></figure><p>将公钥分发到 <code>broker</code> 的节点上，鉴权的时候 <code>broker</code> 会使用公钥进行验证。</p><p>而私钥通常是管理员单独保存起来用于在后续的步骤为客户端生成 <code>token</code></p><h3 id="使用私钥生成-token"><a href="#使用私钥生成-token" class="headerlink" title="使用私钥生成 token"></a>使用私钥生成 token</h3><p>之后我们便可以使用这个私钥生成 <code>token</code> 了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bin/pulsar tokens create --private-key file:///path/to/my-private.key \</span><br><span class="line">            --subject 123456</span><br><span class="line"></span><br><span class="line">eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhZG1pbiJ9</span><br></pre></td></tr></table></figure><blockquote><p>其中的 <code>subject</code> 和本文长提到的 <code>role</code> 相等</p></blockquote><h3 id="使用-subject-授权"><a href="#使用-subject-授权" class="headerlink" title="使用 subject 授权"></a>使用 subject 授权</h3><p>只是单纯生成了 <code>token</code> 其实并没有什么作用，还得将 <code>subject</code>(role) 与 <code>topic</code> 进行授权绑定。</p><p><img src="https://s2.loli.net/2023/11/19/zlLxTZi7rV8XvJg.png" alt="image.png"><br>也就是上图的这个步骤。</p><blockquote><p>这里创建的 <code>admin</code> 客户端也得使用一个 <code>superRole</code> 角色的 <code>token</code> 才有权限进行授权。<br> <code>superRole</code> 使用在  <code>broker.conf</code> 中进行配置。</p></blockquote><h3 id="客户端使用-token-接入-broker"><a href="#客户端使用-token-接入-broker" class="headerlink" title="客户端使用 token 接入 broker"></a>客户端使用 token 接入 broker</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PulsarClient</span> <span class="variable">client</span> <span class="operator">=</span> PulsarClient.builder()</span><br><span class="line">    .serviceUrl(<span class="string">&quot;pulsar://broker.example.com:6650/&quot;</span>)</span><br><span class="line">    .authentication(AuthenticationFactory.token(<span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJKb2UifQ.ipevRNuRP6HflG8cFKnmUPtypruRC4fb1DWtoLL62SY&quot;</span>)）</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p>使用刚才私钥生成的 token 接入 broker 才能生产或者消费数据。</p><h2 id="originalPrincipal-cannot-be-a-proxy-role"><a href="#originalPrincipal-cannot-be-a-proxy-role" class="headerlink" title="originalPrincipal cannot be a proxy role"></a>originalPrincipal cannot be a proxy role</h2><p>这些流程正常都没啥问题，但直到我升级了 <code>Pulsar3.0</code> 后客户端直接就连不上了。</p><p>在 <code>broker</code> 中看到了 <code>WARN</code> 的警告日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cannot specify originalPrincipal when connecting without valid proxy role</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/11/19/8atrUwAj2Tg6GLu.jpg" alt="image.png"><br>之后在 3.0 的升级日志中看到相关的 <a href="https://github.com/apache/pulsar/pull/19455">Issue</a>。</p><p>从这个 PR 相关的代码和变更的文档可以得知：<br><img src="https://s2.loli.net/2023/11/19/3ktMOS6IjDu9nmE.png" alt="image.png"><br><img src="https://s2.loli.net/2023/11/19/fpJ8CuwnlXdhxWm.png" alt="image.png"></p><p>升级到 3.0 之后风险校验等级提高了，<code>proxyRole</code> 这个字段需要在 <code>broker</code> 中进行指定（之前的版本不需要强制填写）。</p><p>因为我们使用了 Proxy 组件，所有的请求都需要从 proxy 中转一次，这个 proxyRole 是为了告诉 broker：只有使用了 <code>proxyRole</code> 作为 <code>token</code> 的 <code>Proxy</code> 才能访问 broker，这样保证了 <code>broker</code> 的安全。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">superUserRoles: broker-admin,admin,proxy-admin </span><br><span class="line">proxyRoles: proxy-admin</span><br></pre></td></tr></table></figure><p>以上是我的配置，我的 Proxy 配置的也是 <code>proxy-admin</code> 这个 token，所以理论上是没有问题的，但依然鉴权失败了，查看 broker 的日志后拿到以下日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Illegal combination of role [proxy-admin] and originalPrincipal [proxy-admin]: originalPrincipal cannot be a proxy role.</span><br></pre></td></tr></table></figure><p>排查了许久依然没有太多头绪，所以我提了相关的 issue:<br><a href="https://github.com/apache/pulsar/issues/21583">https://github.com/apache/pulsar/issues/21583</a><br>之后我咨询了 <code>Pulsar</code> 的 PMC <a href="https://github.com/Technoboy-">@Technoboy</a>  在他的提示下发现我在测试的时候使用的是 <code>proxy-admin</code>，正好和 <code>proxyRoles</code> 相等。<br><img src="https://s2.loli.net/2023/11/19/AuoY8Sq4FPUVHjN.png" alt="image.png"><br>阅读源码和这个 <code>PR</code> 的 <code>comment</code> 之后得知：<br><img src="https://s2.loli.net/2023/11/19/pTbQkj2rOKnHNwS.png" alt="image.png"><br>也就是说客户端不能使用和 <code>proxyRole</code> 相同的角色进行连接，这个角色应当也只能给 <code>Proxy</code> 使用，这样的安全性才会高。</p><p>所以这个 Comment 还在讨论这是一个 <code>breaking change?</code> 还是一个增强补丁。<br>因为合并这个 PR 后对没有使用 <code>proxyRole</code> 的客户端将无法连接，同时也可能出现我这种 <code>proxyRole</code> 就是客户端使用的角色，这种情况也会鉴权失败。</p><p>所以我换了一个 superRole 角色就可以了，比如换成了 <code>admin</code>。</p><blockquote><p>但其实即便是放到我们的生产系统，只要配置了 <code>proxyRole</code> 也不会有问题，因为我们应用所使用的 role 都是不这里的 <code>superUserRole</code>，全部都是使用 <code>AppId</code> 生成的。</p></blockquote><h1 id="token-不一致"><a href="#token-不一致" class="headerlink" title="token 不一致"></a>token 不一致</h1><p>但也有一个疑惑，我在换为存放在 <code>configmap</code> 中的 admin token 之前(测试环境使用的是 helm 安装集群，所以这些 token 都是存放在 configmap 中的)，</p><p>为了验证是否只要非 <code>proxyRole</code> 的 <code>superRole</code> 都可以使用，我就自己使用了私钥重新生成了一个 <code>admin</code> 的 <code>token</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/pulsar tokens create --private-key file:///pulsar/private/private.key --subject admin</span><br></pre></td></tr></table></figure><p>这样生成的 <code>token</code> 也是可以使用的，但是我将 token 复制出来之后却发现 helm 生成的 <code>token</code> 与我用 <code>pulsar</code> 命令行生成的 <code>token</code> 并不相同。</p><p>为了搞清楚为什么 token 不同但鉴权依然可以通过的原因，之后我将 token decode之后知道了原因：<br><img src="https://s2.loli.net/2023/11/19/rKMRqGsmTDvLnZ2.png" alt="image.png"><br><img src="https://s2.loli.net/2023/11/19/xZn4v5EIFwXMRKk.png" alt="image.png"><br>原来是 Header 不同从而导致最终的 token 不同，helm 生成的 <code>token</code> 中多了一个 typ 字段。</p><hr><p>之后我检查了 helm 安装的流程，发现原来 helm 的脚本中使用的并不是 Java 的命令行工具：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;PULSARCTL_BIN&#125; token create -a RS256 --private-key-file <span class="variable">$&#123;privatekeytmpfile&#125;</span> --subject <span class="variable">$&#123;role&#125;</span> 2&amp;&gt; <span class="variable">$&#123;tokentmpfile&#125;</span></span></span><br></pre></td></tr></table></figure><p>这个 <code>PULSARCTL_BIN</code> 是一个由 Go 写的命令行工具，我查看了其中的源码，才知道 Go 的 JWT 工具会自带一个 header。<br><a href="https://github.com/streamnative/pulsarctl">https://github.com/streamnative/pulsarctl</a></p><p><img src="https://s2.loli.net/2023/11/19/kZ2zaOfo7PbvT4j.png" alt="image.png"><br>而 <code>Java</code> 是没有这个逻辑的，但也只是加了 <code>header</code>，<code>payload</code> 的值都是相同的。<br>这样也就解释了为什么 <code>token</code> 不同但确依然能使用的原因。</p><p>#Blog #Pulsar </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/11/19/gAadEDNG4piBbSl.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;最近在测试将 &lt;code&gt;Pulsar&lt;/code&gt; 2.11.2 升级到 &lt;code&gt;3.0.1&lt;/code&gt;的过程中碰到一个鉴权问题，正好借着这个问题充分了解下 &lt;code&gt;Pulsar&lt;/code&gt; 的鉴权机制是如何运转的。&lt;/p&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    
    <category term="Pulsar" scheme="http://crossoverjie.top/tags/Pulsar/"/>
    
  </entry>
  
  <entry>
    <title>技术阅读周刊第第6️⃣期</title>
    <link href="http://crossoverjie.top/2023/11/17/ob/newsletter/Newsletter06-20231117/"/>
    <id>http://crossoverjie.top/2023/11/17/ob/newsletter/Newsletter06-20231117/</id>
    <published>2023-11-17T09:28:25.000Z</published>
    <updated>2023-11-17T06:00:24.349Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/11/17/yZANlmctghPTJDj.png" alt="image.png"></p><p><strong>技术阅读周刊，每周更新。</strong></p><h2 id="历史更新"><a href="#历史更新" class="headerlink" title="历史更新"></a>历史更新</h2><ul><li><a href="https://crossoverjie.top/2023/10/13/ob/newsletter/Newsletter01-20231013/">20231013：第一期</a></li><li><a href="https://crossoverjie.top/2023/10/22/ob/newsletter/Newsletter02-20231022/">20231022：第二期</a></li><li><a href="https://crossoverjie.top/2023/10/27/ob/newsletter/Newsletter03-20231027/">20231027：第三期</a></li><li><a href="https://crossoverjie.top/2023/11/03/ob/newsletter/Newsletter04-20231103/">20231103：第四期</a></li><li><a href="https://crossoverjie.top/2023/11/10/ob/newsletter/Newsletter05-20231110/ni">20231007：第五期</a><span id="more"></span></li></ul><h2 id="5-Skills-the-Best-Engineers-I-Know-Have-in-Common"><a href="#5-Skills-the-Best-Engineers-I-Know-Have-in-Common" class="headerlink" title="5 Skills the Best Engineers I Know Have in Common"></a>5 Skills the Best Engineers I Know Have in Common</h2><p>URL: <a href="https://www.developing.dev/p/5-skills-all-10x-engineers-have?utm_source=post-email-title&amp;publication_id=1340878&amp;post_id=138715343&amp;utm_campaign=email-post-title&amp;isFreemail=true&amp;r=4buvd&amp;utm_medium=email">https://www.developing.dev/p/5-skills-all-10x-engineers-have?utm_source=post-email-title&amp;publication_id=1340878&amp;post_id=138715343&amp;utm_campaign=email-post-title&amp;isFreemail=true&amp;r=4buvd&amp;utm_medium=email</a></p><blockquote><p>作者讲述了他身边最好的工程师都具备的五个通用技能</p></blockquote><p><img src="https://s2.loli.net/2023/11/13/5NCshr4JWIemotP.png" alt="image.png"></p><ul><li>技术的深度与广度<ul><li>对于最好的工程师来说，深度和广度他们都会掌握</li><li>要保持好奇心，好奇心是学习任何新东西的原始动力</li><li>和身边厉害的工程师一起工作，会快速从他们身上学到东西</li></ul></li><li>不用权威去影响他人<ul><li>我理解的是不是依靠资历、经验来向他人输出观点；而是就事论事，利用知识、技能来输出。</li><li>锻炼写作和口语</li><li>学会销售</li></ul></li><li>提升他人<ul><li>分享知识，写 WIKI、做分享</li><li>团队协作：codereview、团队讨论等</li><li>构建工具，解决大家遇到的一些共性问题。</li></ul></li><li>要有主人公意识<ul><li>这些工程师都有主人公意识。</li><li>像老板一样思考问题</li></ul></li></ul><h2 id="Explaining-9-Types-of-API-Testing"><a href="#Explaining-9-Types-of-API-Testing" class="headerlink" title="Explaining 9 Types of API Testing"></a>Explaining 9 Types of API Testing</h2><p>URL: <a href="https://blog.bytebytego.com/p/ep83-explaining-9-types-of-api-testing?ref=dailydev">https://blog.bytebytego.com/p/ep83-explaining-9-types-of-api-testing?ref=dailydev</a><br><img src="https://s2.loli.net/2023/11/14/LrPN8GQ4FjuTISa.gif"></p><blockquote><p>介绍了九种常见的 API 测试方法</p></blockquote><ul><li>冒烟测试：简单的验证 API 是否可以正常工作</li><li>功能测试：根据需求进行测试，有预期结果进行比较</li><li>集成测试：结合多个 API 完成集成测试，更完善的功能测试</li><li>回归测试：确保新增功能没有影响到原有的 API</li><li>负载测试：模拟不同的负载进行测试，测出系统可支持的最大容量</li><li>压力测试：模拟高负载场景，在这种压力情况下观察 API 行为</li><li>安全测试：模拟外部安全测试</li><li>UI测试：配合 UI 交互进行功能测试</li><li>模糊测试：对 API 进行无效输入，尝试让 API 崩溃</li></ul><blockquote><p>实际情况可能并不会分的这么细，往往会将一些步骤合并在一起。</p></blockquote><h2 id="Prometheus-14-点实践经验分享"><a href="#Prometheus-14-点实践经验分享" class="headerlink" title="Prometheus 14 点实践经验分享"></a>Prometheus 14 点实践经验分享</h2><p>URL: <a href="https://mp.weixin.qq.com/s/z2IVP26swYaTeiPTeOMoQw">https://mp.weixin.qq.com/s/z2IVP26swYaTeiPTeOMoQw</a><br><img src="https://s2.loli.net/2023/11/16/8TKa5VBeX4jfdMr.png" alt="image.png"><br>这是一篇 17 年的 <code>Prometheus</code> 使用分享，但放到现在一点也不过时。</p><ul><li>使用 USE 理论来判断资源是否健康<ul><li>Utilization 利用率</li><li>Saturation 饱和率</li><li>Errors 错误</li></ul></li><li>使用 RED 理论<ul><li>Request rate 请求速率</li><li>Error rate 错误速率</li><li>Duration 持续时间</li></ul></li><li>指标命名需要有规范<ul><li>通常使用框架生成的都没啥问题</li><li>可以参考 Prometheus 的官方实践 <a href="https://prometheus.io/docs/practices/naming/">https://prometheus.io/docs/practices/naming/</a></li></ul></li><li>注意指标基数<ul><li>避免基数爆炸的，比如不能使用 user_id, trace_id 等作为指标的 label</li></ul></li><li>统计失败+总量而不要统计失败+成功量</li><li>告警症状而非原因</li><li>告警规则需要配置持续时间，避免无效告警</li><li>查询时候通常先求 rate() 再求 sum()</li></ul><h2 id="程序员可能必读书单推荐（一）-面向信仰编程"><a href="#程序员可能必读书单推荐（一）-面向信仰编程" class="headerlink" title="程序员可能必读书单推荐（一） - 面向信仰编程"></a>程序员可能必读书单推荐（一） - 面向信仰编程</h2><p>URL: <a href="https://draveness.me//books-1">https://draveness.me//books-1</a></p><blockquote><p>draveness 大佬推荐的都是一些偏低层的，静得下心的可以看看，我觉得我是看不下来的。</p></blockquote><ul><li>SICP 《计算机程序的构造和解释》</li><li>CTMCP 《计算机程序设计的概念、技术和模型》</li><li>DDIA 《设计数据密集型应用》</li></ul><h2 id="TOP-20-Go最佳实践"><a href="#TOP-20-Go最佳实践" class="headerlink" title="TOP 20 Go最佳实践"></a>TOP 20 Go最佳实践</h2><p>URL: <a href="https://colobu.com/2023/11/17/golang-quick-reference-top-20-best-coding-practices/">https://colobu.com/2023/11/17/golang-quick-reference-top-20-best-coding-practices/</a></p><blockquote><p>都是一些基本套路，各种语言的使用者都推荐掌握</p></blockquote><ul><li>适当使用缩进，推荐统一使用 <code>gofmt</code></li><li>变量和函数名具有意义</li><li>限制行长度，IDE 通常都会有提示</li><li>使用常量代替魔法值</li><li>显示处理错误</li><li>避免使用全局变量</li><li>使用结构体处理复杂逻辑，更易维护</li><li>使用 <code>goroutines</code> 处理并发</li><li>使用 Recover 处理 panic</li><li>避免使用 Init 函数，更容易维护</li><li>使用 Defer 清理资源</li><li>使用复合字面值而非构造函数</li><li>使用显示返回值而非具名返回值，也是代码更易读</li><li>避免变量屏蔽，易读性</li><li>使用接口抽象</li></ul><p>文章链接：</p><ul><li><a href="https://www.developing.dev/p/5-skills-all-10x-engineers-have?utm_source=post-email-title&amp;publication_id=1340878&amp;post_id=138715343&amp;utm_campaign=email-post-title&amp;isFreemail=true&amp;r=4buvd&amp;utm_medium=email">https://www.developing.dev/p/5-skills-all-10x-engineers-have?utm_source=post-email-title&amp;publication_id=1340878&amp;post_id=138715343&amp;utm_campaign=email-post-title&amp;isFreemail=true&amp;r=4buvd&amp;utm_medium=email</a></li><li><a href="https://blog.bytebytego.com/p/ep83-explaining-9-types-of-api-testing?ref=dailydev">https://blog.bytebytego.com/p/ep83-explaining-9-types-of-api-testing?ref=dailydev</a></li><li><a href="https://mp.weixin.qq.com/s/z2IVP26swYaTeiPTeOMoQw">https://mp.weixin.qq.com/s/z2IVP26swYaTeiPTeOMoQw</a></li><li><a href="https://draveness.me//books-1">https://draveness.me//books-1</a></li><li><a href="https://colobu.com/2023/11/17/golang-quick-reference-top-20-best-coding-practices/">https://colobu.com/2023/11/17/golang-quick-reference-top-20-best-coding-practices/</a></li></ul><p>#Newletters </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/11/17/yZANlmctghPTJDj.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术阅读周刊，每周更新。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;历史更新&quot;&gt;&lt;a href=&quot;#历史更新&quot; class=&quot;headerlink&quot; title=&quot;历史更新&quot;&gt;&lt;/a&gt;历史更新&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://crossoverjie.top/2023/10/13/ob/newsletter/Newsletter01-20231013/&quot;&gt;20231013：第一期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://crossoverjie.top/2023/10/22/ob/newsletter/Newsletter02-20231022/&quot;&gt;20231022：第二期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://crossoverjie.top/2023/10/27/ob/newsletter/Newsletter03-20231027/&quot;&gt;20231027：第三期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://crossoverjie.top/2023/11/03/ob/newsletter/Newsletter04-20231103/&quot;&gt;20231103：第四期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://crossoverjie.top/2023/11/10/ob/newsletter/Newsletter05-20231110/ni&quot;&gt;20231007：第五期&lt;/a&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    <category term="Newsletter" scheme="http://crossoverjie.top/categories/OB/Newsletter/"/>
    
    
  </entry>
  
  <entry>
    <title>k8s实战-Istio 网关</title>
    <link href="http://crossoverjie.top/2023/11/13/ob/k8s-istio03/"/>
    <id>http://crossoverjie.top/2023/11/13/ob/k8s-istio03/</id>
    <published>2023-11-13T14:07:18.000Z</published>
    <updated>2023-11-14T08:03:13.523Z</updated>
    
    <content type="html"><![CDATA[<p>在上一期 <a href="https://crossoverjie.top/2023/11/07/ob/k8s-Istio02/">k8s-服务网格实战-配置 Mesh</a> 中讲解了如何配置集群内的 Mesh 请求，Istio 同样也可以处理集群外部流量，也就是我们常见的网关。<br><img src="https://s2.loli.net/2023/11/14/TSCmnecrjHKfLzi.png" alt="image.png"></p><span id="more"></span><p>其实和之前讲到的<a href="https://crossoverjie.top/2023/09/15/ob/k8s-Ingress/">k8s入门到实战-使用Ingress</a> <code>Ingress</code> 作用类似，都是将内部服务暴露出去的方法。</p><p>只是使用 <code>Istio-gateway</code> 会更加灵活。<br><img src="https://s2.loli.net/2023/11/14/hVFUTLB2CHjeRuM.png" alt="image.png"></p><p>这里有一张功能对比图，可以明显的看出 <code>Istio-gateway</code> 支持的功能会更多，如果是一个中大型企业并且已经用上 Istio 后还是更推荐是有 <code>Istio-gateway</code>，使用同一个控制面就可以管理内外网流量。</p><h2 id="创建-Gateway"><a href="#创建-Gateway" class="headerlink" title="创建 Gateway"></a>创建 Gateway</h2><p>开始之前首先是创建一个 <code>Istio-Gateway</code> 的资源：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span>  </span><br><span class="line"><span class="attr">kind:</span> <span class="string">Gateway</span>  </span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">istio-ingress-gateway</span>  </span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span>  </span><br><span class="line"><span class="attr">spec:</span>  </span><br><span class="line">  <span class="attr">servers:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span>  </span><br><span class="line">        <span class="attr">number:</span> <span class="number">80</span>  </span><br><span class="line">        <span class="attr">name:</span> <span class="string">http</span>  </span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">HTTP</span>  </span><br><span class="line">      <span class="attr">hosts:</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="string">&#x27;www.service1.io&#x27;</span>  </span><br><span class="line">  <span class="attr">selector:</span>  </span><br><span class="line">    <span class="attr">app:</span> <span class="string">istio-ingressgateway</span> <span class="comment">#与现有的 gateway 关联  </span></span><br><span class="line">    <span class="attr">istio:</span> <span class="string">ingressgateway</span></span><br></pre></td></tr></table></figure><p>其中的 <code>selector</code> 选择器中匹配的 label 与我们安装 <code>Istio</code> 时候自带的 <code>gateway</code> 关联即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 gateway 的 label</span></span><br><span class="line">k get pod -n istio-system</span><br><span class="line">NAME                                    READY   STATUS</span><br><span class="line">istio-ingressgateway-649f75b6b9-klljw   1/1     Running</span><br><span class="line"></span><br><span class="line">k describe pod istio-ingressgateway-649f75b6b9-klljw -n istio-system |grep Labels</span><br><span class="line">Labels:           app=istio-ingressgateway</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/10/26/3JXneYvyqI4WTgt.png" alt="image.png"></p><blockquote><p>这个 <code>Gateway</code> 在我们第一次安装 <code>Istio</code> 的时候就会安装这个组件。</p></blockquote><hr><p>这个配置的含义是网关会代理通过 <code>www.service1.io</code> 这个域名访问的所有请求。</p><p>之后需要使用刚才的 gateway 与我们的服务的 service 进行绑定，这时就需要使用到 <code>VirtualService</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span>  </span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span>  </span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">k8s-combat-istio-http-vs</span>  </span><br><span class="line"><span class="attr">spec:</span>  </span><br><span class="line">  <span class="attr">gateways:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">istio-ingress-gateway</span> <span class="comment"># 绑定刚才创建的 gateway 名称 </span></span><br><span class="line">  <span class="attr">hosts:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">www.service1.io</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default</span>  </span><br><span class="line">  <span class="attr">route:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span>  </span><br><span class="line">        <span class="attr">host:</span> <span class="string">k8s-combat-service-istio-mesh</span>  <span class="comment">#service 名称</span></span><br><span class="line">        <span class="attr">port:</span>  </span><br><span class="line">          <span class="attr">number:</span> <span class="number">8081</span>  </span><br><span class="line">        <span class="attr">subset:</span> <span class="string">v1</span></span><br></pre></td></tr></table></figure><p>这个和我们之前讲到的 Mesh 内部流量时所使用到的 <code>VirtualService</code> 配置是一样的。</p><p>这里的含义也是通过 <code>www.service1.io</code> 以及 <code>istio-ingress-gateway</code> 网关的流量会进入这个虚拟服务，但所有的请求都会进入 <code>subset: v1</code> 这个分组。</p><p>这个的分组信息在上一节可以查询到：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span>  </span><br><span class="line"><span class="attr">kind:</span> <span class="string">DestinationRule</span>  </span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">k8s-combat-service-ds</span>  </span><br><span class="line"><span class="attr">spec:</span>  </span><br><span class="line">  <span class="attr">host:</span> <span class="string">k8s-combat-service-istio-mesh</span>  </span><br><span class="line">  <span class="attr">subsets:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v1</span>  </span><br><span class="line">      <span class="attr">labels:</span>  </span><br><span class="line">        <span class="attr">app:</span> <span class="string">k8s-combat-service-v1</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v2</span>  </span><br><span class="line">      <span class="attr">labels:</span>  </span><br><span class="line">        <span class="attr">app:</span> <span class="string">k8s-combat-service-v2</span></span><br></pre></td></tr></table></figure><p>之后我们访问这个域名即可拿到响应，同时我们打开 <code>k8s-combat-service-istio-mesh</code> service 的 Pod 查看日志，会发现所有的请求都进入了 v1, 如果不需要这个限制条件，将 <code>subset: v1</code> 删除即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl  http://www.service1.io/ping</span><br></pre></td></tr></table></figure><blockquote><p>本地需要配置下 host: <code>127.0.0.1 www.service1.io</code></p></blockquote><p><img src="https://s2.loli.net/2023/11/13/ksR9FbdWMEhlLBQ.png" alt="image.png"></p><p>还有一点，我们需要拿到 <code>gateway</code> 的外部IP，才能将 IP 和刚才的域名<code>www.service1.io</code> 进行绑定（host，或者是域名管理台）。</p><p>如果使用的是 <code>docker-desktop</code> 自带的 <code>kubernetes</code> 集群时候直接使用 <code>127.0.0.1</code> 即可，默认就会绑定上。</p><p>如果使用的是 <code>minikube</code> 安装的，那需要使用 <code>minikube tunnel</code> 手动为 service 为<code>LoadBalancer</code> 类型的绑定一个本地 IP，具体可以参考文档：<br><a href="https://minikube.sigs.k8s.io/docs/tasks/loadbalancer">https://minikube.sigs.k8s.io/docs/tasks/loadbalancer</a></p><blockquote><p>如果是生产环境使用，云服务厂商会自动绑定一个外网 IP。</p></blockquote><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://s2.loli.net/2023/11/14/4yBEDZOcsWKxLpg.png" alt="image.png"></p><p>这个的访问请求的流程和之前讲到的 <code>kubernetes Ingress</code> 流程是类似的，只是 gateway 是通过 <code>VirtualService</code> 来路由的 service，同时在这个 <code>VirtualService</code> 中可以自定义许多的路由规则。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>服务网格 <code>Istio</code> 基本上讲完了，后续还有关于 <code>Telemetry</code> 相关的 <code>trace</code>、<code>log</code>、<code>metrics</code> 会在运维章节更新，也会和 Istio 有所关联。<br>感兴趣的朋友可以持续关注。</p><p>本文的所有源码在这里可以访问：<br><a href="https://github.com/crossoverJie/k8s-combat">https://github.com/crossoverJie/k8s-combat</a></p><p>#Blog #Istio </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在上一期 &lt;a href=&quot;https://crossoverjie.top/2023/11/07/ob/k8s-Istio02/&quot;&gt;k8s-服务网格实战-配置 Mesh&lt;/a&gt; 中讲解了如何配置集群内的 Mesh 请求，Istio 同样也可以处理集群外部流量，也就是我们常见的网关。&lt;br&gt;&lt;img src=&quot;https://s2.loli.net/2023/11/14/TSCmnecrjHKfLzi.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="k8s" scheme="http://crossoverjie.top/categories/k8s/"/>
    
    
    <category term="Istio" scheme="http://crossoverjie.top/tags/Istio/"/>
    
  </entry>
  
  <entry>
    <title>技术阅读周刊第第5️⃣期</title>
    <link href="http://crossoverjie.top/2023/11/10/ob/newsletter/Newsletter05-20231110/"/>
    <id>http://crossoverjie.top/2023/11/10/ob/newsletter/Newsletter05-20231110/</id>
    <published>2023-11-10T09:28:25.000Z</published>
    <updated>2023-11-10T02:28:00.685Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/11/10/aywEgYVeC9vL8pZ.png" alt="image.png"></p><p><strong>技术阅读周刊，每周更新。</strong></p><h2 id="历史更新"><a href="#历史更新" class="headerlink" title="历史更新"></a>历史更新</h2><ul><li><a href="https://crossoverjie.top/2023/10/13/ob/newsletter/Newsletter01-20231013/">20231013：第一期</a></li><li><a href="https://crossoverjie.top/2023/10/22/ob/newsletter/Newsletter02-20231022/">20231022：第二期</a></li><li><a href="https://crossoverjie.top/2023/10/27/ob/newsletter/Newsletter03-20231027/">20231027：第三期</a></li><li><a href="https://crossoverjie.top/2023/11/03/ob/newsletter/Newsletter04-20231103/">20231027：第四期</a><span id="more"></span></li></ul><h2 id="How-to-Use-OpenTelemetry-in-Go-OpenTelemetry-is-a-powerful…-by-Akanksha-Rana-KloudMate"><a href="#How-to-Use-OpenTelemetry-in-Go-OpenTelemetry-is-a-powerful…-by-Akanksha-Rana-KloudMate" class="headerlink" title="How to Use OpenTelemetry in Go. OpenTelemetry is a powerful… | by Akanksha Rana | KloudMate"></a>How to Use OpenTelemetry in Go. OpenTelemetry is a powerful… | by Akanksha Rana | KloudMate</h2><p>URL: <a href="https://blog.kloudmate.com/how-to-use-opentelemetry-in-go-e416ca01c499">https://blog.kloudmate.com/how-to-use-opentelemetry-in-go-e416ca01c499</a></p><blockquote><p>作者一步步带你使用 golang 配置了 <code>OpenTelemetry</code>，不过由于 Go 不支持 agent，还是没有 Java 方便，很多地方都需要硬编码。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tp := trace.NewTracerProvider(  </span><br><span class="line">    trace.WithBatcher(exp),  </span><br><span class="line">    trace.WithResource(newResource()),  </span><br><span class="line">)  </span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> err := tp.Shutdown(context.Background()); err != <span class="literal">nil</span> &#123;  </span><br><span class="line">        l.Fatal(err)  </span><br><span class="line">    &#125;&#125;()  </span><br><span class="line">otel.SetTracerProvider(tp)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/11/07/wFtivm6abfVrgSD.png" alt="image.png"></p><p>最终会输出到文件中，适配起来倒也蛮简单的。</p><h2 id="What-happens-when-you-create-a-pod-in-Kubernetes-by-Daniele-Polencic-ITNEXT"><a href="#What-happens-when-you-create-a-pod-in-Kubernetes-by-Daniele-Polencic-ITNEXT" class="headerlink" title="What happens when you create a pod in Kubernetes | by Daniele Polencic | ITNEXT"></a>What happens when you create a pod in Kubernetes | by Daniele Polencic | ITNEXT</h2><p>URL: <a href="https://itnext.io/what-happens-when-you-create-a-pod-in-kubernetes-6b789b6db8a8">https://itnext.io/what-happens-when-you-create-a-pod-in-kubernetes-6b789b6db8a8</a></p><blockquote><p>本文讲解了一个 Pod 在 <code>kubernetes</code> 中创建的主要流程。</p></blockquote><p><img src="https://s2.loli.net/2023/11/08/2V6ei8XnJ9t1Zj3.png" alt="image.png"><br><img src="https://s2.loli.net/2023/11/08/gKhrCXLtkzicI4F.png" alt="image.png"><br><img src="https://s2.loli.net/2023/11/08/mfGkSAFtdvOCyLx.png" alt="image.png"><br><img src="https://s2.loli.net/2023/11/08/XG7co1AF9blViaM.png" alt="image.png"><br><img src="https://s2.loli.net/2023/11/08/EXVFnQYz9Arkyx2.png" alt="image.png"></p><ul><li>客户端校验 <code>yaml</code> 格式是否正确</li><li>成功后会将 <code>yaml</code> 写入 <code>etcd</code>.</li><li>之后会将 Pod 信息写入调度队列</li><li>调度队列获取该任务，然后选择一个合适的 Node 节点部署 Pod</li><li>等待 Pod 启动成功通过 Prob 探针校验</li><li>将 Pod 的 <code>IP:Port</code> 信息作为 <code>endpoint</code> 存储在 <code>etcd</code></li><li>如果有创建 <code>service</code>，会将这个 <code>endpoint</code> 和 <code>service</code> 进行绑定</li><li>之后其余的组件就可以使用这个 service，比如 <code>service mesh</code>、<code>ingress</code>、<code>kube-proxy</code>、<code>coreDNS</code> 等组件。</li></ul><h2 id="像Redis作者那样，使用Go实现一个聊天服务器，不到100行代码"><a href="#像Redis作者那样，使用Go实现一个聊天服务器，不到100行代码" class="headerlink" title="像Redis作者那样，使用Go实现一个聊天服务器，不到100行代码"></a>像Redis作者那样，使用Go实现一个聊天服务器，不到100行代码</h2><p>URL: <a href="https://colobu.com/2023/10/29/implement-a-small-chat-server-like-antirez-in-100-lines/">https://colobu.com/2023/10/29/implement-a-small-chat-server-like-antirez-in-100-lines/</a></p><blockquote><p>前段时间 Redis 作者用 C 语言写了一个简单的聊天服务器，作者使用 Go 实现了类似的功能，代码量也很少，适合新手联系（ Go +goroutine 确实比 Java 写起来要简单）<br><img src="https://s2.loli.net/2023/11/09/af9pk2lC51ujIgq.png" alt="image.png"></p></blockquote><p>有几个核心流程：</p><ul><li>每次创建一个连接时，都会将这个连接保存在内存里，使用 conn 作为 key</li><li>每次发送消息时会将消息发到一个内部 chan 中，然后异步读取 chan 并通过 conn 发送消息</li></ul><h2 id="Five-API-Performance-Optimization-Tricks-that-Every-Java-Developer-Must-Know-by-lance-Javarevisited-Medium"><a href="#Five-API-Performance-Optimization-Tricks-that-Every-Java-Developer-Must-Know-by-lance-Javarevisited-Medium" class="headerlink" title="Five API Performance Optimization Tricks that Every Java Developer Must Know | by lance | Javarevisited | Medium"></a>Five API Performance Optimization Tricks that Every Java Developer Must Know | by lance | Javarevisited | Medium</h2><p>URL: <a href="https://medium.com/javarevisited/five-api-performance-optimization-tricks-that-every-java-developer-must-know-75324ee1d244">https://medium.com/javarevisited/five-api-performance-optimization-tricks-that-every-java-developer-must-know-75324ee1d244</a></p><blockquote><p>作者讲了一些常见的  API 优化手段，不止是 Java 开发者适用。</p></blockquote><ol><li>并行调用</li><li>避免长事务：避免 RPC 和查询逻辑与事务代码放在一起，应该拆分。</li><li>添加合适的索引</li><li>数据库返回少量的数据</li><li>加缓存</li></ol><h2 id="Are-you-correctly-using-Optional-Collections-and-Null-in-your-Java-code-by-Abhishek-Singh-Medium"><a href="#Are-you-correctly-using-Optional-Collections-and-Null-in-your-Java-code-by-Abhishek-Singh-Medium" class="headerlink" title="Are you correctly using Optional, Collections, and Null in your Java code ? | by Abhishek Singh | Medium"></a>Are you correctly using Optional, Collections, and Null in your Java code ? | by Abhishek Singh | Medium</h2><p>URL: <a href="https://medium.com/@abhisheksinghjava/are-you-correctly-using-optional-collections-and-null-in-your-java-code-5d2b8617d47c">https://medium.com/@abhisheksinghjava/are-you-correctly-using-optional-collections-and-null-in-your-java-code-5d2b8617d47c</a></p><blockquote><p>Java 介绍了 <code>Optional</code> 的正确用法<br><img src="https://s2.loli.net/2023/11/10/u5xIePQBwz3iS8Z.png" alt="image.png"><br><img src="https://s2.loli.net/2023/11/10/I2AiOCdvaDbXrG4.png" alt="image.png"></p></blockquote><ol><li>入参不需要 <code>Optional</code></li><li>私有方法返回不需要 <code>Optional</code></li><li>公共方法返回使用 <code>Optional</code>，因为有些开发者可能不会判断 null。</li><li>集合类数据返回不需要返回 <code>Optional/null</code>, 而是返回空集合。</li></ol><p>文章链接：</p><ul><li><a href="https://blog.kloudmate.com/how-to-use-opentelemetry-in-go-e416ca01c499">https://blog.kloudmate.com/how-to-use-opentelemetry-in-go-e416ca01c499</a></li><li><a href="https://itnext.io/what-happens-when-you-create-a-pod-in-kubernetes-6b789b6db8a8">https://itnext.io/what-happens-when-you-create-a-pod-in-kubernetes-6b789b6db8a8</a></li><li><a href="https://colobu.com/2023/10/29/implement-a-small-chat-server-like-antirez-in-100-lines/">https://colobu.com/2023/10/29/implement-a-small-chat-server-like-antirez-in-100-lines/</a></li><li><a href="https://medium.com/javarevisited/five-api-performance-optimization-tricks-that-every-java-developer-must-know-75324ee1d244">https://medium.com/javarevisited/five-api-performance-optimization-tricks-that-every-java-developer-must-know-75324ee1d244</a></li><li><a href="https://medium.com/@abhisheksinghjava/are-you-correctly-using-optional-collections-and-null-in-your-java-code-5d2b8617d47c">https://medium.com/@abhisheksinghjava/are-you-correctly-using-optional-collections-and-null-in-your-java-code-5d2b8617d47c</a></li></ul><p>#Newletters </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/11/10/aywEgYVeC9vL8pZ.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术阅读周刊，每周更新。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;历史更新&quot;&gt;&lt;a href=&quot;#历史更新&quot; class=&quot;headerlink&quot; title=&quot;历史更新&quot;&gt;&lt;/a&gt;历史更新&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://crossoverjie.top/2023/10/13/ob/newsletter/Newsletter01-20231013/&quot;&gt;20231013：第一期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://crossoverjie.top/2023/10/22/ob/newsletter/Newsletter02-20231022/&quot;&gt;20231022：第二期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://crossoverjie.top/2023/10/27/ob/newsletter/Newsletter03-20231027/&quot;&gt;20231027：第三期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://crossoverjie.top/2023/11/03/ob/newsletter/Newsletter04-20231103/&quot;&gt;20231027：第四期&lt;/a&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    <category term="Newsletter" scheme="http://crossoverjie.top/categories/OB/Newsletter/"/>
    
    
  </entry>
  
  <entry>
    <title>k8s-服务网格实战-配置 Mesh（灰度发布）</title>
    <link href="http://crossoverjie.top/2023/11/07/ob/k8s-Istio02/"/>
    <id>http://crossoverjie.top/2023/11/07/ob/k8s-Istio02/</id>
    <published>2023-11-07T14:30:46.000Z</published>
    <updated>2023-11-07T07:42:58.171Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/11/07/rmwdGK6TQDuhAEW.png" alt="istio-02.png"></p><p>在上一篇 <a href="https://crossoverjie.top/2023/10/31/ob/k8s-Istio01/">k8s-服务网格实战-入门Istio</a>中分享了如何安装部署 <code>Istio</code>，同时可以利用 <code>Istio</code> 实现 <code>gRPC</code> 的负载均衡。</p><span id="more"></span><p>今天我们更进一步，深入了解使用 Istio 的功能。<br><img src="https://s2.loli.net/2023/11/07/jKIeEH7ir9uqDUd.png" alt="image.png"><br>从 Istio 的流量模型中可以看出：Istio 支持管理集群的出入口请求（gateway），同时也支持管理集群内的 mesh 流量，也就是集群内服务之间的请求。</p><p>本次先讲解集群内部的请求，配合实现以下两个功能：</p><ul><li>灰度发布（对指定的请求分别路由到不同的 service 中）</li><li>配置 service 的请求权重</li></ul><h2 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h2><p>在开始之前会部署两个 <code>deployment</code> 和一个 <code>service</code>，同时这两个 <code>deployment</code> 所关联的 <code>Pod</code> 分别对应了两个不同的 <code>label</code>，由于在灰度的时候进行分组。<br><img src="https://s2.loli.net/2023/11/07/tLOYQiNg5HEe2ry.png" alt="image.png"></p><p>使用这个 <code>yaml</code> 会部署所需要的 <code>deployment</code> 和 <code>service</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/crossoverJie/k8s-combat/main/deployment/istio-mesh.yaml </span><br></pre></td></tr></table></figure><hr><p>首先设想下什么情况下我们需要灰度发布，一般是某个重大功能的测试，只对部分进入内测的用户开放入口。</p><p>假设我们做的是一个 <code>App</code>，我们可以对拿到了内测包用户的所有请求头中加入一个版本号。</p><p>比如 <code>version=200</code> 表示新版本，<code>version=100</code> 表示老版本。<br>同时在服务端会将这个版本号打印出来，用于区分请求是否进入了预期的 Pod。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Client </span></span><br><span class="line">version := r.URL.Query().Get(<span class="string">&quot;version&quot;</span>)  </span><br><span class="line">name := <span class="string">&quot;world&quot;</span>  </span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), time.Second)  </span><br><span class="line">md := metadata.New(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;  </span><br><span class="line">    <span class="string">&quot;version&quot;</span>: version,  </span><br><span class="line">&#125;)  </span><br><span class="line">ctx = metadata.NewOutgoingContext(ctx, md)  </span><br><span class="line"><span class="keyword">defer</span> cancel()  </span><br><span class="line">g, err := c.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: name&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Server</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span></span> SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, <span class="type">error</span>) &#123;  </span><br><span class="line">    md, ok := metadata.FromIncomingContext(ctx)  </span><br><span class="line">    <span class="keyword">var</span> version <span class="type">string</span>  </span><br><span class="line">    <span class="keyword">if</span> ok &#123;  </span><br><span class="line">       version = md.Get(<span class="string">&quot;version&quot;</span>)[<span class="number">0</span>]  </span><br><span class="line">    &#125;    log.Printf(<span class="string">&quot;Received: %v, version: %s&quot;</span>, in.GetName(), version)  </span><br><span class="line">    name, _ := os.Hostname()  </span><br><span class="line">    <span class="keyword">return</span> &amp;pb.HelloReply&#123;Message: fmt.Sprintf(<span class="string">&quot;hostname:%s, in:%s, version:%s&quot;</span>, name, in.Name, version)&#125;, <span class="literal">nil</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对-service-分组"><a href="#对-service-分组" class="headerlink" title="对 service 分组"></a>对 service 分组</h3><p>进行灰度测试时往往需要新增部署一个灰度服务，这里我们称为 v2（也就是上图中的 Pod2）。</p><p>同时需要将 v1 和 v2 分组：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span>  </span><br><span class="line"><span class="attr">kind:</span> <span class="string">DestinationRule</span>  </span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">k8s-combat-service-ds</span>  </span><br><span class="line"><span class="attr">spec:</span>  </span><br><span class="line">  <span class="attr">host:</span> <span class="string">k8s-combat-service-istio-mesh</span>  </span><br><span class="line">  <span class="attr">subsets:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v1</span>  </span><br><span class="line">      <span class="attr">labels:</span>  </span><br><span class="line">        <span class="attr">app:</span> <span class="string">k8s-combat-service-v1</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v2</span>  </span><br><span class="line">      <span class="attr">labels:</span>  </span><br><span class="line">        <span class="attr">app:</span> <span class="string">k8s-combat-service-v2</span></span><br></pre></td></tr></table></figure><p>这里我们使用 Istio 的 <code>DestinationRule</code> 定义 <code>subset</code>，也就是将我们的 <code>service</code> 下的 Pod 分为 v1&#x2F;v2。</p><blockquote><p>使用 标签 <code>app</code> 进行分组</p></blockquote><p>注意这里的 <code>host: k8s-combat-service-istio-mesh</code> 通常配置的是 <code>service</code> 名称。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>  </span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span>  </span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">k8s-combat-service-istio-mesh</span>  </span><br><span class="line"><span class="attr">spec:</span>  </span><br><span class="line">  <span class="attr">selector:</span>  </span><br><span class="line">    <span class="attr">appId:</span> <span class="string">&quot;12345&quot;</span>  </span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span>  </span><br><span class="line">  <span class="attr">ports:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8081</span>  </span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8081</span>  </span><br><span class="line">      <span class="attr">name:</span> <span class="string">app</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">grpc</span>  </span><br><span class="line">      <span class="attr">port:</span> <span class="number">50051</span>  </span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">50051</span></span><br></pre></td></tr></table></figure><p>也就是这里 service 的名称，同时也支持配置为 <code>host: k8s-combat-service-istio-mesh.default.svc.cluster.local</code>，如果使用的简写<code>Istio</code> 会根据当前指定的 <code>namespace</code> 进行解析。</p><blockquote><p>Istio 更推荐使用全限定名替代我们这里的简写，从而避免误操作。</p></blockquote><p>当然我们也可以在 <code>DestinationRule</code> 中配置负载均衡的策略，这里我们先略过：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span>  </span><br><span class="line"><span class="attr">kind:</span> <span class="string">DestinationRule</span>  </span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">k8s-combat-service-ds</span>  </span><br><span class="line"><span class="attr">spec:</span>  </span><br><span class="line">  <span class="attr">host:</span> <span class="string">k8s-combat-service-istio-mesh</span> </span><br><span class="line">  <span class="attr">trafficPolicy:</span></span><br><span class="line">    <span class="attr">loadBalancer:</span></span><br><span class="line">      <span class="attr">simple:</span> <span class="string">ROUND_ROBIN</span>  </span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/11/07/TJyEV6eIiCcapSH.png" alt="image.png"></p><hr><p>这样我们就定义好了两个分组：</p><ul><li>v1：app: k8s-combat-service-v1</li><li>v2：app: k8s-combat-service-v2</li></ul><p>之后就可以配置路由规则将流量分别指定到两个不同的组中，这里我们使用 <code>VirtualService</code> 进行配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span>  </span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span>  </span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">k8s-combat-service-vs</span>  </span><br><span class="line"><span class="attr">spec:</span>  </span><br><span class="line">  <span class="attr">gateways:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">mesh</span>  </span><br><span class="line">  <span class="attr">hosts:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">k8s-combat-service-istio-mesh</span> <span class="comment"># match this host</span></span><br><span class="line"><span class="attr">http:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v1</span>  </span><br><span class="line">    <span class="attr">match:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">headers:</span>  </span><br><span class="line">          <span class="attr">version:</span>  </span><br><span class="line">            <span class="attr">exact:</span> <span class="string">&#x27;100&#x27;</span>  </span><br><span class="line">    <span class="attr">route:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">destination:</span>  </span><br><span class="line">          <span class="attr">host:</span> <span class="string">k8s-combat-service-istio-mesh</span>  </span><br><span class="line">          <span class="attr">subset:</span> <span class="string">v1</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v2</span>  </span><br><span class="line">    <span class="attr">match:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">headers:</span>  </span><br><span class="line">          <span class="attr">version:</span>  </span><br><span class="line">            <span class="attr">exact:</span> <span class="string">&#x27;200&#x27;</span>  </span><br><span class="line">    <span class="attr">route:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">destination:</span>  </span><br><span class="line">          <span class="attr">host:</span> <span class="string">k8s-combat-service-istio-mesh</span>  </span><br><span class="line">          <span class="attr">subset:</span> <span class="string">v2</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default</span>  </span><br><span class="line">    <span class="attr">route:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">destination:</span>  </span><br><span class="line">          <span class="attr">host:</span> <span class="string">k8s-combat-service-istio-mesh</span>  </span><br><span class="line">          <span class="attr">subset:</span> <span class="string">v1</span></span><br></pre></td></tr></table></figure><p>这个规则很简单，会检测 http 协议的 <code>header</code> 中的 <code>version</code> 字段值，如果为 100 这路由到 <code>subset=v1</code> 这个分组的 Pod 中，同理为 200 时则路由到 <code>subset=v2</code> 这个分组的 Pod 中。</p><p>当没有匹配到 header 时则进入默认的 <code>subset:v1</code></p><blockquote><p> <code>gRPC</code> 也是基于 http 协议，它的 <code>metadata</code> 也就对应了 <code>http</code> 协议中的 <code>header</code>。</p></blockquote><h3 id="header-x3D-100"><a href="#header-x3D-100" class="headerlink" title="header&#x3D;100"></a>header&#x3D;100</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Greeting: hostname:k8s-combat-service-v1-5b998dc8c8-hkb72, <span class="keyword">in</span>:world, version:100istio-proxy@k8s-combat-service-v1-5b998dc8c8-hkb72:/$ curl <span class="string">&quot;http://127.0.0.1:8081/grpc_client?name=k8s-combat-service-istio-mesh&amp;version=100&quot;</span></span><br><span class="line">Greeting: hostname:k8s-combat-service-v1-5b998dc8c8-hkb72, <span class="keyword">in</span>:world, version:100istio-proxy@k8s-combat-service-v1-5b998dc8c8-hkb72:/$ curl <span class="string">&quot;http://127.0.0.1:8081/grpc_client?name=k8s-combat-service-istio-mesh&amp;version=100&quot;</span></span><br><span class="line">Greeting: hostname:k8s-combat-service-v1-5b998dc8c8-hkb72, <span class="keyword">in</span>:world, version:100istio-proxy@k8s-combat-service-v1-5b998dc8c8-hkb72:/$ curl <span class="string">&quot;http://127.0.0.1:8081/grpc_client?name=k8s-combat-service-istio-mesh&amp;version=100&quot;</span></span><br><span class="line">Greeting: hostname:k8s-combat-service-v1-5b998dc8c8-hkb72, <span class="keyword">in</span>:world, version:100istio-proxy@k8s-combat-service-v1-5b998dc8c8-hkb72:/$ curl <span class="string">&quot;http://127.0.0.1:8081/grpc_client?name=k8s-combat-service-istio-mesh&amp;version=100&quot;</span></span><br></pre></td></tr></table></figure><h3 id="header-x3D-200"><a href="#header-x3D-200" class="headerlink" title="header&#x3D;200"></a>header&#x3D;200</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Greeting: hostname:k8s-combat-service-v2-5db566fb76-xj7j6, <span class="keyword">in</span>:world, version:200istio-proxy@k8s-combat-service-v1-5b998dc8c8-hkb72:/$ curl <span class="string">&quot;http://127.0.0.1:8081/grpc_client?name=k8s-combat-service-istio-mesh&amp;version=200&quot;</span></span><br><span class="line">Greeting: hostname:k8s-combat-service-v2-5db566fb76-xj7j6, <span class="keyword">in</span>:world, version:200istio-proxy@k8s-combat-service-v1-5b998dc8c8-hkb72:/$ curl <span class="string">&quot;http://127.0.0.1:8081/grpc_client?name=k8s-combat-service-istio-mesh&amp;version=200&quot;</span></span><br><span class="line">Greeting: hostname:k8s-combat-service-v2-5db566fb76-xj7j6, <span class="keyword">in</span>:world, version:200istio-proxy@k8s-combat-service-v1-5b998dc8c8-hkb72:/$ curl <span class="string">&quot;http://127.0.0.1:8081/grpc_client?name=k8s-combat-service-istio-mesh&amp;version=200&quot;</span></span><br><span class="line">Greeting: hostname:k8s-combat-service-v2-5db566fb76-xj7j6, <span class="keyword">in</span>:world, version:200istio-proxy@k8s-combat-service-v1-5b998dc8c8-hkb72:/$ curl <span class="string">&quot;http://127.0.0.1:8081/grpc_client?name=k8s-combat-service-istio-mesh&amp;version=200&quot;</span></span><br><span class="line">Greeting: hostname:k8s-combat-service-v2-5db566fb76-xj7j6, <span class="keyword">in</span>:world, version:200istio-proxy@k8s-combat-service-v1-5b998dc8c8-hkb72:/$ curl <span class="string">&quot;http://127.0.0.1:8081/grpc_client?name=k8s-combat-service-istio-mesh&amp;version=200&quot;</span></span><br><span class="line">Greeting: hostname:k8s-combat-service-v2-5db566fb76-xj7j6, <span class="keyword">in</span>:world, version:200istio-proxy@k8s-combat-service-v1-5b998dc8c8-hkb72:/$ curl <span class="string">&quot;http://127.0.0.1:8081/grpc_client?name=k8s-combat-service-istio-mesh&amp;version=200&quot;</span></span><br><span class="line">Greeting: hostname:k8s-combat-service-v2-5db566fb76-xj7j6, <span class="keyword">in</span>:world, version:200istio-proxy@k8s-combat-service-v1-5b998dc8c8-hkb72:/$ curl <span class="string">&quot;http://127.0.0.1:8081/grpc_client?name=k8s-combat-service-istio-mesh&amp;version=200&quot;</span></span><br></pre></td></tr></table></figure><p>根据以上的上面的测试请求来看，只要我们请求头里带上指定的 <code>version</code> 就会被路由到指定的 <code>Pod</code> 中。</p><p>利用这个特性我们就可以在灰度验证的时候单独发一个灰度版本的 <code>Deployment</code>，同时配合客户端指定版本就可以实现灰度功能了。</p><h2 id="配置权重"><a href="#配置权重" class="headerlink" title="配置权重"></a>配置权重</h2><p>同样基于 <code>VirtualService</code> 我们还可以对不同的 <code>subset</code> 分组进行权重配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span>  </span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span>  </span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">k8s-combat-service-vs</span>  </span><br><span class="line"><span class="attr">spec:</span>  </span><br><span class="line">  <span class="attr">gateways:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">mesh</span>  </span><br><span class="line">  <span class="attr">hosts:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">k8s-combat-service-istio-mesh</span> <span class="comment"># match this host  </span></span><br><span class="line">  <span class="attr">http:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">match:</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">uri:</span>  </span><br><span class="line">            <span class="attr">exact:</span> <span class="string">/helloworld.Greeter/SayHello</span>  </span><br><span class="line">      <span class="attr">route:</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">destination:</span>  </span><br><span class="line">            <span class="attr">host:</span> <span class="string">k8s-combat-service-istio-mesh</span>  </span><br><span class="line">            <span class="attr">subset:</span> <span class="string">v1</span>  </span><br><span class="line">          <span class="attr">weight:</span> <span class="number">10</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">destination:</span>  </span><br><span class="line">            <span class="attr">host:</span> <span class="string">k8s-combat-service-istio-mesh</span>  </span><br><span class="line">            <span class="attr">subset:</span> <span class="string">v2</span>  </span><br><span class="line">          <span class="attr">weight:</span> <span class="number">90</span>  </span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">5000ms</span></span><br></pre></td></tr></table></figure><p>这里演示的是针对 <code>SayHello</code> 接口进行权重配置（当然还有多种匹配规则），90% 的流量会进入 v2 这个 subset，也就是在 <code>k8s-combat-service-istio-mesh</code> service 下的 <code>app: k8s-combat-service-v2</code> Pod。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Greeting: hostname:k8s-combat-service-v2-5db566fb76-xj7j6, <span class="keyword">in</span>:world, version:200istio-proxy@k8s-combat-service-v1-5b998dc8c8-hkb72:/$ curl <span class="string">&quot;http://127.0.0.1:8081/grpc_client?name=k8s-combat-service-istio-mesh&amp;version=200&quot;</span></span><br><span class="line">Greeting: hostname:k8s-combat-service-v2-5db566fb76-xj7j6, <span class="keyword">in</span>:world, version:200istio-proxy@k8s-combat-service-v1-5b998dc8c8-hkb72:/$ curl <span class="string">&quot;http://127.0.0.1:8081/grpc_client?name=k8s-combat-service-istio-mesh&amp;version=200&quot;</span></span><br><span class="line">Greeting: hostname:k8s-combat-service-v2-5db566fb76-xj7j6, <span class="keyword">in</span>:world, version:200istio-proxy@k8s-combat-service-v1-5b998dc8c8-hkb72:/$ curl <span class="string">&quot;http://127.0.0.1:8081/grpc_client?name=k8s-combat-service-istio-mesh&amp;version=200&quot;</span></span><br><span class="line">Greeting: hostname:k8s-combat-service-v2-5db566fb76-xj7j6, <span class="keyword">in</span>:world, version:200istio-proxy@k8s-combat-service-v1-5b998dc8c8-hkb72:/$ curl <span class="string">&quot;http://127.0.0.1:8081/grpc_client?name=k8s-combat-service-istio-mesh&amp;version=200&quot;</span></span><br><span class="line">Greeting: hostname:k8s-combat-service-v2-5db566fb76-xj7j6, <span class="keyword">in</span>:world, version:200istio-proxy@k8s-combat-service-v1-5b998dc8c8-hkb72:/$ curl <span class="string">&quot;http://127.0.0.1:8081/grpc_client?name=k8s-combat-service-istio-mesh&amp;version=200&quot;</span></span><br><span class="line">Greeting: hostname:k8s-combat-service-v2-5db566fb76-xj7j6, <span class="keyword">in</span>:world, version:200istio-proxy@k8s-combat-service-v1-5b998dc8c8-hkb72:/$ curl <span class="string">&quot;http://127.0.0.1:8081/grpc_client?name=k8s-combat-service-istio-mesh&amp;version=200&quot;</span></span><br><span class="line">Greeting: hostname:k8s-combat-service-**v1**-5b998dc8c8-hkb72, <span class="keyword">in</span>:world, version:200istio-proxy@k8s-combat-service-v1-5b998dc8c8-hkb72:/$ curl <span class="string">&quot;http://127.0.0.1:8081/grpc_client?name=k8s-combat-service-istio-mesh&amp;version=200&quot;</span></span><br><span class="line">Greeting: hostname:k8s-combat-service-v2-5db566fb76-xj7j6, <span class="keyword">in</span>:world, version:200istio-proxy@k8s-combat-service-v1-5b998dc8c8-hkb72:/$</span><br></pre></td></tr></table></figure><p>经过测试会发现大部分的请求都会按照我们的预期进入 v2 这个分组。</p><p>当然除之外之外我们还可以：</p><ul><li>超时时间</li><li>故障注入</li><li>重试<br>具体的配置可以参考 <a href="https://istio.io/latest/docs/reference/config/networking/virtual-service/#HTTPMatchRequest">Istio</a> 官方文档：<br><img src="https://s2.loli.net/2023/11/07/LBjEtd1MP9VcAgl.png" alt="image.png"><br>当然在一些云平台也提供了可视化的页面，可以更直观的使用。<br><img src="https://s2.loli.net/2023/11/07/2LVTgeiSK9HyxQJ.png" alt="image.png"></li></ul><blockquote><p>以上是 阿里云的截图</p></blockquote><p>但他们的管理的资源都偏 <code>kubernetes</code>，一般是由运维或者是 DevOps 来配置，不方便开发使用，所以还需要一个介于云厂商和开发者之间的管理发布平台，可以由开发者以项目维度管理维护这些功能。</p><p>本文的所有源码在这里可以访问：<br><a href="https://github.com/crossoverJie/k8s-combat">https://github.com/crossoverJie/k8s-combat</a></p><p>#Blog #Istio </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/11/07/rmwdGK6TQDuhAEW.png&quot; alt=&quot;istio-02.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在上一篇 &lt;a href=&quot;https://crossoverjie.top/2023/10/31/ob/k8s-Istio01/&quot;&gt;k8s-服务网格实战-入门Istio&lt;/a&gt;中分享了如何安装部署 &lt;code&gt;Istio&lt;/code&gt;，同时可以利用 &lt;code&gt;Istio&lt;/code&gt; 实现 &lt;code&gt;gRPC&lt;/code&gt; 的负载均衡。&lt;/p&gt;</summary>
    
    
    
    <category term="k8s" scheme="http://crossoverjie.top/categories/k8s/"/>
    
    
    <category term="Istio" scheme="http://crossoverjie.top/tags/Istio/"/>
    
  </entry>
  
  <entry>
    <title>技术阅读周刊第第四期</title>
    <link href="http://crossoverjie.top/2023/11/03/ob/newsletter/Newsletter04-20231103/"/>
    <id>http://crossoverjie.top/2023/11/03/ob/newsletter/Newsletter04-20231103/</id>
    <published>2023-11-03T09:28:25.000Z</published>
    <updated>2023-11-02T10:09:56.401Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/11/02/bYGoVQFxSL5nqw1.png" alt="image.png"></p><p><strong>技术阅读周刊，每周更新。</strong></p><h2 id="历史更新"><a href="#历史更新" class="headerlink" title="历史更新"></a>历史更新</h2><ul><li><a href="https://crossoverjie.top/2023/10/13/ob/newsletter/Newsletter01-20231013/">20231013：第一期</a></li><li><a href="https://crossoverjie.top/2023/10/22/ob/newsletter/Newsletter02-20231022/">20231022：第二期</a></li><li><a href="https://crossoverjie.top/2023/10/27/ob/newsletter/Newsletter03-20231027/">20231027：第三期</a><span id="more"></span></li></ul><h2 id="Technology-trends-for-Spring-projects-java"><a href="#Technology-trends-for-Spring-projects-java" class="headerlink" title="Technology trends for Spring projects : java"></a>Technology trends for Spring projects : java</h2><p>URL: <a href="https://www.reddit.com/r/java/comments/17ixfzf/technology_trends_for_spring_projects/">https://www.reddit.com/r/java/comments/17ixfzf/technology_trends_for_spring_projects/</a><br>这是一个 <code>Reddit</code> 帖子，讨论了 <code>Spring</code> 项目的技术趋势，以下是一些点赞较高的回复：<br>在招聘的时候还会 <code>Spring</code> 考虑周边的技术栈：比如 Linux、Docker、<code>kubernetes</code>、Git 等，但如果你具备 Spring Security 和 OpenSSL 的话会更受欢迎。</p><blockquote><p>这点在国内感受貌似并不明显，不确定是不是国外更看重一些。</p></blockquote><p>Kotlin 在服务端目前还处于一个较小的规模，特别是如今 Java 发版节奏加快，对于大部分人来说没有足够的理由来摆脱 Java。</p><p><code>Spring</code> 依然是 Java 领域最流行的服务端框架，不管你是否喜欢。</p><p>不用花太多时间去追寻学习新技术，更重要的是确保你已经打好基础了，比如数据库几乎不会发生变化，Spring 底层依然是基于 Servlet 实现的，理解这些基础技术是如何运作的，从而避免一些常见问题。<br>    现在 Spring 已经没有使用 servlet，而是该用 WebFlux 替代</p><blockquote><p>比较认可这个观点，还是更应该花时间到不会变的技术栈上，上层技术如何改变学起来也会更容易。</p></blockquote><p>其中有两个评论比较有意思：<br>Spring 团队花了大量的时间来接入 Kotlin，比如 coroutines 和一些其他资源<br>    在 Spring3 发布的时候，spring 团队也投入了大量时间到 <code>Groovy</code><br>确实当下 <code>Groovy</code> 使用的越来越少了，所以技术潮流确实会随时间变化，还是抓住不可变的性价比更高。</p><h2 id="Service-mesh-data-plane-vs-control-plane-by-Matt-Klein-Envoy-Proxy"><a href="#Service-mesh-data-plane-vs-control-plane-by-Matt-Klein-Envoy-Proxy" class="headerlink" title="Service mesh data plane vs. control plane | by Matt Klein | Envoy Proxy"></a>Service mesh data plane vs. control plane | by Matt Klein | Envoy Proxy</h2><p>URL: <a href="https://blog.envoyproxy.io/service-mesh-data-plane-vs-control-plane-2774e720f7fc">https://blog.envoyproxy.io/service-mesh-data-plane-vs-control-plane-2774e720f7fc</a><br><img src="https://s2.loli.net/2023/11/02/chqbKiTEmDrJpvt.png" alt="image.png"></p><p>服务网格中的数据库面和控制面对比，数据面主要包含以下功能：</p><ul><li>健康检测</li><li>路由</li><li>负载均衡</li><li>身份验证</li><li>可观测性</li></ul><p>控制面主要包含以下功能：</p><ul><li>服务注册发现</li><li>各种控制面的配置管理</li></ul><p>常见的数据面产品有：<a href="https://linkerd.io/">Linkerd</a>, <a href="https://www.nginx.com/">NGINX</a>, <a href="https://www.haproxy.com/">HAProxy</a>, <a href="https://envoyproxy.github.io/">Envoy</a>, <a href="https://traefik.io/">Traefik</a><br>控制面产品有：<a href="https://istio.io/">Istio</a>, <a href="https://verizon.github.io/nelson/">Nelson</a>, <a href="https://github.com/airbnb/synapse">SmartStack</a><br>数据面和控制面是松耦合的，可以替换不同的数据面产品。</p><h2 id="Kubewatch-A-Kubernetes-Watcher-for-Observability-and-Monitoring-by-Seifeddine-Rajhi-Oct-2023-Medium"><a href="#Kubewatch-A-Kubernetes-Watcher-for-Observability-and-Monitoring-by-Seifeddine-Rajhi-Oct-2023-Medium" class="headerlink" title="Kubewatch: A Kubernetes Watcher for Observability and Monitoring | by Seifeddine Rajhi | Oct, 2023 | Medium"></a>Kubewatch: A Kubernetes Watcher for Observability and Monitoring | by Seifeddine Rajhi | Oct, 2023 | Medium</h2><p>URL: <a href="https://medium.com/@seifeddinerajhi/kubewatch-a-kubernetes-watcher-for-observability-and-monitoring-d6dea1dbeb06">https://medium.com/@seifeddinerajhi/kubewatch-a-kubernetes-watcher-for-observability-and-monitoring-d6dea1dbeb06</a><br>介绍了一个名为 <a href="https://github.com/robusta-dev/kubewatch">kubewatch</a> 的开源项目。<br><img src="https://s2.loli.net/2023/11/02/E57lCTrt3fnR2wZ.png" alt="image.png"></p><p>可以将各种资源变化的事件通过 webhook 的方式发出通知，可以让维护者请求 <code>kubernetes</code> 的运行状态。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">namespaceToWatch:</span> <span class="string">&quot;default&quot;</span></span><br><span class="line"><span class="attr">resourcesToWatch:</span></span><br><span class="line">  <span class="attr">deployment:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">replicationcontroller:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">replicaset:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">daemonset:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">services:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">pod:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">job:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">node:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">clusterrole:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">clusterrolebinding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">serviceaccount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">persistentvolume:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">secret:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">configmap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">ingress:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">coreevent:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">event:</span> <span class="literal">true</span>     </span><br></pre></td></tr></table></figure><blockquote><p>这类开源项目其实还蛮多的，我之前也写过一个用于监听我们应用 Pod 的变化的事件，然后将这些消息发送给 Pulsar，只是这个项目做的更全了。</p></blockquote><h2 id="Bye-bye-ChatGPT-AI-Tools-That-Are-As-Good-As-ChatGPT-But-Few-People-Use-by-ArticleAce-Medium"><a href="#Bye-bye-ChatGPT-AI-Tools-That-Are-As-Good-As-ChatGPT-But-Few-People-Use-by-ArticleAce-Medium" class="headerlink" title="Bye-bye, ChatGPT: AI Tools That Are As Good As ChatGPT (But Few People Use) | by ArticleAce | Medium"></a>Bye-bye, ChatGPT: AI Tools That Are As Good As ChatGPT (But Few People Use) | by ArticleAce | Medium</h2><p>URL: <a href="https://medium.com/@Article_Ace/bye-bye-chatgpt-ai-tools-that-are-as-good-as-chatgpt-but-few-people-use-9df4dcdf5ab0">https://medium.com/@Article_Ace/bye-bye-chatgpt-ai-tools-that-are-as-good-as-chatgpt-but-few-people-use-9df4dcdf5ab0</a><br>作者分享了一些除了 ChatGPT 之外的工具，大部分是一些垂直应用。</p><h3 id="Auto-GPT"><a href="#Auto-GPT" class="headerlink" title="Auto-GPT"></a>Auto-GPT</h3><p><a href="https://github.com/Significant-Gravitas/Auto-GPT">https://github.com/Significant-Gravitas/Auto-GPT</a><br><img src="https://s2.loli.net/2023/11/02/LfYKVmgsy4IarE7.png" alt="image.png"></p><p>这个工具已经很流行了，可以自己给自己输入 Prompt 直到完成你的目标为止。</p><h3 id="OpenAI-Playground"><a href="#OpenAI-Playground" class="headerlink" title="OpenAI-Playground"></a>OpenAI-Playground</h3><p>ChatGPT 目前只能让我们选择使用的模型（3.5&#x2F;4）但我们可以使用 playground 来自定义一些输出。<br><a href="https://platform.openai.com/playground">https://platform.openai.com/playground</a><br><img src="https://s2.loli.net/2023/11/02/xjbguH3NhY8PRrw.png" alt="image.png"></p><h3 id="Jasper"><a href="#Jasper" class="headerlink" title="Jasper"></a>Jasper</h3><p> Jasper 是一个用于为社交媒体、广告、博客、邮件生成内容的 AI 工具，相当于是一些不同的垂直领域。<br> <a href="https://www.jasper.ai/">https://www.jasper.ai/</a><br> <img src="https://s2.loli.net/2023/11/02/gfGbBRN8wimklxI.png" alt="image.png"><br>作者会用它来生成一些创意、和视频脚本。</p><h3 id="Quillbot"><a href="#Quillbot" class="headerlink" title="Quillbot"></a>Quillbot</h3><p><a href="https://quillbot.com/">https://quillbot.com/</a><br>这个也是我自己用的较多的工具，可以用来润色我们的英文表达。<br>但我需要在 GitHub 上提一些比较复杂的 issue 、PR 或者是英文邮件时，就会用这个工具进行润色，效果还是很不错的。<br><img src="https://s2.loli.net/2023/11/02/i3bfTUeMvsrEVly.png" alt="image.png"></p><h2 id="如何用Go实现一个异步网络库？"><a href="#如何用Go实现一个异步网络库？" class="headerlink" title="如何用Go实现一个异步网络库？"></a>如何用Go实现一个异步网络库？</h2><p>URL: <a href="https://mp.weixin.qq.com/s/UBcDrPwEdFz7JOfj0UP2Uw">https://mp.weixin.qq.com/s/UBcDrPwEdFz7JOfj0UP2Uw</a><br>本文主要讲解了一些场景的网络模型以及 Go 原生网络模型的原理，并对如何实现一个网络库提供了一些思路<br>网络库通常是为了解决两个问题：</p><ul><li>C10K&#x2F;100K 问题，如何应对海量的并发连接</li><li>服务端如何在高并发的时候正确响应<br>对此有三种网络模型：</li><li>传统 IO 阻塞模型</li><li>Reactor 模型</li><li>Proactor 模型<br><img src="https://s2.loli.net/2023/11/02/X2kKESoBzRwjlip.png" alt="image.png"></li></ul><p> Go 原生模型其实已经很强了，可以把他理解为 Reactor 模型。<br> <img src="https://s2.loli.net/2023/11/02/grRPoQ5uIJBVDAS.png" alt="image.png"></p><p>可以基于以下三层设计进行设计：<br><img src="https://s2.loli.net/2023/11/02/spoJIROb8zWdNL7.png" alt="image.png"><br>也可以参考一些开源的网络库：</p><ul><li><a href="https://github.com/panjf2000/gnet">https://github.com/panjf2000/gnet</a></li><li><a href="https://github.com/Allenxuxu/gev">https://github.com/Allenxuxu/gev</a></li><li><a href="https://github.com/aceld/zinx">https://github.com/aceld/zinx</a></li></ul><p>文章链接：</p><ul><li><a href="https://www.reddit.com/r/java/comments/17ixfzf/technology_trends_for_spring_projects/">https://www.reddit.com/r/java/comments/17ixfzf/technology_trends_for_spring_projects/</a></li><li><a href="https://blog.envoyproxy.io/service-mesh-data-plane-vs-control-plane-2774e720f7fc">https://blog.envoyproxy.io/service-mesh-data-plane-vs-control-plane-2774e720f7fc</a></li><li><a href="https://medium.com/@seifeddinerajhi/kubewatch-a-kubernetes-watcher-for-observability-and-monitoring-d6dea1dbeb06">https://medium.com/@seifeddinerajhi/kubewatch-a-kubernetes-watcher-for-observability-and-monitoring-d6dea1dbeb06</a></li><li><a href="https://medium.com/@Article_Ace/bye-bye-chatgpt-ai-tools-that-are-as-good-as-chatgpt-but-few-people-use-9df4dcdf5ab0">https://medium.com/@Article_Ace/bye-bye-chatgpt-ai-tools-that-are-as-good-as-chatgpt-but-few-people-use-9df4dcdf5ab0</a></li><li><a href="https://mp.weixin.qq.com/s/UBcDrPwEdFz7JOfj0UP2Uw">https://mp.weixin.qq.com/s/UBcDrPwEdFz7JOfj0UP2Uw</a></li></ul><p>#Newletters </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/11/02/bYGoVQFxSL5nqw1.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术阅读周刊，每周更新。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;历史更新&quot;&gt;&lt;a href=&quot;#历史更新&quot; class=&quot;headerlink&quot; title=&quot;历史更新&quot;&gt;&lt;/a&gt;历史更新&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://crossoverjie.top/2023/10/13/ob/newsletter/Newsletter01-20231013/&quot;&gt;20231013：第一期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://crossoverjie.top/2023/10/22/ob/newsletter/Newsletter02-20231022/&quot;&gt;20231022：第二期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://crossoverjie.top/2023/10/27/ob/newsletter/Newsletter03-20231027/&quot;&gt;20231027：第三期&lt;/a&gt;</summary>
    
    
    
    <category term="OB" scheme="http://crossoverjie.top/categories/OB/"/>
    
    <category term="Newsletter" scheme="http://crossoverjie.top/categories/OB/Newsletter/"/>
    
    
  </entry>
  
  <entry>
    <title>k8s-服务网格实战-入门Istio</title>
    <link href="http://crossoverjie.top/2023/10/31/ob/k8s-Istio01/"/>
    <id>http://crossoverjie.top/2023/10/31/ob/k8s-Istio01/</id>
    <published>2023-10-31T14:30:46.000Z</published>
    <updated>2023-10-31T15:29:38.024Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/10/31/QChAqoOVcxbP4tU.png" alt="istio-01.png"></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>终于进入大家都比较感兴趣的服务网格系列了，在前面已经讲解了：</p><ul><li>如何部署应用到 <code>kubernetes</code></li><li>服务之间如何调用</li><li>如何通过域名访问我们的服务</li><li>如何使用 <code>kubernetes</code> 自带的配置 <code>ConfigMap</code></li></ul><p>基本上已经够我们开发一般规模的 web 应用了；但在企业中往往有着复杂的应用调用关系，应用与应用之间的请求也需要进行管理。<br>比如常见的限流、降级、trace、监控、负载均衡等功能。</p><p>在我们使用 <code>kubernetes</code> 之前往往都是由微服务框架来解决这些问题，比如 Dubbo、SpringCloud 都有对应的功能。</p><p>但当我们上了 <code>kubernetes</code> 之后这些事情就应该交给一个专门的云原生组件来解决，也就是本次会讲到的 <code>Istio</code>，它是目前使用最为广泛的服务网格解决方案。</p><span id="more"></span><p><img src="https://s2.loli.net/2023/10/31/CtJsogSyPD7cjEW.png" alt="image.png"><br>官方对于 Istio 的解释比较简洁，落到具体的功能点也就是刚才提到的：</p><ul><li>限流降级</li><li>路由转发、负载均衡</li><li>入口网关、<code>TLS安全认证</code></li><li>灰度发布等</li></ul><p><img src="https://s2.loli.net/2023/10/31/aXnNZhu91m7V2Tw.png" alt="image.png"></p><p>再结合官方的架构图可知：Istio 分为控制面 <code>control plane</code> 和数据面 <code>data plane</code>。</p><p>控制面可以理解为 Istio 自身的管理功能：</p><ul><li>比如服务注册发现</li><li>管理配置数据面所需要的网络规则等</li></ul><p>而数据面可以简单的把他理解为由 <code>Envoy</code> 代理的我们的业务应用，我们应用中所有的流量进出都会经过 <code>Envoy</code> 代理。</p><p>所以它可以实现负载均衡、熔断保护、认证授权等功能。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>首先安装 Istio 命令行工具</p><blockquote><p>这里的前提是有一个 kubernetes 运行环境</p></blockquote><p>Linux 使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://istio.io/downloadIstio | sh -</span><br></pre></td></tr></table></figure><p>Mac 可以使用 brew：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install istioctl</span><br></pre></td></tr></table></figure><p>其他环境可以下载 Istio 后配置环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PWD/bin:$PATH</span><br></pre></td></tr></table></figure><p>之后我们可以使用 <code>install</code> 命令安装控制面。</p><blockquote><p>这里默认使用的是 <code>kubectl</code> 所配置的 <code>kubernetes</code> 集群</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">istioctl install --<span class="built_in">set</span> profile=demo -y</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/10/30/DLOeRGrA7gNC1Xa.png"><br>这个的 <code>profile</code> 还有以下不同的值，为了演示我们使用 <code>demo</code> 即可。<br><img src="https://s2.loli.net/2023/10/26/3JXneYvyqI4WTgt.png" alt="image.png"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启 default 命名空间自动注入</span></span><br><span class="line">$ k label namespace default istio-injection=enabled</span><br><span class="line"></span><br><span class="line">$ k describe ns default</span><br><span class="line">Name:         default</span><br><span class="line">Labels:       istio-injection=enabled</span><br><span class="line">              kubernetes.io/metadata.name=default</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Status:       Active</span><br><span class="line">No resource quota.</span><br><span class="line">No LimitRange resource.</span><br></pre></td></tr></table></figure><p>之后我们为 <code>namespace</code> 打上 <code>label</code>，使得 Istio 控制面知道哪个 <code>namespace</code> 下的 <code>Pod</code> 会自动注入 <code>sidecar</code>。</p><p>这里我们为 default 这个命名空间打开自动注入 <code>sidecar</code>，然后在这里部署我们之前使用到的 <a href="https://github.com/crossoverJie/k8s-combat/blob/main/deployment/deployment-istio.yaml">deployment-istio.yaml</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ k apply -f deployment/deployment-istio.yaml</span><br><span class="line"></span><br><span class="line">$ k get pod</span><br><span class="line">NAME                                  READY   STATUS    RESTARTS</span><br><span class="line">k8s-combat-service-5bfd78856f-8zjjf   2/2     Running   0          </span><br><span class="line">k8s-combat-service-5bfd78856f-mblqd   2/2     Running   0          </span><br><span class="line">k8s-combat-service-5bfd78856f-wlc8z   2/2     Running   0       </span><br></pre></td></tr></table></figure><p>此时会看到每个Pod 有两个 container（其中一个就是 istio-proxy sidecar），也就是之前做 <a href="https://crossoverjie.top/2023/10/16/ob/k8s-grpc-lb/">gRPC 负载均衡</a>测试时的代码。</p><p><img src="https://s2.loli.net/2023/10/31/js1Gz5yVCNLep9W.png" alt="image.png"><br>还是进行负载均衡测试，效果是一样的，说明 <code>Istio</code> 起作用了。</p><p>此时我们再观察 <code>sidecar</code> 的日志时，会看到刚才我们所发出和接受到的流量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ k logs -f k8s-combat-service-5bfd78856f-wlc8z -c istio-proxy</span><br><span class="line"></span><br><span class="line">[2023-10-31T14:52:14.279Z] <span class="string">&quot;POST /helloworld.Greeter/SayHello HTTP/2&quot;</span> 200 - via_upstream - <span class="string">&quot;-&quot;</span> 12 61 14 9 <span class="string">&quot;-&quot;</span> <span class="string">&quot;grpc-go/1.58.3&quot;</span> <span class="string">&quot;6d293d32-af96-9f87-a8e4-6665632f7236&quot;</span> <span class="string">&quot;k8s-combat-service:50051&quot;</span> <span class="string">&quot;172.17.0.9:50051&quot;</span> inbound|50051|| 127.0.0.6:42051 172.17.0.9:50051 172.17.0.9:40804 outbound_.50051_._.k8s-combat-service.default.svc.cluster.local default</span><br><span class="line">[2023-10-31T14:52:14.246Z] <span class="string">&quot;POST /helloworld.Greeter/SayHello HTTP/2&quot;</span> 200 - via_upstream - <span class="string">&quot;-&quot;</span> 12 61 58 39 <span class="string">&quot;-&quot;</span> <span class="string">&quot;grpc-go/1.58.3&quot;</span> <span class="string">&quot;6d293d32-af96-9f87-a8e4-6665632f7236&quot;</span> <span class="string">&quot;k8s-combat-service:50051&quot;</span> <span class="string">&quot;172.17.0.9:50051&quot;</span> outbound|50051||k8s-combat-service.default.svc.cluster.local 172.17.0.9:40804 10.101.204.13:50051 172.17.0.9:54012 - default</span><br><span class="line">[2023-10-31T14:52:15.659Z] <span class="string">&quot;POST /helloworld.Greeter/SayHello HTTP/2&quot;</span> 200 - via_upstream - <span class="string">&quot;-&quot;</span> 12 61 35 34 <span class="string">&quot;-&quot;</span> <span class="string">&quot;grpc-go/1.58.3&quot;</span> <span class="string">&quot;ed8ab4f2-384d-98da-81b7-d4466eaf0207&quot;</span> <span class="string">&quot;k8s-combat-service:50051&quot;</span> <span class="string">&quot;172.17.0.10:50051&quot;</span> outbound|50051||k8s-combat-service.default.svc.cluster.local 172.17.0.9:39800 10.101.204.13:50051 172.17.0.9:54012 - default</span><br><span class="line">[2023-10-31T14:52:16.524Z] <span class="string">&quot;POST /helloworld.Greeter/SayHello HTTP/2&quot;</span> 200 - via_upstream - <span class="string">&quot;-&quot;</span> 12 61 28 26 <span class="string">&quot;-&quot;</span> <span class="string">&quot;grpc-go/1.58.3&quot;</span> <span class="string">&quot;67a22028-dfb3-92ca-aa23-573660b30dd4&quot;</span> <span class="string">&quot;k8s-combat-service:50051&quot;</span> <span class="string">&quot;172.17.0.8:50051&quot;</span> outbound|50051||k8s-combat-service.default.svc.cluster.local 172.17.0.9:44580 10.101.204.13:50051 172.17.0.9:54012 - default</span><br><span class="line">[2023-10-31T14:52:16.680Z] <span class="string">&quot;POST /helloworld.Greeter/SayHello HTTP/2&quot;</span> 200 - via_upstream - <span class="string">&quot;-&quot;</span> 12 61 2 2 <span class="string">&quot;-&quot;</span> <span class="string">&quot;grpc-go/1.58.3&quot;</span> <span class="string">&quot;b4761d9f-7e4c-9f2c-b06f-64a028faa5bc&quot;</span> <span class="string">&quot;k8s-combat-service:50051&quot;</span> <span class="string">&quot;172.17.0.10:50051&quot;</span> outbound|50051||k8s-combat-service.default.svc.cluster.local 172.17.0.9:39800 10.101.204.13:50051 172.17.0.9:54012 - default</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本期的内容比较简单，主要和安装配置相关，下一期更新如何配置内部服务调用的超时、限流等功能。</p><p>其实目前大部分操作都是偏运维的，即便是后续的超时配置等功能都只是编写 yaml 资源。</p><p>但在生产使用时，我们会给开发者提供一个管理台的可视化页面，可供他们自己灵活配置这些原本需要在 <code>yaml</code> 中配置的功能。</p><p><img src="https://s2.loli.net/2023/10/31/B3TiC9rJwPbGVHQ.png" alt="image.png"><br>其实各大云平台厂商都有提供类似的能力，比如阿里云的 EDAS 等。</p><p>本文的所有源码在这里可以访问：<br><a href="https://github.com/crossoverJie/k8s-combat">https://github.com/crossoverJie/k8s-combat</a></p><p>#Blog #Istio </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/10/31/QChAqoOVcxbP4tU.png&quot; alt=&quot;istio-01.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;终于进入大家都比较感兴趣的服务网格系列了，在前面已经讲解了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何部署应用到 &lt;code&gt;kubernetes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;服务之间如何调用&lt;/li&gt;
&lt;li&gt;如何通过域名访问我们的服务&lt;/li&gt;
&lt;li&gt;如何使用 &lt;code&gt;kubernetes&lt;/code&gt; 自带的配置 &lt;code&gt;ConfigMap&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本上已经够我们开发一般规模的 web 应用了；但在企业中往往有着复杂的应用调用关系，应用与应用之间的请求也需要进行管理。&lt;br&gt;比如常见的限流、降级、trace、监控、负载均衡等功能。&lt;/p&gt;
&lt;p&gt;在我们使用 &lt;code&gt;kubernetes&lt;/code&gt; 之前往往都是由微服务框架来解决这些问题，比如 Dubbo、SpringCloud 都有对应的功能。&lt;/p&gt;
&lt;p&gt;但当我们上了 &lt;code&gt;kubernetes&lt;/code&gt; 之后这些事情就应该交给一个专门的云原生组件来解决，也就是本次会讲到的 &lt;code&gt;Istio&lt;/code&gt;，它是目前使用最为广泛的服务网格解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="k8s" scheme="http://crossoverjie.top/categories/k8s/"/>
    
    
    <category term="Istio" scheme="http://crossoverjie.top/tags/Istio/"/>
    
  </entry>
  
</feed>
